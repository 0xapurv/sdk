library;
import self as self;
import "dart:core" as core;

class Number extends core::Object {
  final field core::int* value;
  constructor •(core::int* value) → self::Number*
    : self::Number::value = value, super core::Object::•()
    ;
  get hashCode() → core::int*
    return this.{self::Number::value}.{core::num::hashCode};
  operator ==(core::Object* other) → core::bool*
    return other is self::Number* && this.{self::Number::value}.{core::num::==}(other{self::Number*}.{self::Number::value});
  method toString() → core::String*
    return "Number(${this.{self::Number::value}})";
}
class Class extends core::Object {
  field self::Number* field;
  constructor •(self::Number* field) → self::Class*
    : self::Class::field = field, super core::Object::•()
    ;
}
extension NumberExtension on self::Number* {
  operator + = self::NumberExtension|+;
  operator - = self::NumberExtension|-;
}
extension ClassExtension on self::Class* {
  get property = self::ClassExtension|get#property;
  set property = self::ClassExtension|set#property;
}
static method NumberExtension|+(final self::Number* #this, self::Number* other) → self::Number*
  return new self::Number::•(#this.{self::Number::value}.{core::num::+}(other.{self::Number::value}));
static method NumberExtension|-(final self::Number* #this, self::Number* other) → self::Number*
  return new self::Number::•(#this.{self::Number::value}.{core::num::-}(other.{self::Number::value}));
static method ClassExtension|get#property(final self::Class* #this) → self::Number*
  return #this.{self::Class::field};
static method ClassExtension|set#property(final self::Class* #this, self::Number* value) → self::Number* {
  final self::Number* #t1 = value;
  #this.{self::Class::field} = value;
  return #t1;
}
static method main() → dynamic {
  self::testLocals();
  self::testProperties();
}
static method testLocals() → dynamic {
  self::Number* n0 = new self::Number::•(0);
  self::Number* n1 = new self::Number::•(1);
  self::Number* n2 = new self::Number::•(2);
  self::Number* v = n0;
  self::expect(n0, v);
  self::expect(n1, v = self::NumberExtension|+(v, n1));
  self::expect(n2, v = self::NumberExtension|+(v, n1));
  self::expect(n0, v = self::NumberExtension|-(v, n2));
  self::expect(n1, v = self::NumberExtension|+(v, n1));
  self::expect(n0, v = self::NumberExtension|-(v, n1));
}
static method testProperties() → dynamic {
  self::Number* n0 = new self::Number::•(0);
  self::Number* n1 = new self::Number::•(1);
  self::Number* n2 = new self::Number::•(2);
  self::Class* v = new self::Class::•(n0);
  self::expect(n0, v.{self::Class::field});
  self::expect(n1, let final self::Class* #t2 = v in #t2.{self::Class::field} = self::NumberExtension|+(#t2.{self::Class::field}, n1));
  self::expect(n2, let final self::Class* #t3 = v in #t3.{self::Class::field} = self::NumberExtension|+(#t3.{self::Class::field}, n1));
  self::expect(n0, let final self::Class* #t4 = v in #t4.{self::Class::field} = self::NumberExtension|-(#t4.{self::Class::field}, n2));
  self::expect(n1, let final self::Class* #t5 = v in #t5.{self::Class::field} = self::NumberExtension|+(#t5.{self::Class::field}, n1));
  self::expect(n0, let final self::Class* #t6 = v in #t6.{self::Class::field} = self::NumberExtension|-(#t6.{self::Class::field}, n1));
  self::expect(n0, self::ClassExtension|get#property(v));
  self::expect(n1, let final self::Class* #t7 = v in self::ClassExtension|set#property(#t7, self::NumberExtension|+(self::ClassExtension|get#property(#t7), n1)));
  self::expect(n2, let final self::Class* #t8 = v in self::ClassExtension|set#property(#t8, self::NumberExtension|+(self::ClassExtension|get#property(#t8), n1)));
  self::expect(n0, let final self::Class* #t9 = v in self::ClassExtension|set#property(#t9, self::NumberExtension|-(self::ClassExtension|get#property(#t9), n2)));
  self::expect(n1, let final self::Class* #t10 = v in self::ClassExtension|set#property(#t10, self::NumberExtension|+(self::ClassExtension|get#property(#t10), n1)));
  self::expect(n0, let final self::Class* #t11 = v in self::ClassExtension|set#property(#t11, self::NumberExtension|-(self::ClassExtension|get#property(#t11), n1)));
}
static method expect(dynamic expected, dynamic actual) → dynamic {
  if(!expected.{core::Object::==}(actual)) {
    throw "Mismatch: expected=${expected}, actual=${actual}";
  }
}

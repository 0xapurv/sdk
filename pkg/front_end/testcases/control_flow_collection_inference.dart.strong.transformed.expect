library;
//
// Problems in library:
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:21:16: Error: Expected ':' after this.
//   var map20 = {if (oracle("foo")) ...{"bar": 42}, "baz": null};
//                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:24:16: Error: Expected ':' after this.
//   var map21 = {if (oracle("foo")) ...{"bar": dynVar}, "baz": null};
//                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:27:16: Error: Expected ':' after this.
//   var map22 = {if (oracle("foo")) ...{"bar": [42]}, "baz": null};
//                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:30:16: Error: Expected ':' after this.
//   var map30 = {if (oracle("foo")) if (oracle()) ...{"bar": 42}, "baz": null};
//                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:33:16: Error: Expected ':' after this.
//   var map31 = {if (oracle("foo")) if (oracle()) ...{"bar": dynVar}, "baz": null};
//                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:36:16: Error: Expected ':' after this.
//   var map33 = {if (oracle("foo")) if (oracle()) ...{"bar": [42]}, "baz": null};
//                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:39:35: Error: Expected ':' after this.
//   Map<String, List<int>> map40 = {if (oracle("foo")) ...{"bar", []}, "baz": null};
//                                   ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:44:35: Error: Expected ':' after this.
//   Map<String, List<int>> map42 = {if (oracle("foo")) if (oracle()) ...{"bar": []}, "baz": null};
//                                   ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:47:3: Error: Expected 2 type arguments.
//   Map<int> map50 = {if (oracle("foo")) ...{}, "baz": null};
//   ^^^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:47:21: Error: Expected ':' after this.
//   Map<int> map50 = {if (oracle("foo")) ...{}, "baz": null};
//                     ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:52:29: Error: Expected ':' after this.
//   Map<String, int> map52 = {if (oracle("foo")) if (oracle()) ...{}, "baz": null};
//                             ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:55:35: Error: Expected ':' after this.
//   Map<String, List<int>> map60 = {if (oracle("foo")) ...{"bar": []}, "baz": null};
//                                   ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:58:35: Error: Expected ':' after this.
//   Map<String, List<int>> map61 = {if (oracle("foo")) if (oracle()) ...{"bar": []}, "baz": null};
//                                   ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:80:29: Error: Expected ':' after this.
//   Map<String, int> map91 = {if (oracle("foo")) ...dynVar, "baz": null};
//                             ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:68:38: Error: Unexpected type 'Map<String, double>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   var map81 = {if (oracle("foo")) ...mapToInt else ...mapToDouble, null};
//                                      ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:68:55: Error: Unexpected type 'Map<String, double>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   var map81 = {if (oracle("foo")) ...mapToInt else ...mapToDouble, null};
//                                                       ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:74:38: Error: Unexpected type 'Map<String, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   var map83 = {if (oracle("foo")) ...mapToInt else 3.14, null};
//                                      ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:89:17: Error: Expected ':' after this.
//   <String, int>{if (oracle("foo")) ...{"bar": "bar"}, "baz": null};
//                 ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:92:17: Error: Expected ':' after this.
//   <String, int>{if (oracle("foo")) ...["bar"], "baz": null};
//                 ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:98:17: Error: Expected ':' after this.
//   <String, int>{if (oracle("foo")) ...[42] else {"bar": 42}, "baz": null};
//                 ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:101:17: Error: Expected ':' after this.
//   <String, int>{if (oracle("foo")) {"bar": 42} else ...[42], "baz": null};
//                 ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:84:28: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int>[if (oracle("foo")) "bar"];
//                            ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:85:28: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int>{if (oracle("foo")) "bar", null};
//                            ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:86:41: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <String, int>{if (oracle("foo")) "bar": "bar", "baz": null};
//                                         ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:87:32: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int>[if (oracle("foo")) ...["bar"]];
//                                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:88:32: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int>{if (oracle("foo")) ...["bar"], null};
//                                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:90:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>[if (oracle("foo")) ...map];
//                               ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:91:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>{if (oracle("foo")) ...map, null};
//                               ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:93:12: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
// Try changing the type of the left hand side, or casting the right hand side to 'String'.
//   <String>[if (oracle("foo")) 42 else 3.14];
//            ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:94:12: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
// Try changing the type of the left hand side, or casting the right hand side to 'String'.
//   <String>{if (oracle("foo")) 42 else 3.14, null};
//            ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:95:20: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
// Try changing the type of the left hand side, or casting the right hand side to 'String'.
//   <String, String>{if (oracle("foo")) "bar": 42 else "baz": 3.14, "baz": null};
//                    ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:96:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>[if (oracle("foo")) ...map else 42];
//                               ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:97:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>{if (oracle("foo")) ...map else 42, null};
//                               ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:99:39: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>[if (oracle("foo")) 42 else ...map];
//                                       ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:100:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>{if (oracle("foo")) ...map else 42, null};
//                               ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:179:14: Error: Setter not found: 'i'.
//   <int>[for (i in <int>[1]) i];
//              ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:180:14: Error: Setter not found: 'i'.
//   <int>{for (i in <int>[1]) i, null};
//              ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:190:17: Error: The keyword 'await' isn't allowed for a normal 'for' statement.
// Try removing the keyword, or use a for-each statement.
//   var list50 = [await for (;;) 42];
//                 ^^^^^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:191:16: Error: The keyword 'await' isn't allowed for a normal 'for' statement.
// Try removing the keyword, or use a for-each statement.
//   var set50 = {await for (;;) 42, null};
//                ^^^^^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:165:45: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int>[for (int i = 0; oracle("foo"); i++) "bar"];
//                                             ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:166:45: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int>{for (int i = 0; oracle("foo"); i++) "bar", null};
//                                             ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:167:49: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int>[for (int i = 0; oracle("foo"); i++) ...["bar"]];
//                                                 ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:168:49: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int>{for (int i = 0; oracle("foo"); i++) ...["bar"], null};
//                                                 ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:169:48: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>[for (int i = 0; oracle("foo"); i++) ...map];
//                                                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:170:48: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>{for (int i = 0; oracle("foo"); i++) ...map, null};
//                                                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:171:48: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
// Try changing the type of the left hand side, or casting the right hand side to 'String'.
//   <String>[for (int i = 0; oracle("foo"); i++) if (oracle()) 42 else 3.14];
//                                                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:172:48: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
// Try changing the type of the left hand side, or casting the right hand side to 'String'.
//   <String>{for (int i = 0; oracle("foo"); i++) if (oracle()) 42 else 3.14, null};
//                                                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:173:62: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>[for (int i = 0; oracle("foo"); i++) if (oracle()) ...map else 42];
//                                                              ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:174:62: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>{for (int i = 0; oracle("foo"); i++) if (oracle()) ...map else 42, null};
//                                                              ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:175:70: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>[for (int i = 0; oracle("foo"); i++) if (oracle()) 42 else ...map];
//                                                                      ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:176:62: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>{for (int i = 0; oracle("foo"); i++) if (oracle()) ...map else 42, null};
//                                                              ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:182:31: Error: The type 'String' used in the 'for' loop must implement 'Iterable<dynamic>'.
//  - 'Iterable' is from 'dart:core'.
//   var list10 = [for (var i in "not iterable") i];
//                               ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:183:30: Error: The type 'String' used in the 'for' loop must implement 'Iterable<dynamic>'.
//  - 'Iterable' is from 'dart:core'.
//   var set10 = {for (var i in "not iterable") i, null};
//                              ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:184:32: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var list20 = [for (int i in ["not", "int"]) i];
//                                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:184:39: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var list20 = [for (int i in ["not", "int"]) i];
//                                       ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:185:31: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var set20 = {for (int i in ["not", "int"]) i, null};
//                               ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:185:38: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var set20 = {for (int i in ["not", "int"]) i, null};
//                                      ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:186:37: Error: The type 'String' used in the 'for' loop must implement 'Stream<dynamic>'.
//  - 'Stream' is from 'dart:async'.
//   var list30 = [await for (var i in "not stream") i];
//                                     ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:187:36: Error: The type 'String' used in the 'for' loop must implement 'Stream<dynamic>'.
//  - 'Stream' is from 'dart:async'.
//   var set30 = {await for (var i in "not stream") i, null};
//                                    ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:188:58: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var list40 = [await for (int i in Stream.fromIterable(["not", "int"])) i];
//                                                          ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:188:65: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var list40 = [await for (int i in Stream.fromIterable(["not", "int"])) i];
//                                                                 ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:189:57: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var set40 = {await for (int i in Stream.fromIterable(["not", "int"])) i, null};
//                                                         ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:189:64: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var set40 = {await for (int i in Stream.fromIterable(["not", "int"])) i, null};
//                                                                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:192:24: Error: A value of type 'String' can't be assigned to a variable of type 'bool'.
// Try changing the type of the left hand side, or casting the right hand side to 'bool'.
//   var list60 = [for (; "not bool";) 42];
//                        ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:193:23: Error: A value of type 'String' can't be assigned to a variable of type 'bool'.
// Try changing the type of the left hand side, or casting the right hand side to 'bool'.
//   var set60 = {for (; "not bool";) 42, null};
//                       ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:197:26: Error: The asynchronous for-in can only be used in functions marked with 'async' or 'async*'.
// Try marking the function body with either 'async' or 'async*', or removing the 'await' before the for loop.
//   <int>[await for (int i in stream) i];
//                          ^^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:198:26: Error: The asynchronous for-in can only be used in functions marked with 'async' or 'async*'.
// Try marking the function body with either 'async' or 'async*', or removing the 'await' before the for loop.
//   <int>{await for (int i in stream) i};
//                          ^^
//
import self as self;
import "dart:core" as core;
import "dart:collection" as col;
import "dart:async" as asy;

static method oracle<T extends core::Object = dynamic>([self::oracle::T t = null]) → dynamic
  return true;
static method testIfElement(dynamic dynVar, core::List<core::int> listInt, core::List<core::double> listDouble, core::Map<core::String, core::int> mapToInt, core::Map<core::String, core::double> mapToDouble) → dynamic {
  core::List<core::int> list10 = block {
    final core::List<core::int> #t1 = <core::int>[];
    if(self::oracle<core::String>("foo"))
      #t1.{core::List::add}(42);
  } =>#t1;
  core::Set<core::int> set10 = block {
    final core::Set<core::int> #t2 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo"))
      #t2.{core::Set::add}(42);
    #t2.{core::Set::add}(null);
  } =>#t2;
  core::Map<core::String, core::int> map10 = block {
    final core::Map<core::String, core::int> #t3 = <core::String, core::int>{};
    if(self::oracle<core::String>("foo"))
      #t3.{core::Map::[]=}("bar", 42);
    #t3.{core::Map::[]=}("baz", null);
  } =>#t3;
  core::List<dynamic> list11 = block {
    final core::List<dynamic> #t4 = <dynamic>[];
    if(self::oracle<core::String>("foo"))
      #t4.{core::List::add}(dynVar);
  } =>#t4;
  core::Set<dynamic> set11 = block {
    final core::Set<dynamic> #t5 = col::LinkedHashSet::•<dynamic>();
    if(self::oracle<core::String>("foo"))
      #t5.{core::Set::add}(dynVar);
    #t5.{core::Set::add}(null);
  } =>#t5;
  core::Map<core::String, dynamic> map11 = block {
    final core::Map<core::String, dynamic> #t6 = <core::String, dynamic>{};
    if(self::oracle<core::String>("foo"))
      #t6.{core::Map::[]=}("bar", dynVar);
    #t6.{core::Map::[]=}("baz", null);
  } =>#t6;
  core::List<core::List<core::int>> list12 = block {
    final core::List<core::List<core::int>> #t7 = <core::List<core::int>>[];
    if(self::oracle<core::String>("foo"))
      #t7.{core::List::add}(<core::int>[42]);
  } =>#t7;
  core::Set<core::List<core::int>> set12 = block {
    final core::Set<core::List<core::int>> #t8 = col::LinkedHashSet::•<core::List<core::int>>();
    if(self::oracle<core::String>("foo"))
      #t8.{core::Set::add}(<core::int>[42]);
    #t8.{core::Set::add}(null);
  } =>#t8;
  core::Map<core::String, core::List<core::int>> map12 = block {
    final core::Map<core::String, core::List<core::int>> #t9 = <core::String, core::List<core::int>>{};
    if(self::oracle<core::String>("foo"))
      #t9.{core::Map::[]=}("bar", <core::int>[42]);
    #t9.{core::Map::[]=}("baz", null);
  } =>#t9;
  core::List<core::int> list20 = block {
    final core::List<core::int> #t10 = <core::int>[];
    if(self::oracle<core::String>("foo"))
      for (final core::int #t11 in <core::int>[42])
        #t10.{core::List::add}(#t11);
  } =>#t10;
  core::Set<core::int> set20 = block {
    final core::Set<core::int> #t12 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo"))
      for (final core::int #t13 in <core::int>[42])
        #t12.{core::Set::add}(#t13);
    #t12.{core::Set::add}(null);
  } =>#t12;
  core::Map<core::String, core::Null> map20 = <core::String, core::Null>{"baz": null};
  core::List<dynamic> list21 = block {
    final core::List<dynamic> #t14 = <dynamic>[];
    if(self::oracle<core::String>("foo"))
      for (final dynamic #t15 in <dynamic>[dynVar])
        #t14.{core::List::add}(#t15);
  } =>#t14;
  core::Set<dynamic> set21 = block {
    final core::Set<dynamic> #t16 = col::LinkedHashSet::•<dynamic>();
    if(self::oracle<core::String>("foo"))
      for (final dynamic #t17 in <dynamic>[dynVar])
        #t16.{core::Set::add}(#t17);
    #t16.{core::Set::add}(null);
  } =>#t16;
  core::Map<core::String, core::Null> map21 = <core::String, core::Null>{"baz": null};
  core::List<core::List<core::int>> list22 = block {
    final core::List<core::List<core::int>> #t18 = <core::List<core::int>>[];
    if(self::oracle<core::String>("foo"))
      for (final core::List<core::int> #t19 in <core::List<core::int>>[<core::int>[42]])
        #t18.{core::List::add}(#t19);
  } =>#t18;
  core::Set<core::List<core::int>> set22 = block {
    final core::Set<core::List<core::int>> #t20 = col::LinkedHashSet::•<core::List<core::int>>();
    if(self::oracle<core::String>("foo"))
      for (final core::List<core::int> #t21 in <core::List<core::int>>[<core::int>[42]])
        #t20.{core::Set::add}(#t21);
    #t20.{core::Set::add}(null);
  } =>#t20;
  core::Map<core::String, core::Null> map22 = <core::String, core::Null>{"baz": null};
  core::List<core::int> list30 = block {
    final core::List<core::int> #t22 = <core::int>[];
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        for (final core::int #t23 in <core::int>[42])
          #t22.{core::List::add}(#t23);
  } =>#t22;
  core::Set<core::int> set30 = block {
    final core::Set<core::int> #t24 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        for (final core::int #t25 in <core::int>[42])
          #t24.{core::Set::add}(#t25);
    #t24.{core::Set::add}(null);
  } =>#t24;
  core::Map<core::String, core::Null> map30 = <core::String, core::Null>{"baz": null};
  core::List<dynamic> list31 = block {
    final core::List<dynamic> #t26 = <dynamic>[];
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        for (final dynamic #t27 in <dynamic>[dynVar])
          #t26.{core::List::add}(#t27);
  } =>#t26;
  core::Set<dynamic> set31 = block {
    final core::Set<dynamic> #t28 = col::LinkedHashSet::•<dynamic>();
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        for (final dynamic #t29 in <dynamic>[dynVar])
          #t28.{core::Set::add}(#t29);
    #t28.{core::Set::add}(null);
  } =>#t28;
  core::Map<core::String, core::Null> map31 = <core::String, core::Null>{"baz": null};
  core::List<core::List<core::int>> list33 = block {
    final core::List<core::List<core::int>> #t30 = <core::List<core::int>>[];
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        for (final core::List<core::int> #t31 in <core::List<core::int>>[<core::int>[42]])
          #t30.{core::List::add}(#t31);
  } =>#t30;
  core::Set<core::List<core::int>> set33 = block {
    final core::Set<core::List<core::int>> #t32 = col::LinkedHashSet::•<core::List<core::int>>();
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        for (final core::List<core::int> #t33 in <core::List<core::int>>[<core::int>[42]])
          #t32.{core::Set::add}(#t33);
    #t32.{core::Set::add}(null);
  } =>#t32;
  core::Map<core::String, core::Null> map33 = <core::String, core::Null>{"baz": null};
  core::List<core::List<core::int>> list40 = block {
    final core::List<core::List<core::int>> #t34 = <core::List<core::int>>[];
    if(self::oracle<core::String>("foo"))
      for (final core::List<core::int> #t35 in <core::List<core::int>>[<core::int>[]])
        #t34.{core::List::add}(#t35);
  } =>#t34;
  core::Set<core::List<core::int>> set40 = block {
    final core::Set<core::List<core::int>> #t36 = col::LinkedHashSet::•<core::List<core::int>>();
    if(self::oracle<core::String>("foo"))
      for (final core::List<core::int> #t37 in <core::List<core::int>>[<core::int>[]])
        #t36.{core::Set::add}(#t37);
    #t36.{core::Set::add}(null);
  } =>#t36;
  core::Map<core::String, core::List<core::int>> map40 = <core::String, core::List<core::int>>{"baz": null};
  core::List<core::List<core::int>> list41 = block {
    final core::List<core::List<core::int>> #t38 = <core::List<core::int>>[];
    if(self::oracle<core::String>("foo"))
      for (final core::List<core::int> #t39 in let final core::Set<core::List<core::int>> #t40 = col::LinkedHashSet::•<core::List<core::int>>() in let final core::bool #t41 = #t40.{core::Set::add}(<core::int>[]) in #t40)
        #t38.{core::List::add}(#t39);
  } =>#t38;
  core::Set<core::List<core::int>> set41 = block {
    final core::Set<core::List<core::int>> #t42 = col::LinkedHashSet::•<core::List<core::int>>();
    if(self::oracle<core::String>("foo"))
      for (final core::List<core::int> #t43 in let final core::Set<core::List<core::int>> #t44 = col::LinkedHashSet::•<core::List<core::int>>() in let final core::bool #t45 = #t44.{core::Set::add}(<core::int>[]) in #t44)
        #t42.{core::Set::add}(#t43);
    #t42.{core::Set::add}(null);
  } =>#t42;
  core::List<core::List<core::int>> list42 = block {
    final core::List<core::List<core::int>> #t46 = <core::List<core::int>>[];
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        for (final core::List<core::int> #t47 in <core::List<core::int>>[<core::int>[]])
          #t46.{core::List::add}(#t47);
  } =>#t46;
  core::Set<core::List<core::int>> set42 = block {
    final core::Set<core::List<core::int>> #t48 = col::LinkedHashSet::•<core::List<core::int>>();
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        for (final core::List<core::int> #t49 in <core::List<core::int>>[<core::int>[]])
          #t48.{core::Set::add}(#t49);
    #t48.{core::Set::add}(null);
  } =>#t48;
  core::Map<core::String, core::List<core::int>> map42 = <core::String, core::List<core::int>>{"baz": null};
  core::List<core::int> list50 = block {
    final core::List<core::int> #t50 = <core::int>[];
    if(self::oracle<core::String>("foo"))
      for (final core::int #t51 in <core::int>[])
        #t50.{core::List::add}(#t51);
  } =>#t50;
  core::Set<core::int> set50 = block {
    final core::Set<core::int> #t52 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo"))
      for (final core::int #t53 in <core::int>[])
        #t52.{core::Set::add}(#t53);
    #t52.{core::Set::add}(null);
  } =>#t52;
  core::Map<dynamic, dynamic> map50 = <dynamic, dynamic>{"baz": null};
  core::List<core::int> list51 = block {
    final core::List<core::int> #t54 = <core::int>[];
    if(self::oracle<core::String>("foo"))
      for (final core::int #t55 in let final core::Set<core::int> #t56 = col::LinkedHashSet::•<core::int>() in #t56)
        #t54.{core::List::add}(#t55);
  } =>#t54;
  core::Set<core::int> set51 = block {
    final core::Set<core::int> #t57 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo"))
      for (final core::int #t58 in let final core::Set<core::int> #t59 = col::LinkedHashSet::•<core::int>() in #t59)
        #t57.{core::Set::add}(#t58);
    #t57.{core::Set::add}(null);
  } =>#t57;
  core::List<core::int> list52 = block {
    final core::List<core::int> #t60 = <core::int>[];
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        for (final core::int #t61 in <core::int>[])
          #t60.{core::List::add}(#t61);
  } =>#t60;
  core::Set<core::int> set52 = block {
    final core::Set<core::int> #t62 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        for (final core::int #t63 in <core::int>[])
          #t62.{core::Set::add}(#t63);
    #t62.{core::Set::add}(null);
  } =>#t62;
  core::Map<core::String, core::int> map52 = <core::String, core::int>{"baz": null};
  core::List<core::List<core::int>> list60 = block {
    final core::List<core::List<core::int>> #t64 = <core::List<core::int>>[];
    if(self::oracle<core::String>("foo"))
      for (final core::List<core::int> #t65 in <core::List<core::int>>[<core::int>[]])
        #t64.{core::List::add}(#t65);
  } =>#t64;
  core::Set<core::List<core::int>> set60 = block {
    final core::Set<core::List<core::int>> #t66 = col::LinkedHashSet::•<core::List<core::int>>();
    if(self::oracle<core::String>("foo"))
      for (final core::List<core::int> #t67 in <core::List<core::int>>[<core::int>[]])
        #t66.{core::Set::add}(#t67);
    #t66.{core::Set::add}(null);
  } =>#t66;
  core::Map<core::String, core::List<core::int>> map60 = <core::String, core::List<core::int>>{"baz": null};
  core::List<core::List<core::int>> list61 = block {
    final core::List<core::List<core::int>> #t68 = <core::List<core::int>>[];
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        for (final core::List<core::int> #t69 in <core::List<core::int>>[<core::int>[]])
          #t68.{core::List::add}(#t69);
  } =>#t68;
  core::Set<core::List<core::int>> set61 = block {
    final core::Set<core::List<core::int>> #t70 = col::LinkedHashSet::•<core::List<core::int>>();
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        for (final core::List<core::int> #t71 in <core::List<core::int>>[<core::int>[]])
          #t70.{core::Set::add}(#t71);
    #t70.{core::Set::add}(null);
  } =>#t70;
  core::Map<core::String, core::List<core::int>> map61 = <core::String, core::List<core::int>>{"baz": null};
  core::List<core::List<core::int>> list70 = block {
    final core::List<core::List<core::int>> #t72 = <core::List<core::int>>[];
    if(self::oracle<core::String>("foo"))
      #t72.{core::List::add}(<core::int>[]);
  } =>#t72;
  core::Set<core::List<core::int>> set70 = block {
    final core::Set<core::List<core::int>> #t73 = col::LinkedHashSet::•<core::List<core::int>>();
    if(self::oracle<core::String>("foo"))
      #t73.{core::Set::add}(<core::int>[]);
    #t73.{core::Set::add}(null);
  } =>#t73;
  core::List<core::List<core::int>> list71 = block {
    final core::List<core::List<core::int>> #t74 = <core::List<core::int>>[];
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        #t74.{core::List::add}(<core::int>[]);
  } =>#t74;
  core::Set<core::List<core::int>> set71 = block {
    final core::Set<core::List<core::int>> #t75 = col::LinkedHashSet::•<core::List<core::int>>();
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        #t75.{core::Set::add}(<core::int>[]);
    #t75.{core::Set::add}(null);
  } =>#t75;
  core::List<core::num> list80 = block {
    final core::List<core::num> #t76 = <core::num>[];
    if(self::oracle<core::String>("foo"))
      #t76.{core::List::add}(42);
    else
      #t76.{core::List::add}(3.14);
  } =>#t76;
  core::Set<core::num> set80 = block {
    final core::Set<core::num> #t77 = col::LinkedHashSet::•<core::num>();
    if(self::oracle<core::String>("foo"))
      #t77.{core::Set::add}(42);
    else
      #t77.{core::Set::add}(3.14);
    #t77.{core::Set::add}(null);
  } =>#t77;
  core::Map<core::String, core::num> map80 = block {
    final core::Map<core::String, core::num> #t78 = <core::String, core::num>{};
    if(self::oracle<core::String>("foo"))
      #t78.{core::Map::[]=}("bar", 42);
    else
      #t78.{core::Map::[]=}("bar", 3.14);
    #t78.{core::Map::[]=}("baz", null);
  } =>#t78;
  core::List<core::num> list81 = block {
    final core::List<core::num> #t79 = <core::num>[];
    if(self::oracle<core::String>("foo"))
      for (final core::num #t80 in listInt)
        #t79.{core::List::add}(#t80);
    else
      for (final core::num #t81 in listDouble)
        #t79.{core::List::add}(#t81);
  } =>#t79;
  core::Set<core::num> set81 = block {
    final core::Set<core::num> #t82 = col::LinkedHashSet::•<core::num>();
    if(self::oracle<core::String>("foo"))
      for (final core::num #t83 in listInt)
        #t82.{core::Set::add}(#t83);
    else
      for (final core::num #t84 in listDouble)
        #t82.{core::Set::add}(#t84);
    #t82.{core::Set::add}(null);
  } =>#t82;
  core::Set<dynamic> map81 = block {
    final core::Set<dynamic> #t85 = col::LinkedHashSet::•<dynamic>();
    if(self::oracle<core::String>("foo"))
      #t85.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:68:38: Error: Unexpected type 'Map<String, double>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  var map81 = {if (oracle(\"foo\")) ...mapToInt else ...mapToDouble, null};
                                     ^");
    else
      #t85.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:68:55: Error: Unexpected type 'Map<String, double>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  var map81 = {if (oracle(\"foo\")) ...mapToInt else ...mapToDouble, null};
                                                      ^");
    #t85.{core::Set::add}(null);
  } =>#t85;
  core::List<dynamic> list82 = block {
    final core::List<dynamic> #t86 = <dynamic>[];
    if(self::oracle<core::String>("foo"))
      for (final dynamic #t87 in listInt as{TypeError} core::Iterable<dynamic>)
        #t86.{core::List::add}(#t87);
    else
      for (final dynamic #t88 in dynVar as{TypeError} core::Iterable<dynamic>)
        #t86.{core::List::add}(#t88);
  } =>#t86;
  core::Set<dynamic> set82 = block {
    final core::Set<dynamic> #t89 = col::LinkedHashSet::•<dynamic>();
    if(self::oracle<core::String>("foo"))
      for (final dynamic #t90 in listInt as{TypeError} core::Iterable<dynamic>)
        #t89.{core::Set::add}(#t90);
    else
      for (final dynamic #t91 in dynVar as{TypeError} core::Iterable<dynamic>)
        #t89.{core::Set::add}(#t91);
    #t89.{core::Set::add}(null);
  } =>#t89;
  core::Set<dynamic> map82 = block {
    final core::Set<dynamic> #t92 = col::LinkedHashSet::•<dynamic>();
    if(self::oracle<core::String>("foo"))
      for (final dynamic #t93 in mapToInt as{TypeError} core::Iterable<dynamic>)
        #t92.{core::Set::add}(#t93);
    else
      for (final dynamic #t94 in dynVar as{TypeError} core::Iterable<dynamic>)
        #t92.{core::Set::add}(#t94);
    #t92.{core::Set::add}(null);
  } =>#t92;
  core::List<core::num> list83 = block {
    final core::List<core::num> #t95 = <core::num>[];
    if(self::oracle<core::String>("foo"))
      #t95.{core::List::add}(42);
    else
      for (final core::num #t96 in listDouble)
        #t95.{core::List::add}(#t96);
  } =>#t95;
  core::Set<core::num> set83 = block {
    final core::Set<core::num> #t97 = col::LinkedHashSet::•<core::num>();
    if(self::oracle<core::String>("foo"))
      for (final core::num #t98 in listInt)
        #t97.{core::Set::add}(#t98);
    else
      #t97.{core::Set::add}(3.14);
    #t97.{core::Set::add}(null);
  } =>#t97;
  core::Set<dynamic> map83 = block {
    final core::Set<dynamic> #t99 = col::LinkedHashSet::•<dynamic>();
    if(self::oracle<core::String>("foo"))
      #t99.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:74:38: Error: Unexpected type 'Map<String, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  var map83 = {if (oracle(\"foo\")) ...mapToInt else 3.14, null};
                                     ^");
    else
      #t99.{core::Set::add}(3.14);
    #t99.{core::Set::add}(null);
  } =>#t99;
  core::List<core::int> list90 = block {
    final core::List<core::int> #t100 = <core::int>[];
    if(self::oracle<core::String>("foo"))
      #t100.{core::List::add}(dynVar as{TypeError} core::int);
  } =>#t100;
  core::Set<core::int> set90 = block {
    final core::Set<core::int> #t101 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo"))
      #t101.{core::Set::add}(dynVar as{TypeError} core::int);
    #t101.{core::Set::add}(null);
  } =>#t101;
  core::Map<core::String, core::int> map90 = block {
    final core::Map<core::String, core::int> #t102 = <core::String, core::int>{};
    if(self::oracle<core::String>("foo"))
      #t102.{core::Map::[]=}("bar", dynVar);
    #t102.{core::Map::[]=}("baz", null);
  } =>#t102;
  core::List<core::int> list91 = block {
    final core::List<core::int> #t103 = <core::int>[];
    if(self::oracle<core::String>("foo"))
      for (final core::int #t104 in dynVar as{TypeError} core::Iterable<dynamic>)
        #t103.{core::List::add}(#t104);
  } =>#t103;
  core::Set<core::int> set91 = block {
    final core::Set<core::int> #t105 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo"))
      for (final core::int #t106 in dynVar as{TypeError} core::Iterable<dynamic>)
        #t105.{core::Set::add}(#t106);
    #t105.{core::Set::add}(null);
  } =>#t105;
  core::Map<core::String, core::int> map91 = <core::String, core::int>{"baz": null};
}
static method testIfElementErrors(core::Map<core::int, core::int> map) → dynamic {
  <core::int>[invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:84:28: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int>[if (oracle(\"foo\")) \"bar\"];
                           ^"];
  let final core::Set<core::int> #t107 = col::LinkedHashSet::•<core::int>() in let final core::bool #t108 = #t107.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:85:28: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int>{if (oracle(\"foo\")) \"bar\", null};
                           ^") in let final core::bool #t109 = #t107.{core::Set::add}(null) in #t107;
  <core::String, core::int>{null: invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:86:41: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <String, int>{if (oracle(\"foo\")) \"bar\": \"bar\", \"baz\": null};
                                        ^", "baz": null};
  block {
    final core::List<core::int> #t110 = <core::int>[];
    if(self::oracle<core::String>("foo"))
      for (final core::int #t111 in <core::int>[let final<BottomType> #t112 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:87:32: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int>[if (oracle(\"foo\")) ...[\"bar\"]];
                               ^" in "bar" as{TypeError} core::int])
        #t110.{core::List::add}(#t111);
  } =>#t110;
  block {
    final core::Set<core::int> #t113 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo"))
      for (final core::int #t114 in <core::int>[let final<BottomType> #t115 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:88:32: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int>{if (oracle(\"foo\")) ...[\"bar\"], null};
                               ^" in "bar" as{TypeError} core::int])
        #t113.{core::Set::add}(#t114);
    #t113.{core::Set::add}(null);
  } =>#t113;
  <core::String, core::int>{"baz": null};
  block {
    final core::List<core::int> #t116 = <core::int>[];
    if(self::oracle<core::String>("foo"))
      #t116.{core::List::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:90:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>[if (oracle(\"foo\")) ...map];
                              ^");
  } =>#t116;
  block {
    final core::Set<core::int> #t117 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo"))
      #t117.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:91:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>{if (oracle(\"foo\")) ...map, null};
                              ^");
    #t117.{core::Set::add}(null);
  } =>#t117;
  <core::String, core::int>{"baz": null};
  <core::String>[invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:93:12: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
Try changing the type of the left hand side, or casting the right hand side to 'String'.
  <String>[if (oracle(\"foo\")) 42 else 3.14];
           ^"];
  let final core::Set<core::String> #t118 = col::LinkedHashSet::•<core::String>() in let final core::bool #t119 = #t118.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:94:12: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
Try changing the type of the left hand side, or casting the right hand side to 'String'.
  <String>{if (oracle(\"foo\")) 42 else 3.14, null};
           ^") in let final core::bool #t120 = #t118.{core::Set::add}(null) in #t118;
  <core::String, core::String>{null: invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:95:20: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
Try changing the type of the left hand side, or casting the right hand side to 'String'.
  <String, String>{if (oracle(\"foo\")) \"bar\": 42 else \"baz\": 3.14, \"baz\": null};
                   ^", "baz": null};
  block {
    final core::List<core::int> #t121 = <core::int>[];
    if(self::oracle<core::String>("foo"))
      #t121.{core::List::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:96:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>[if (oracle(\"foo\")) ...map else 42];
                              ^");
    else
      #t121.{core::List::add}(42 as{TypeError} core::int);
  } =>#t121;
  block {
    final core::Set<core::int> #t122 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo"))
      #t122.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:97:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>{if (oracle(\"foo\")) ...map else 42, null};
                              ^");
    else
      #t122.{core::Set::add}(42 as{TypeError} core::int);
    #t122.{core::Set::add}(null);
  } =>#t122;
  <core::String, core::int>{"baz": null};
  block {
    final core::List<core::int> #t123 = <core::int>[];
    if(self::oracle<core::String>("foo"))
      #t123.{core::List::add}(42 as{TypeError} core::int);
    else
      #t123.{core::List::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:99:39: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>[if (oracle(\"foo\")) 42 else ...map];
                                      ^");
  } =>#t123;
  block {
    final core::Set<core::int> #t124 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo"))
      #t124.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:100:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>{if (oracle(\"foo\")) ...map else 42, null};
                              ^");
    else
      #t124.{core::Set::add}(42 as{TypeError} core::int);
    #t124.{core::Set::add}(null);
  } =>#t124;
  <core::String, core::int>{"baz": null};
}
static method testForElement(dynamic dynVar, core::List<core::int> listInt, core::List<core::double> listDouble, core::int index) → dynamic {
  core::List<core::int> list10 = block {
    final core::List<core::int> #t125 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t125.{core::List::add}(42);
  } =>#t125;
  core::Set<core::int> set10 = block {
    final core::Set<core::int> #t126 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t126.{core::Set::add}(42);
    #t126.{core::Set::add}(null);
  } =>#t126;
  core::List<dynamic> list11 = block {
    final core::List<dynamic> #t127 = <dynamic>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t127.{core::List::add}(dynVar);
  } =>#t127;
  core::Set<dynamic> set11 = block {
    final core::Set<dynamic> #t128 = col::LinkedHashSet::•<dynamic>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t128.{core::Set::add}(dynVar);
    #t128.{core::Set::add}(null);
  } =>#t128;
  core::List<core::List<core::int>> list12 = block {
    final core::List<core::List<core::int>> #t129 = <core::List<core::int>>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t129.{core::List::add}(<core::int>[42]);
  } =>#t129;
  core::Set<core::List<core::int>> set12 = block {
    final core::Set<core::List<core::int>> #t130 = col::LinkedHashSet::•<core::List<core::int>>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t130.{core::Set::add}(<core::int>[42]);
    #t130.{core::Set::add}(null);
  } =>#t130;
  core::List<core::int> list20 = block {
    final core::List<core::int> #t131 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::int #t132 in <core::int>[42])
        #t131.{core::List::add}(#t132);
  } =>#t131;
  core::Set<core::int> set20 = block {
    final core::Set<core::int> #t133 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::int #t134 in <core::int>[42])
        #t133.{core::Set::add}(#t134);
    #t133.{core::Set::add}(null);
  } =>#t133;
  core::List<dynamic> list21 = block {
    final core::List<dynamic> #t135 = <dynamic>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final dynamic #t136 in <dynamic>[dynVar])
        #t135.{core::List::add}(#t136);
  } =>#t135;
  core::Set<dynamic> set21 = block {
    final core::Set<dynamic> #t137 = col::LinkedHashSet::•<dynamic>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final dynamic #t138 in <dynamic>[dynVar])
        #t137.{core::Set::add}(#t138);
    #t137.{core::Set::add}(null);
  } =>#t137;
  core::List<core::List<core::int>> list22 = block {
    final core::List<core::List<core::int>> #t139 = <core::List<core::int>>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::List<core::int> #t140 in <core::List<core::int>>[<core::int>[42]])
        #t139.{core::List::add}(#t140);
  } =>#t139;
  core::Set<core::List<core::int>> set22 = block {
    final core::Set<core::List<core::int>> #t141 = col::LinkedHashSet::•<core::List<core::int>>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::List<core::int> #t142 in <core::List<core::int>>[<core::int>[42]])
        #t141.{core::Set::add}(#t142);
    #t141.{core::Set::add}(null);
  } =>#t141;
  core::List<core::int> list30 = block {
    final core::List<core::int> #t143 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::int #t144 in <core::int>[42])
          #t143.{core::List::add}(#t144);
  } =>#t143;
  core::Set<core::int> set30 = block {
    final core::Set<core::int> #t145 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::int #t146 in <core::int>[42])
          #t145.{core::Set::add}(#t146);
    #t145.{core::Set::add}(null);
  } =>#t145;
  core::List<dynamic> list31 = block {
    final core::List<dynamic> #t147 = <dynamic>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final dynamic #t148 in <dynamic>[dynVar])
          #t147.{core::List::add}(#t148);
  } =>#t147;
  core::Set<dynamic> set31 = block {
    final core::Set<dynamic> #t149 = col::LinkedHashSet::•<dynamic>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final dynamic #t150 in <dynamic>[dynVar])
          #t149.{core::Set::add}(#t150);
    #t149.{core::Set::add}(null);
  } =>#t149;
  core::List<core::List<core::int>> list33 = block {
    final core::List<core::List<core::int>> #t151 = <core::List<core::int>>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::List<core::int> #t152 in <core::List<core::int>>[<core::int>[42]])
          #t151.{core::List::add}(#t152);
  } =>#t151;
  core::Set<core::List<core::int>> set33 = block {
    final core::Set<core::List<core::int>> #t153 = col::LinkedHashSet::•<core::List<core::int>>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::List<core::int> #t154 in <core::List<core::int>>[<core::int>[42]])
          #t153.{core::Set::add}(#t154);
    #t153.{core::Set::add}(null);
  } =>#t153;
  core::List<core::List<core::int>> list40 = block {
    final core::List<core::List<core::int>> #t155 = <core::List<core::int>>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::List<core::int> #t156 in <core::List<core::int>>[<core::int>[]])
        #t155.{core::List::add}(#t156);
  } =>#t155;
  core::Set<core::List<core::int>> set40 = block {
    final core::Set<core::List<core::int>> #t157 = col::LinkedHashSet::•<core::List<core::int>>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::List<core::int> #t158 in <core::List<core::int>>[<core::int>[]])
        #t157.{core::Set::add}(#t158);
    #t157.{core::Set::add}(null);
  } =>#t157;
  core::List<core::List<core::int>> list41 = block {
    final core::List<core::List<core::int>> #t159 = <core::List<core::int>>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::List<core::int> #t160 in let final core::Set<core::List<core::int>> #t161 = col::LinkedHashSet::•<core::List<core::int>>() in let final core::bool #t162 = #t161.{core::Set::add}(<core::int>[]) in #t161)
        #t159.{core::List::add}(#t160);
  } =>#t159;
  core::Set<core::List<core::int>> set41 = block {
    final core::Set<core::List<core::int>> #t163 = col::LinkedHashSet::•<core::List<core::int>>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::List<core::int> #t164 in let final core::Set<core::List<core::int>> #t165 = col::LinkedHashSet::•<core::List<core::int>>() in let final core::bool #t166 = #t165.{core::Set::add}(<core::int>[]) in #t165)
        #t163.{core::Set::add}(#t164);
    #t163.{core::Set::add}(null);
  } =>#t163;
  core::List<core::List<core::int>> list42 = block {
    final core::List<core::List<core::int>> #t167 = <core::List<core::int>>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::List<core::int> #t168 in <core::List<core::int>>[<core::int>[]])
          #t167.{core::List::add}(#t168);
  } =>#t167;
  core::Set<core::List<core::int>> set42 = block {
    final core::Set<core::List<core::int>> #t169 = col::LinkedHashSet::•<core::List<core::int>>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::List<core::int> #t170 in <core::List<core::int>>[<core::int>[]])
          #t169.{core::Set::add}(#t170);
    #t169.{core::Set::add}(null);
  } =>#t169;
  core::List<core::int> list50 = block {
    final core::List<core::int> #t171 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::int #t172 in <core::int>[])
        #t171.{core::List::add}(#t172);
  } =>#t171;
  core::Set<core::int> set50 = block {
    final core::Set<core::int> #t173 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::int #t174 in <core::int>[])
        #t173.{core::Set::add}(#t174);
    #t173.{core::Set::add}(null);
  } =>#t173;
  core::List<core::int> list51 = block {
    final core::List<core::int> #t175 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::int #t176 in let final core::Set<core::int> #t177 = col::LinkedHashSet::•<core::int>() in #t177)
        #t175.{core::List::add}(#t176);
  } =>#t175;
  core::Set<core::int> set51 = block {
    final core::Set<core::int> #t178 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::int #t179 in let final core::Set<core::int> #t180 = col::LinkedHashSet::•<core::int>() in #t180)
        #t178.{core::Set::add}(#t179);
    #t178.{core::Set::add}(null);
  } =>#t178;
  core::List<core::int> list52 = block {
    final core::List<core::int> #t181 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::int #t182 in <core::int>[])
          #t181.{core::List::add}(#t182);
  } =>#t181;
  core::Set<core::int> set52 = block {
    final core::Set<core::int> #t183 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::int #t184 in <core::int>[])
          #t183.{core::Set::add}(#t184);
    #t183.{core::Set::add}(null);
  } =>#t183;
  core::List<core::List<core::int>> list60 = block {
    final core::List<core::List<core::int>> #t185 = <core::List<core::int>>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::List<core::int> #t186 in <core::List<core::int>>[<core::int>[]])
        #t185.{core::List::add}(#t186);
  } =>#t185;
  core::Set<core::List<core::int>> set60 = block {
    final core::Set<core::List<core::int>> #t187 = col::LinkedHashSet::•<core::List<core::int>>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::List<core::int> #t188 in <core::List<core::int>>[<core::int>[]])
        #t187.{core::Set::add}(#t188);
    #t187.{core::Set::add}(null);
  } =>#t187;
  core::List<core::List<core::int>> list61 = block {
    final core::List<core::List<core::int>> #t189 = <core::List<core::int>>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::List<core::int> #t190 in <core::List<core::int>>[<core::int>[]])
          #t189.{core::List::add}(#t190);
  } =>#t189;
  core::Set<core::List<core::int>> set61 = block {
    final core::Set<core::List<core::int>> #t191 = col::LinkedHashSet::•<core::List<core::int>>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::List<core::int> #t192 in <core::List<core::int>>[<core::int>[]])
          #t191.{core::Set::add}(#t192);
    #t191.{core::Set::add}(null);
  } =>#t191;
  core::List<core::List<core::int>> list70 = block {
    final core::List<core::List<core::int>> #t193 = <core::List<core::int>>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t193.{core::List::add}(<core::int>[]);
  } =>#t193;
  core::Set<core::List<core::int>> set70 = block {
    final core::Set<core::List<core::int>> #t194 = col::LinkedHashSet::•<core::List<core::int>>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t194.{core::Set::add}(<core::int>[]);
    #t194.{core::Set::add}(null);
  } =>#t194;
  core::List<core::List<core::int>> list71 = block {
    final core::List<core::List<core::int>> #t195 = <core::List<core::int>>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        #t195.{core::List::add}(<core::int>[]);
  } =>#t195;
  core::Set<core::List<core::int>> set71 = block {
    final core::Set<core::List<core::int>> #t196 = col::LinkedHashSet::•<core::List<core::int>>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        #t196.{core::Set::add}(<core::int>[]);
    #t196.{core::Set::add}(null);
  } =>#t196;
  core::List<core::num> list80 = block {
    final core::List<core::num> #t197 = <core::num>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        #t197.{core::List::add}(42);
      else
        #t197.{core::List::add}(3.14);
  } =>#t197;
  core::Set<core::num> set80 = block {
    final core::Set<core::num> #t198 = col::LinkedHashSet::•<core::num>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        #t198.{core::Set::add}(42);
      else
        #t198.{core::Set::add}(3.14);
    #t198.{core::Set::add}(null);
  } =>#t198;
  core::List<core::num> list81 = block {
    final core::List<core::num> #t199 = <core::num>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::num #t200 in listInt)
          #t199.{core::List::add}(#t200);
      else
        for (final core::num #t201 in listDouble)
          #t199.{core::List::add}(#t201);
  } =>#t199;
  core::Set<core::num> set81 = block {
    final core::Set<core::num> #t202 = col::LinkedHashSet::•<core::num>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::num #t203 in listInt)
          #t202.{core::Set::add}(#t203);
      else
        for (final core::num #t204 in listDouble)
          #t202.{core::Set::add}(#t204);
    #t202.{core::Set::add}(null);
  } =>#t202;
  core::List<dynamic> list82 = block {
    final core::List<dynamic> #t205 = <dynamic>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final dynamic #t206 in listInt as{TypeError} core::Iterable<dynamic>)
          #t205.{core::List::add}(#t206);
      else
        for (final dynamic #t207 in dynVar as{TypeError} core::Iterable<dynamic>)
          #t205.{core::List::add}(#t207);
  } =>#t205;
  core::Set<dynamic> set82 = block {
    final core::Set<dynamic> #t208 = col::LinkedHashSet::•<dynamic>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final dynamic #t209 in listInt as{TypeError} core::Iterable<dynamic>)
          #t208.{core::Set::add}(#t209);
      else
        for (final dynamic #t210 in dynVar as{TypeError} core::Iterable<dynamic>)
          #t208.{core::Set::add}(#t210);
    #t208.{core::Set::add}(null);
  } =>#t208;
  core::List<core::num> list83 = block {
    final core::List<core::num> #t211 = <core::num>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        #t211.{core::List::add}(42);
      else
        for (final core::num #t212 in listDouble)
          #t211.{core::List::add}(#t212);
  } =>#t211;
  core::Set<core::num> set83 = block {
    final core::Set<core::num> #t213 = col::LinkedHashSet::•<core::num>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::num #t214 in listInt)
          #t213.{core::Set::add}(#t214);
      else
        #t213.{core::Set::add}(3.14);
    #t213.{core::Set::add}(null);
  } =>#t213;
  core::List<core::int> list90 = block {
    final core::List<core::int> #t215 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t215.{core::List::add}(dynVar as{TypeError} core::int);
  } =>#t215;
  core::Set<core::int> set90 = block {
    final core::Set<core::int> #t216 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t216.{core::Set::add}(dynVar as{TypeError} core::int);
    #t216.{core::Set::add}(null);
  } =>#t216;
  core::List<core::int> list91 = block {
    final core::List<core::int> #t217 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::int #t218 in dynVar as{TypeError} core::Iterable<dynamic>)
        #t217.{core::List::add}(#t218);
  } =>#t217;
  core::Set<core::int> set91 = block {
    final core::Set<core::int> #t219 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::int #t220 in dynVar as{TypeError} core::Iterable<dynamic>)
        #t219.{core::Set::add}(#t220);
    #t219.{core::Set::add}(null);
  } =>#t219;
  core::List<core::int> list100 = block {
    final core::List<core::int> #t221 = <core::int>[];
    for (final dynamic #t222 = index = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; index = index.{core::num::+}(1))
      #t221.{core::List::add}(42);
  } =>#t221;
  core::Set<core::int> set100 = block {
    final core::Set<core::int> #t223 = col::LinkedHashSet::•<core::int>();
    for (final dynamic #t224 = index = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; index = index.{core::num::+}(1))
      #t223.{core::Set::add}(42);
  } =>#t223;
  core::List<core::int> list110 = block {
    final core::List<core::int> #t225 = <core::int>[];
    for (core::int i in <core::int>[1, 2, 3])
      #t225.{core::List::add}(i);
  } =>#t225;
  core::Set<core::int> set110 = block {
    final core::Set<core::int> #t226 = col::LinkedHashSet::•<core::int>();
    for (core::int i in <core::int>[1, 2, 3])
      #t226.{core::Set::add}(i);
    #t226.{core::Set::add}(null);
  } =>#t226;
  core::List<core::int> list120 = block {
    final core::List<core::int> #t227 = <core::int>[];
    for (dynamic i in dynVar as{TypeError} core::Iterable<dynamic>)
      #t227.{core::List::add}(i as{TypeError} core::int);
  } =>#t227;
  core::Set<core::int> set120 = block {
    final core::Set<core::int> #t228 = col::LinkedHashSet::•<core::int>();
    for (dynamic i in dynVar as{TypeError} core::Iterable<dynamic>)
      #t228.{core::Set::add}(i as{TypeError} core::int);
    #t228.{core::Set::add}(null);
  } =>#t228;
}
static method testForElementErrors(core::Map<core::int, core::int> map) → dynamic /* originally async */ {
  final asy::_AsyncAwaitCompleter<dynamic> :async_completer = new asy::_AsyncAwaitCompleter::•<dynamic>();
  asy::FutureOr<dynamic> :return_value;
  dynamic :async_stack_trace;
  dynamic :async_op_then;
  dynamic :async_op_error;
  dynamic :await_jump_var = 0;
  dynamic :await_ctx_var;
  function :async_op([dynamic :result, dynamic :exception, dynamic :stack_trace]) → dynamic yielding 
    try {
      #L1:
      {
        <core::int>[invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:165:45: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int>[for (int i = 0; oracle(\"foo\"); i++) \"bar\"];
                                            ^"];
        let final core::Set<core::int> #t229 = col::LinkedHashSet::•<core::int>() in let final core::bool #t230 = #t229.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:166:45: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int>{for (int i = 0; oracle(\"foo\"); i++) \"bar\", null};
                                            ^") in let final core::bool #t231 = #t229.{core::Set::add}(null) in #t229;
        block {
          final core::List<core::int> #t232 = <core::int>[];
          for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
            for (final core::int #t233 in <core::int>[let final<BottomType> #t234 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:167:49: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int>[for (int i = 0; oracle(\"foo\"); i++) ...[\"bar\"]];
                                                ^" in "bar" as{TypeError} core::int])
              #t232.{core::List::add}(#t233);
        } =>#t232;
        block {
          final core::Set<core::int> #t235 = col::LinkedHashSet::•<core::int>();
          for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
            for (final core::int #t236 in <core::int>[let final<BottomType> #t237 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:168:49: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int>{for (int i = 0; oracle(\"foo\"); i++) ...[\"bar\"], null};
                                                ^" in "bar" as{TypeError} core::int])
              #t235.{core::Set::add}(#t236);
          #t235.{core::Set::add}(null);
        } =>#t235;
        block {
          final core::List<core::int> #t238 = <core::int>[];
          for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
            #t238.{core::List::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:169:48: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>[for (int i = 0; oracle(\"foo\"); i++) ...map];
                                               ^");
        } =>#t238;
        block {
          final core::Set<core::int> #t239 = col::LinkedHashSet::•<core::int>();
          for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
            #t239.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:170:48: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>{for (int i = 0; oracle(\"foo\"); i++) ...map, null};
                                               ^");
          #t239.{core::Set::add}(null);
        } =>#t239;
        <core::String>[invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:171:48: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
Try changing the type of the left hand side, or casting the right hand side to 'String'.
  <String>[for (int i = 0; oracle(\"foo\"); i++) if (oracle()) 42 else 3.14];
                                               ^"];
        let final core::Set<core::String> #t240 = col::LinkedHashSet::•<core::String>() in let final core::bool #t241 = #t240.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:172:48: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
Try changing the type of the left hand side, or casting the right hand side to 'String'.
  <String>{for (int i = 0; oracle(\"foo\"); i++) if (oracle()) 42 else 3.14, null};
                                               ^") in let final core::bool #t242 = #t240.{core::Set::add}(null) in #t240;
        block {
          final core::List<core::int> #t243 = <core::int>[];
          for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
            if(self::oracle<dynamic>())
              #t243.{core::List::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:173:62: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>[for (int i = 0; oracle(\"foo\"); i++) if (oracle()) ...map else 42];
                                                             ^");
            else
              #t243.{core::List::add}(42 as{TypeError} core::int);
        } =>#t243;
        block {
          final core::Set<core::int> #t244 = col::LinkedHashSet::•<core::int>();
          for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
            if(self::oracle<dynamic>())
              #t244.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:174:62: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>{for (int i = 0; oracle(\"foo\"); i++) if (oracle()) ...map else 42, null};
                                                             ^");
            else
              #t244.{core::Set::add}(42 as{TypeError} core::int);
          #t244.{core::Set::add}(null);
        } =>#t244;
        block {
          final core::List<core::int> #t245 = <core::int>[];
          for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
            if(self::oracle<dynamic>())
              #t245.{core::List::add}(42 as{TypeError} core::int);
            else
              #t245.{core::List::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:175:70: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>[for (int i = 0; oracle(\"foo\"); i++) if (oracle()) 42 else ...map];
                                                                     ^");
        } =>#t245;
        block {
          final core::Set<core::int> #t246 = col::LinkedHashSet::•<core::int>();
          for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
            if(self::oracle<dynamic>())
              #t246.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:176:62: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>{for (int i = 0; oracle(\"foo\"); i++) if (oracle()) ...map else 42, null};
                                                             ^");
            else
              #t246.{core::Set::add}(42 as{TypeError} core::int);
          #t246.{core::Set::add}(null);
        } =>#t246;
        final core::int i = 0;
        block {
          final core::List<core::int> #t247 = <core::int>[];
          for (final core::int #t248 in <core::int>[1]) {
            invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:179:14: Error: Setter not found: 'i'.
  <int>[for (i in <int>[1]) i];
             ^";
            #t247.{core::List::add}(i);
          }
        } =>#t247;
        block {
          final core::Set<core::int> #t249 = col::LinkedHashSet::•<core::int>();
          for (final core::int #t250 in <core::int>[1]) {
            invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:180:14: Error: Setter not found: 'i'.
  <int>{for (i in <int>[1]) i, null};
             ^";
            #t249.{core::Set::add}(i);
          }
          #t249.{core::Set::add}(null);
        } =>#t249;
        core::List<dynamic> list10 = block {
          final core::List<dynamic> #t251 = <dynamic>[];
          for (dynamic i in let final<BottomType> #t252 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:182:31: Error: The type 'String' used in the 'for' loop must implement 'Iterable<dynamic>'.
 - 'Iterable' is from 'dart:core'.
  var list10 = [for (var i in \"not iterable\") i];
                              ^" in "not iterable" as{TypeError} core::Iterable<dynamic>)
            #t251.{core::List::add}(i);
        } =>#t251;
        core::Set<dynamic> set10 = block {
          final core::Set<dynamic> #t253 = col::LinkedHashSet::•<dynamic>();
          for (dynamic i in let final<BottomType> #t254 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:183:30: Error: The type 'String' used in the 'for' loop must implement 'Iterable<dynamic>'.
 - 'Iterable' is from 'dart:core'.
  var set10 = {for (var i in \"not iterable\") i, null};
                             ^" in "not iterable" as{TypeError} core::Iterable<dynamic>)
            #t253.{core::Set::add}(i);
          #t253.{core::Set::add}(null);
        } =>#t253;
        core::List<core::int> list20 = block {
          final core::List<core::int> #t255 = <core::int>[];
          for (core::int i in <core::int>[let final<BottomType> #t256 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:184:32: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var list20 = [for (int i in [\"not\", \"int\"]) i];
                               ^" in "not" as{TypeError} core::int, let final<BottomType> #t257 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:184:39: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var list20 = [for (int i in [\"not\", \"int\"]) i];
                                      ^" in "int" as{TypeError} core::int])
            #t255.{core::List::add}(i);
        } =>#t255;
        core::Set<core::int> set20 = block {
          final core::Set<core::int> #t258 = col::LinkedHashSet::•<core::int>();
          for (core::int i in <core::int>[let final<BottomType> #t259 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:185:31: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var set20 = {for (int i in [\"not\", \"int\"]) i, null};
                              ^" in "not" as{TypeError} core::int, let final<BottomType> #t260 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:185:38: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var set20 = {for (int i in [\"not\", \"int\"]) i, null};
                                     ^" in "int" as{TypeError} core::int])
            #t258.{core::Set::add}(i);
          #t258.{core::Set::add}(null);
        } =>#t258;
        core::List<dynamic> list30 = block {
          final core::List<dynamic> #t261 = <dynamic>[];
          await for (dynamic i in let final<BottomType> #t262 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:186:37: Error: The type 'String' used in the 'for' loop must implement 'Stream<dynamic>'.
 - 'Stream' is from 'dart:async'.
  var list30 = [await for (var i in \"not stream\") i];
                                    ^" in "not stream" as{TypeError} asy::Stream<dynamic>)
            #t261.{core::List::add}(i);
        } =>#t261;
        core::Set<dynamic> set30 = block {
          final core::Set<dynamic> #t263 = col::LinkedHashSet::•<dynamic>();
          await for (dynamic i in let final<BottomType> #t264 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:187:36: Error: The type 'String' used in the 'for' loop must implement 'Stream<dynamic>'.
 - 'Stream' is from 'dart:async'.
  var set30 = {await for (var i in \"not stream\") i, null};
                                   ^" in "not stream" as{TypeError} asy::Stream<dynamic>)
            #t263.{core::Set::add}(i);
          #t263.{core::Set::add}(null);
        } =>#t263;
        core::List<core::int> list40 = block {
          final core::List<core::int> #t265 = <core::int>[];
          await for (core::int i in asy::Stream::fromIterable<core::int>(<core::int>[let final<BottomType> #t266 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:188:58: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var list40 = [await for (int i in Stream.fromIterable([\"not\", \"int\"])) i];
                                                         ^" in "not" as{TypeError} core::int, let final<BottomType> #t267 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:188:65: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var list40 = [await for (int i in Stream.fromIterable([\"not\", \"int\"])) i];
                                                                ^" in "int" as{TypeError} core::int]))
            #t265.{core::List::add}(i);
        } =>#t265;
        core::Set<core::int> set40 = block {
          final core::Set<core::int> #t268 = col::LinkedHashSet::•<core::int>();
          await for (core::int i in asy::Stream::fromIterable<core::int>(<core::int>[let final<BottomType> #t269 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:189:57: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var set40 = {await for (int i in Stream.fromIterable([\"not\", \"int\"])) i, null};
                                                        ^" in "not" as{TypeError} core::int, let final<BottomType> #t270 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:189:64: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var set40 = {await for (int i in Stream.fromIterable([\"not\", \"int\"])) i, null};
                                                               ^" in "int" as{TypeError} core::int]))
            #t268.{core::Set::add}(i);
          #t268.{core::Set::add}(null);
        } =>#t268;
        core::List<core::int> list50 = block {
          final core::List<core::int> #t271 = <core::int>[];
          for (; ; )
            #t271.{core::List::add}(42);
        } =>#t271;
        core::Set<core::int> set50 = block {
          final core::Set<core::int> #t272 = col::LinkedHashSet::•<core::int>();
          for (; ; )
            #t272.{core::Set::add}(42);
          #t272.{core::Set::add}(null);
        } =>#t272;
        core::List<core::int> list60 = block {
          final core::List<core::int> #t273 = <core::int>[];
          for (; let final<BottomType> #t274 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:192:24: Error: A value of type 'String' can't be assigned to a variable of type 'bool'.
Try changing the type of the left hand side, or casting the right hand side to 'bool'.
  var list60 = [for (; \"not bool\";) 42];
                       ^" in "not bool" as{TypeError} core::bool; )
            #t273.{core::List::add}(42);
        } =>#t273;
        core::Set<core::int> set60 = block {
          final core::Set<core::int> #t275 = col::LinkedHashSet::•<core::int>();
          for (; let final<BottomType> #t276 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:193:23: Error: A value of type 'String' can't be assigned to a variable of type 'bool'.
Try changing the type of the left hand side, or casting the right hand side to 'bool'.
  var set60 = {for (; \"not bool\";) 42, null};
                      ^" in "not bool" as{TypeError} core::bool; )
            #t275.{core::Set::add}(42);
          #t275.{core::Set::add}(null);
        } =>#t275;
      }
      asy::_completeOnAsyncReturn(:async_completer, :return_value);
      return;
    }
    on dynamic catch(dynamic :exception, dynamic :stack_trace) {
      :async_completer.{asy::Completer::completeError}(:exception, :stack_trace);
    }
  :async_stack_trace = asy::_asyncStackTraceHelper(:async_op);
  :async_op_then = asy::_asyncThenWrapperHelper(:async_op);
  :async_op_error = asy::_asyncErrorWrapperHelper(:async_op);
  :async_completer.start(:async_op);
  return :async_completer.{asy::Completer::future};
}
static method testForElementErrorsNotAsync(asy::Stream<core::int> stream) → dynamic {
  block {
    final core::List<core::int> #t277 = <core::int>[];
    await for (core::int i in stream)
      #t277.{core::List::add}(i);
  } =>#t277;
  block {
    final core::Set<core::int> #t278 = col::LinkedHashSet::•<core::int>();
    await for (core::int i in stream)
      #t278.{core::Set::add}(i);
  } =>#t278;
}
static method main() → dynamic {}

library;
import self as self;
import "dart:core" as core;

typedef F<X extends core::Object = dynamic> = <Y extends X = dynamic>() → void;
typedef Fcov<X extends core::Object = dynamic> = () → X;
typedef Fcon<X extends core::Object = dynamic> = (X) → dynamic;
typedef Finv<X extends core::Object = dynamic> = (X) → X;
typedef FcovBound<X extends core::num = dynamic> = () → X;
typedef FconBound<X extends core::num = dynamic> = (X) → dynamic;
typedef FinvBound<X extends core::num = dynamic> = (X) → X;
typedef FcovCyclicBound<X extends self::A<X> = dynamic> = () → X;
typedef FconCyclicBound<X extends self::A<X> = dynamic> = (X) → dynamic;
typedef FinvCyclicBound<X extends self::A<X> = dynamic> = (X) → X;
typedef FcovCyclicCoBound<X extends (X) → dynamic = dynamic> = () → X;
typedef FconCyclicCoBound<X extends (X) → dynamic = dynamic> = (X) → dynamic;
typedef FinvCyclicCoBound<X extends (X) → dynamic = dynamic> = (X) → X;
class A<X extends core::Object = dynamic> extends core::Object {
  synthetic constructor •() → self::A<self::A::X>
    ;
}
class B<X extends core::Object = dynamic> extends core::Object {
  synthetic constructor •() → self::B<self::B::X>
    ;
}
static method toF<X extends core::Object = dynamic>(self::toF::X x) → <Y extends self::toF::X = dynamic>() → void
  ;
static method testTopLevel() → void
  ;
static method testNested() → void
  ;
static method main() → dynamic
  ;

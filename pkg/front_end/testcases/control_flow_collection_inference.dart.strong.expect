library;
//
// Problems in library:
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:39:34: Error: Both Iterable and Map spread elements encountered in ambiguous literal.
//   Map<String, List<int>> map40 = {if (oracle("foo")) ...{"bar", []}, "baz": null};
//                                  ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:71:38: Error: Unexpected type 'Map<String, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   var map82 = {if (oracle("foo")) ...mapToInt else ...dynVar, null};
//                                      ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:106:44: Error: Expected ':' after this.
//   Set<dynamic> set10 = {if (oracle("foo")) 42 else "bar": 3.14};
//                                            ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:107:53: Error: Expected ':' after this.
//   Map<dynamic, dynamic> map10 = {if (oracle("foo")) 42 else "bar": 3.14};
//                                                     ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:108:61: Error: Expected ':' after this.
//   Set<dynamic> set11 = {if (oracle("foo")) "bar": 3.14 else 42};
//                                                             ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:109:70: Error: Expected ':' after this.
//   Map<dynamic, dynamic> map11 = {if (oracle("foo")) "bar": 3.14 else 42};
//                                                                      ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:110:35: Error: Expected ':' after this.
//   var map12 = {if (oracle("foo")) 42 else "bar": 3.14};
//                                   ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:111:52: Error: Expected ':' after this.
//   var map13 = {if (oracle("foo")) "bar": 3.14 else 42};
//                                                    ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:87:28: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int>[if (oracle("foo")) "bar"];
//                            ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:88:28: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int>{if (oracle("foo")) "bar", null};
//                            ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:89:43: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <String, int>{if (oracle("foo")) "bar": "bar", "baz": null};
//                                           ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:89:41: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <String, int>{if (oracle("foo")) "bar": "bar", "baz": null};
//                                         ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:90:32: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int>[if (oracle("foo")) ...["bar"]];
//                                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:91:32: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int>{if (oracle("foo")) ...["bar"], null};
//                                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:92:47: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <String, int>{if (oracle("foo")) ...{"bar": "bar"}, "baz": null};
//                                               ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:93:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>[if (oracle("foo")) ...map];
//                               ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:94:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>{if (oracle("foo")) ...map, null};
//                               ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:95:39: Error: Unexpected type 'List<String>' of a map spread entry.  Expected 'dynamic' or a Map.
//  - 'List' is from 'dart:core'.
//   <String, int>{if (oracle("foo")) ...["bar"], "baz": null};
//                                       ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:96:12: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
// Try changing the type of the left hand side, or casting the right hand side to 'String'.
//   <String>[if (oracle("foo")) 42 else 3.14];
//            ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:97:12: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
// Try changing the type of the left hand side, or casting the right hand side to 'String'.
//   <String>{if (oracle("foo")) 42 else 3.14, null};
//            ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:98:46: Error: A value of type 'int' can't be assigned to a variable of type 'String'.
// Try changing the type of the left hand side, or casting the right hand side to 'String'.
//   <String, String>{if (oracle("foo")) "bar": 42 else "baz": 3.14, "baz": null};
//                                              ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:98:61: Error: A value of type 'double' can't be assigned to a variable of type 'String'.
// Try changing the type of the left hand side, or casting the right hand side to 'String'.
//   <String, String>{if (oracle("foo")) "bar": 42 else "baz": 3.14, "baz": null};
//                                                             ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:98:20: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
// Try changing the type of the left hand side, or casting the right hand side to 'String'.
//   <String, String>{if (oracle("foo")) "bar": 42 else "baz": 3.14, "baz": null};
//                    ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:99:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>[if (oracle("foo")) ...map else 42];
//                               ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:100:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>{if (oracle("foo")) ...map else 42, null};
//                               ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:101:39: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
//  - 'List' is from 'dart:core'.
//   <String, int>{if (oracle("foo")) ...[42] else "bar": 42, "baz": null};
//                                       ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:102:39: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>[if (oracle("foo")) 42 else ...map];
//                                       ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:103:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>{if (oracle("foo")) ...map else 42, null};
//                               ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:104:54: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
//  - 'List' is from 'dart:core'.
//   <String, int>{if (oracle("foo")) "bar": 42 else ...[42], "baz": null};
//                                                      ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:106:24: Error: Both Iterable and Map spread elements encountered in ambiguous literal.
//   Set<dynamic> set10 = {if (oracle("foo")) 42 else "bar": 3.14};
//                        ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:108:24: Error: Both Iterable and Map spread elements encountered in ambiguous literal.
//   Set<dynamic> set11 = {if (oracle("foo")) "bar": 3.14 else 42};
//                        ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:112:27: Error: A value of type 'int' can't be assigned to a variable of type 'bool'.
// Try changing the type of the left hand side, or casting the right hand side to 'bool'.
//   List<int> list20 = [if (42) 42];
//                           ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:113:25: Error: A value of type 'int' can't be assigned to a variable of type 'bool'.
// Try changing the type of the left hand side, or casting the right hand side to 'bool'.
//   Set<int> set20 = {if (42) 42};
//                         ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:114:30: Error: A value of type 'int' can't be assigned to a variable of type 'bool'.
// Try changing the type of the left hand side, or casting the right hand side to 'bool'.
//   Map<int, int> map30 = {if (42) 42: 42};
//                              ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:226:14: Error: Setter not found: 'i'.
//   <int>[for (i in <int>[1]) i];
//              ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:227:14: Error: Setter not found: 'i'.
//   <int>{for (i in <int>[1]) i, null};
//              ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:228:21: Error: Setter not found: 'i'.
// 	<String, int>{for (i in <int>[1]) "bar": i, "baz": null};
// 	                   ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:242:17: Error: The keyword 'await' isn't allowed for a normal 'for' statement.
// Try removing the keyword, or use a for-each statement.
//   var list50 = [await for (;;) 42];
//                 ^^^^^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:243:16: Error: The keyword 'await' isn't allowed for a normal 'for' statement.
// Try removing the keyword, or use a for-each statement.
//   var set50 = {await for (;;) 42, null};
//                ^^^^^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:244:16: Error: The keyword 'await' isn't allowed for a normal 'for' statement.
// Try removing the keyword, or use a for-each statement.
//   var map50 = {await for (;;) "bar": 42, "baz": null};
//                ^^^^^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:206:45: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int>[for (int i = 0; oracle("foo"); i++) "bar"];
//                                             ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:207:45: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int>{for (int i = 0; oracle("foo"); i++) "bar", null};
//                                             ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:208:50: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int, int>{for (int i = 0; oracle("foo"); i++) "bar": "bar", "baz": null};
//                                                  ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:208:57: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int, int>{for (int i = 0; oracle("foo"); i++) "bar": "bar", "baz": null};
//                                                         ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:208:64: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int, int>{for (int i = 0; oracle("foo"); i++) "bar": "bar", "baz": null};
//                                                                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:208:14: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int, int>{for (int i = 0; oracle("foo"); i++) "bar": "bar", "baz": null};
//              ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:209:49: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int>[for (int i = 0; oracle("foo"); i++) ...["bar"]];
//                                                 ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:210:49: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int>{for (int i = 0; oracle("foo"); i++) ...["bar"], null};
//                                                 ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:211:54: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int, int>{for (int i = 0; oracle("foo"); i++) ...{"bar": "bar"}, "baz": null};
//                                                      ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:211:61: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int, int>{for (int i = 0; oracle("foo"); i++) ...{"bar": "bar"}, "baz": null};
//                                                             ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:211:69: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int, int>{for (int i = 0; oracle("foo"); i++) ...{"bar": "bar"}, "baz": null};
//                                                                     ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:212:48: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>[for (int i = 0; oracle("foo"); i++) ...map];
//                                                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:213:48: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>{for (int i = 0; oracle("foo"); i++) ...map, null};
//                                                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:214:53: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
//  - 'List' is from 'dart:core'.
//   <int, int>{for (int i = 0; oracle("foo"); i++) ...list, 42: null};
//                                                     ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:215:48: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
// Try changing the type of the left hand side, or casting the right hand side to 'String'.
//   <String>[for (int i = 0; oracle("foo"); i++) if (oracle()) 42 else 3.14];
//                                                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:216:48: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
// Try changing the type of the left hand side, or casting the right hand side to 'String'.
//   <String>{for (int i = 0; oracle("foo"); i++) if (oracle()) 42 else 3.14, null};
//                                                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:217:77: Error: A value of type 'int' can't be assigned to a variable of type 'String'.
// Try changing the type of the left hand side, or casting the right hand side to 'String'.
//   <String, String>{for (int i = 0; oracle("foo"); i++) if (oracle()) "bar": 42 else "bar": 3.14, "baz": null};
//                                                                             ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:217:92: Error: A value of type 'double' can't be assigned to a variable of type 'String'.
// Try changing the type of the left hand side, or casting the right hand side to 'String'.
//   <String, String>{for (int i = 0; oracle("foo"); i++) if (oracle()) "bar": 42 else "bar": 3.14, "baz": null};
//                                                                                            ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:217:20: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
// Try changing the type of the left hand side, or casting the right hand side to 'String'.
//   <String, String>{for (int i = 0; oracle("foo"); i++) if (oracle()) "bar": 42 else "bar": 3.14, "baz": null};
//                    ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:218:62: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>[for (int i = 0; oracle("foo"); i++) if (oracle()) ...map else 42];
//                                                              ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:219:62: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>{for (int i = 0; oracle("foo"); i++) if (oracle()) ...map else 42, null};
//                                                              ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:220:70: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
//  - 'List' is from 'dart:core'.
//   <String, int>{for (int i = 0; oracle("foo"); i++) if (oracle()) ...list else "bar": 42, "baz": null};
//                                                                      ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:221:70: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>[for (int i = 0; oracle("foo"); i++) if (oracle()) 42 else ...map];
//                                                                      ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:222:70: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>{for (int i = 0; oracle("foo"); i++) if (oracle()) 42 else ...map, null};
//                                                                      ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:223:85: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
//  - 'List' is from 'dart:core'.
//   <String, int>{for (int i = 0; oracle("foo"); i++) if (oracle()) "bar": 42 else ...list, "baz": null};
//                                                                                     ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:230:31: Error: The type 'String' used in the 'for' loop must implement 'Iterable<dynamic>'.
//  - 'Iterable' is from 'dart:core'.
//   var list10 = [for (var i in "not iterable") i];
//                               ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:231:30: Error: The type 'String' used in the 'for' loop must implement 'Iterable<dynamic>'.
//  - 'Iterable' is from 'dart:core'.
//   var set10 = {for (var i in "not iterable") i, null};
//                              ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:232:30: Error: The type 'String' used in the 'for' loop must implement 'Iterable<dynamic>'.
//  - 'Iterable' is from 'dart:core'.
//   var map10 = {for (var i in "not iterable") "bar": i, "baz": null};
//                              ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:233:32: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var list20 = [for (int i in ["not", "int"]) i];
//                                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:233:39: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var list20 = [for (int i in ["not", "int"]) i];
//                                       ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:234:31: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var set20 = {for (int i in ["not", "int"]) i, null};
//                               ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:234:38: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var set20 = {for (int i in ["not", "int"]) i, null};
//                                      ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:235:31: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var map20 = {for (int i in ["not", "int"]) "bar": i, "baz": null};
//                               ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:235:38: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var map20 = {for (int i in ["not", "int"]) "bar": i, "baz": null};
//                                      ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:236:37: Error: The type 'String' used in the 'for' loop must implement 'Stream<dynamic>'.
//  - 'Stream' is from 'dart:async'.
//   var list30 = [await for (var i in "not stream") i];
//                                     ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:237:36: Error: The type 'String' used in the 'for' loop must implement 'Stream<dynamic>'.
//  - 'Stream' is from 'dart:async'.
//   var set30 = {await for (var i in "not stream") i, null};
//                                    ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:238:36: Error: The type 'String' used in the 'for' loop must implement 'Stream<dynamic>'.
//  - 'Stream' is from 'dart:async'.
//   var map30 = {await for (var i in "not stream") "bar": i, "baz": null};
//                                    ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:239:58: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var list40 = [await for (int i in Stream.fromIterable(["not", "int"])) i];
//                                                          ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:239:65: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var list40 = [await for (int i in Stream.fromIterable(["not", "int"])) i];
//                                                                 ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:240:57: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var set40 = {await for (int i in Stream.fromIterable(["not", "int"])) i, null};
//                                                         ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:240:64: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var set40 = {await for (int i in Stream.fromIterable(["not", "int"])) i, null};
//                                                                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:241:57: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var map40 = {await for (int i in Stream.fromIterable(["not", "int"])) "bar": i, "baz": null};
//                                                         ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:241:64: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var map40 = {await for (int i in Stream.fromIterable(["not", "int"])) "bar": i, "baz": null};
//                                                                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:245:24: Error: A value of type 'String' can't be assigned to a variable of type 'bool'.
// Try changing the type of the left hand side, or casting the right hand side to 'bool'.
//   var list60 = [for (; "not bool";) 42];
//                        ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:246:23: Error: A value of type 'String' can't be assigned to a variable of type 'bool'.
// Try changing the type of the left hand side, or casting the right hand side to 'bool'.
//   var set60 = {for (; "not bool";) 42, null};
//                       ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:247:23: Error: A value of type 'String' can't be assigned to a variable of type 'bool'.
// Try changing the type of the left hand side, or casting the right hand side to 'bool'.
//   var map60 = {for (; "not bool";) "bar": 42, "baz": null};
//                       ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:251:26: Error: The asynchronous for-in can only be used in functions marked with 'async' or 'async*'.
// Try marking the function body with either 'async' or 'async*', or removing the 'await' before the for loop.
//   <int>[await for (int i in stream) i];
//                          ^^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:252:26: Error: The asynchronous for-in can only be used in functions marked with 'async' or 'async*'.
// Try marking the function body with either 'async' or 'async*', or removing the 'await' before the for loop.
//   <int>{await for (int i in stream) i};
//                          ^^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:253:34: Error: The asynchronous for-in can only be used in functions marked with 'async' or 'async*'.
// Try marking the function body with either 'async' or 'async*', or removing the 'await' before the for loop.
//   <String, int>{await for (int i in stream) "bar": i};
//                                  ^^
//
import self as self;
import "dart:core" as core;
import "dart:collection" as col;
import "dart:async" as asy;

class A extends core::Object {
  synthetic constructor •() → self::A
    : super core::Object::•()
    ;
}
class B extends self::A {
  synthetic constructor •() → self::B
    : super self::A::•()
    ;
  get foo() → core::int
    return 42;
}
static method oracle<T extends core::Object = dynamic>([self::oracle::T t = null]) → dynamic
  return true;
static method testIfElement(dynamic dynVar, core::List<core::int> listInt, core::List<core::double> listDouble, core::Map<core::String, core::int> mapToInt, core::Map<core::String, core::double> mapToDouble) → dynamic {
  core::List<core::int> list10 = block {
    final core::List<core::int> #t1 = <core::int>[];
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      #t1.{core::List::add}(42);
  } =>#t1;
  core::Set<core::int> set10 = block {
    final core::Set<core::int> #t2 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      #t2.{core::Set::add}(42);
    #t2.{core::Set::add}(null);
  } =>#t2;
  core::Map<core::String, core::int> map10 = block {
    final core::Map<core::String, core::int> #t3 = <core::String, core::int>{};
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      #t3.{core::Map::[]=}("bar", 42);
    #t3.{core::Map::[]=}("baz", null);
  } =>#t3;
  core::List<dynamic> list11 = block {
    final core::List<dynamic> #t4 = <dynamic>[];
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      #t4.{core::List::add}(dynVar);
  } =>#t4;
  core::Set<dynamic> set11 = block {
    final core::Set<dynamic> #t5 = col::LinkedHashSet::•<dynamic>();
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      #t5.{core::Set::add}(dynVar);
    #t5.{core::Set::add}(null);
  } =>#t5;
  core::Map<core::String, dynamic> map11 = block {
    final core::Map<core::String, dynamic> #t6 = <core::String, dynamic>{};
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      #t6.{core::Map::[]=}("bar", dynVar);
    #t6.{core::Map::[]=}("baz", null);
  } =>#t6;
  core::List<core::List<core::int>> list12 = block {
    final core::List<core::List<core::int>> #t7 = <core::List<core::int>>[];
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      #t7.{core::List::add}(<core::int>[42]);
  } =>#t7;
  core::Set<core::List<core::int>> set12 = block {
    final core::Set<core::List<core::int>> #t8 = col::LinkedHashSet::•<core::List<core::int>>();
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      #t8.{core::Set::add}(<core::int>[42]);
    #t8.{core::Set::add}(null);
  } =>#t8;
  core::Map<core::String, core::List<core::int>> map12 = block {
    final core::Map<core::String, core::List<core::int>> #t9 = <core::String, core::List<core::int>>{};
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      #t9.{core::Map::[]=}("bar", <core::int>[42]);
    #t9.{core::Map::[]=}("baz", null);
  } =>#t9;
  core::List<core::int> list20 = block {
    final core::List<core::int> #t10 = <core::int>[];
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final core::int #t11 in <core::int>[42])
        #t10.{core::List::add}(#t11);
  } =>#t10;
  core::Set<core::int> set20 = block {
    final core::Set<core::int> #t12 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final core::int #t13 in <core::int>[42])
        #t12.{core::Set::add}(#t13);
    #t12.{core::Set::add}(null);
  } =>#t12;
  core::Map<core::String, core::int> map20 = block {
    final core::Map<core::String, core::int> #t14 = <core::String, core::int>{};
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final core::MapEntry<core::String, core::int> #t15 in <core::String, core::int>{"bar": 42}.{core::Map::entries})
        #t14.{core::Map::[]=}(#t15.{core::MapEntry::key}, #t15.{core::MapEntry::value});
    #t14.{core::Map::[]=}("baz", null);
  } =>#t14;
  core::List<dynamic> list21 = block {
    final core::List<dynamic> #t16 = <dynamic>[];
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final dynamic #t17 in <dynamic>[dynVar])
        #t16.{core::List::add}(#t17);
  } =>#t16;
  core::Set<dynamic> set21 = block {
    final core::Set<dynamic> #t18 = col::LinkedHashSet::•<dynamic>();
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final dynamic #t19 in <dynamic>[dynVar])
        #t18.{core::Set::add}(#t19);
    #t18.{core::Set::add}(null);
  } =>#t18;
  core::Map<core::String, dynamic> map21 = block {
    final core::Map<core::String, dynamic> #t20 = <core::String, dynamic>{};
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final core::MapEntry<core::String, dynamic> #t21 in <core::String, dynamic>{"bar": dynVar}.{core::Map::entries})
        #t20.{core::Map::[]=}(#t21.{core::MapEntry::key}, #t21.{core::MapEntry::value});
    #t20.{core::Map::[]=}("baz", null);
  } =>#t20;
  core::List<core::List<core::int>> list22 = block {
    final core::List<core::List<core::int>> #t22 = <core::List<core::int>>[];
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final core::List<core::int> #t23 in <core::List<core::int>>[<core::int>[42]])
        #t22.{core::List::add}(#t23);
  } =>#t22;
  core::Set<core::List<core::int>> set22 = block {
    final core::Set<core::List<core::int>> #t24 = col::LinkedHashSet::•<core::List<core::int>>();
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final core::List<core::int> #t25 in <core::List<core::int>>[<core::int>[42]])
        #t24.{core::Set::add}(#t25);
    #t24.{core::Set::add}(null);
  } =>#t24;
  core::Map<core::String, core::List<core::int>> map22 = block {
    final core::Map<core::String, core::List<core::int>> #t26 = <core::String, core::List<core::int>>{};
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final core::MapEntry<core::String, core::List<core::int>> #t27 in <core::String, core::List<core::int>>{"bar": <core::int>[42]}.{core::Map::entries})
        #t26.{core::Map::[]=}(#t27.{core::MapEntry::key}, #t27.{core::MapEntry::value});
    #t26.{core::Map::[]=}("baz", null);
  } =>#t26;
  core::List<core::int> list30 = block {
    final core::List<core::int> #t28 = <core::int>[];
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::int #t29 in <core::int>[42])
          #t28.{core::List::add}(#t29);
  } =>#t28;
  core::Set<core::int> set30 = block {
    final core::Set<core::int> #t30 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::int #t31 in <core::int>[42])
          #t30.{core::Set::add}(#t31);
    #t30.{core::Set::add}(null);
  } =>#t30;
  core::Map<core::String, core::int> map30 = block {
    final core::Map<core::String, core::int> #t32 = <core::String, core::int>{};
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::MapEntry<core::String, core::int> #t33 in <core::String, core::int>{"bar": 42}.{core::Map::entries})
          #t32.{core::Map::[]=}(#t33.{core::MapEntry::key}, #t33.{core::MapEntry::value});
    #t32.{core::Map::[]=}("baz", null);
  } =>#t32;
  core::List<dynamic> list31 = block {
    final core::List<dynamic> #t34 = <dynamic>[];
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final dynamic #t35 in <dynamic>[dynVar])
          #t34.{core::List::add}(#t35);
  } =>#t34;
  core::Set<dynamic> set31 = block {
    final core::Set<dynamic> #t36 = col::LinkedHashSet::•<dynamic>();
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final dynamic #t37 in <dynamic>[dynVar])
          #t36.{core::Set::add}(#t37);
    #t36.{core::Set::add}(null);
  } =>#t36;
  core::Map<core::String, dynamic> map31 = block {
    final core::Map<core::String, dynamic> #t38 = <core::String, dynamic>{};
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::MapEntry<core::String, dynamic> #t39 in <core::String, dynamic>{"bar": dynVar}.{core::Map::entries})
          #t38.{core::Map::[]=}(#t39.{core::MapEntry::key}, #t39.{core::MapEntry::value});
    #t38.{core::Map::[]=}("baz", null);
  } =>#t38;
  core::List<core::List<core::int>> list33 = block {
    final core::List<core::List<core::int>> #t40 = <core::List<core::int>>[];
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::List<core::int> #t41 in <core::List<core::int>>[<core::int>[42]])
          #t40.{core::List::add}(#t41);
  } =>#t40;
  core::Set<core::List<core::int>> set33 = block {
    final core::Set<core::List<core::int>> #t42 = col::LinkedHashSet::•<core::List<core::int>>();
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::List<core::int> #t43 in <core::List<core::int>>[<core::int>[42]])
          #t42.{core::Set::add}(#t43);
    #t42.{core::Set::add}(null);
  } =>#t42;
  core::Map<core::String, core::List<core::int>> map33 = block {
    final core::Map<core::String, core::List<core::int>> #t44 = <core::String, core::List<core::int>>{};
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::MapEntry<core::String, core::List<core::int>> #t45 in <core::String, core::List<core::int>>{"bar": <core::int>[42]}.{core::Map::entries})
          #t44.{core::Map::[]=}(#t45.{core::MapEntry::key}, #t45.{core::MapEntry::value});
    #t44.{core::Map::[]=}("baz", null);
  } =>#t44;
  core::List<core::List<core::int>> list40 = block {
    final core::List<core::List<core::int>> #t46 = <core::List<core::int>>[];
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final core::List<core::int> #t47 in <core::List<core::int>>[<core::int>[]])
        #t46.{core::List::add}(#t47);
  } =>#t46;
  core::Set<core::List<core::int>> set40 = block {
    final core::Set<core::List<core::int>> #t48 = col::LinkedHashSet::•<core::List<core::int>>();
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final core::List<core::int> #t49 in <core::List<core::int>>[<core::int>[]])
        #t48.{core::Set::add}(#t49);
    #t48.{core::Set::add}(null);
  } =>#t48;
  core::Map<core::String, core::List<core::int>> map40 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:39:34: Error: Both Iterable and Map spread elements encountered in ambiguous literal.
  Map<String, List<int>> map40 = {if (oracle(\"foo\")) ...{\"bar\", []}, \"baz\": null};
                                 ^";
  core::List<core::List<core::int>> list41 = block {
    final core::List<core::List<core::int>> #t50 = <core::List<core::int>>[];
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final core::List<core::int> #t51 in let final core::Set<core::List<core::int>> #t52 = col::LinkedHashSet::•<core::List<core::int>>() in let final dynamic #t53 = #t52.{core::Set::add}(<core::int>[]) in #t52)
        #t50.{core::List::add}(#t51);
  } =>#t50;
  core::Set<core::List<core::int>> set41 = block {
    final core::Set<core::List<core::int>> #t54 = col::LinkedHashSet::•<core::List<core::int>>();
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final core::List<core::int> #t55 in let final core::Set<core::List<core::int>> #t56 = col::LinkedHashSet::•<core::List<core::int>>() in let final dynamic #t57 = #t56.{core::Set::add}(<core::int>[]) in #t56)
        #t54.{core::Set::add}(#t55);
    #t54.{core::Set::add}(null);
  } =>#t54;
  core::List<core::List<core::int>> list42 = block {
    final core::List<core::List<core::int>> #t58 = <core::List<core::int>>[];
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::List<core::int> #t59 in <core::List<core::int>>[<core::int>[]])
          #t58.{core::List::add}(#t59);
  } =>#t58;
  core::Set<core::List<core::int>> set42 = block {
    final core::Set<core::List<core::int>> #t60 = col::LinkedHashSet::•<core::List<core::int>>();
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::List<core::int> #t61 in <core::List<core::int>>[<core::int>[]])
          #t60.{core::Set::add}(#t61);
    #t60.{core::Set::add}(null);
  } =>#t60;
  core::Map<core::String, core::List<core::int>> map42 = block {
    final core::Map<core::String, core::List<core::int>> #t62 = <core::String, core::List<core::int>>{};
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::MapEntry<core::String, core::List<core::int>> #t63 in <core::String, core::List<core::int>>{"bar": <core::int>[]}.{core::Map::entries})
          #t62.{core::Map::[]=}(#t63.{core::MapEntry::key}, #t63.{core::MapEntry::value});
    #t62.{core::Map::[]=}("baz", null);
  } =>#t62;
  core::List<core::int> list50 = block {
    final core::List<core::int> #t64 = <core::int>[];
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final core::int #t65 in <core::int>[])
        #t64.{core::List::add}(#t65);
  } =>#t64;
  core::Set<core::int> set50 = block {
    final core::Set<core::int> #t66 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final core::int #t67 in <core::int>[])
        #t66.{core::Set::add}(#t67);
    #t66.{core::Set::add}(null);
  } =>#t66;
  core::Map<core::String, core::int> map50 = block {
    final core::Map<core::String, core::int> #t68 = <core::String, core::int>{};
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final core::MapEntry<core::String, core::int> #t69 in <core::String, core::int>{}.{core::Map::entries})
        #t68.{core::Map::[]=}(#t69.{core::MapEntry::key}, #t69.{core::MapEntry::value});
    #t68.{core::Map::[]=}("baz", null);
  } =>#t68;
  core::List<core::int> list51 = block {
    final core::List<core::int> #t70 = <core::int>[];
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final core::int #t71 in let final core::Set<core::int> #t72 = col::LinkedHashSet::•<core::int>() in #t72)
        #t70.{core::List::add}(#t71);
  } =>#t70;
  core::Set<core::int> set51 = block {
    final core::Set<core::int> #t73 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final core::int #t74 in let final core::Set<core::int> #t75 = col::LinkedHashSet::•<core::int>() in #t75)
        #t73.{core::Set::add}(#t74);
    #t73.{core::Set::add}(null);
  } =>#t73;
  core::List<core::int> list52 = block {
    final core::List<core::int> #t76 = <core::int>[];
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::int #t77 in <core::int>[])
          #t76.{core::List::add}(#t77);
  } =>#t76;
  core::Set<core::int> set52 = block {
    final core::Set<core::int> #t78 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::int #t79 in <core::int>[])
          #t78.{core::Set::add}(#t79);
    #t78.{core::Set::add}(null);
  } =>#t78;
  core::Map<core::String, core::int> map52 = block {
    final core::Map<core::String, core::int> #t80 = <core::String, core::int>{};
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::MapEntry<core::String, core::int> #t81 in <core::String, core::int>{}.{core::Map::entries})
          #t80.{core::Map::[]=}(#t81.{core::MapEntry::key}, #t81.{core::MapEntry::value});
    #t80.{core::Map::[]=}("baz", null);
  } =>#t80;
  core::List<core::List<core::int>> list60 = block {
    final core::List<core::List<core::int>> #t82 = <core::List<core::int>>[];
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final core::List<core::int> #t83 in <core::List<core::int>>[<core::int>[]])
        #t82.{core::List::add}(#t83);
  } =>#t82;
  core::Set<core::List<core::int>> set60 = block {
    final core::Set<core::List<core::int>> #t84 = col::LinkedHashSet::•<core::List<core::int>>();
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final core::List<core::int> #t85 in <core::List<core::int>>[<core::int>[]])
        #t84.{core::Set::add}(#t85);
    #t84.{core::Set::add}(null);
  } =>#t84;
  core::Map<core::String, core::List<core::int>> map60 = block {
    final core::Map<core::String, core::List<core::int>> #t86 = <core::String, core::List<core::int>>{};
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final core::MapEntry<core::String, core::List<core::int>> #t87 in <core::String, core::List<core::int>>{"bar": <core::int>[]}.{core::Map::entries})
        #t86.{core::Map::[]=}(#t87.{core::MapEntry::key}, #t87.{core::MapEntry::value});
    #t86.{core::Map::[]=}("baz", null);
  } =>#t86;
  core::List<core::List<core::int>> list61 = block {
    final core::List<core::List<core::int>> #t88 = <core::List<core::int>>[];
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::List<core::int> #t89 in <core::List<core::int>>[<core::int>[]])
          #t88.{core::List::add}(#t89);
  } =>#t88;
  core::Set<core::List<core::int>> set61 = block {
    final core::Set<core::List<core::int>> #t90 = col::LinkedHashSet::•<core::List<core::int>>();
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::List<core::int> #t91 in <core::List<core::int>>[<core::int>[]])
          #t90.{core::Set::add}(#t91);
    #t90.{core::Set::add}(null);
  } =>#t90;
  core::Map<core::String, core::List<core::int>> map61 = block {
    final core::Map<core::String, core::List<core::int>> #t92 = <core::String, core::List<core::int>>{};
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::MapEntry<core::String, core::List<core::int>> #t93 in <core::String, core::List<core::int>>{"bar": <core::int>[]}.{core::Map::entries})
          #t92.{core::Map::[]=}(#t93.{core::MapEntry::key}, #t93.{core::MapEntry::value});
    #t92.{core::Map::[]=}("baz", null);
  } =>#t92;
  core::List<core::List<core::int>> list70 = block {
    final core::List<core::List<core::int>> #t94 = <core::List<core::int>>[];
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      #t94.{core::List::add}(<core::int>[]);
  } =>#t94;
  core::Set<core::List<core::int>> set70 = block {
    final core::Set<core::List<core::int>> #t95 = col::LinkedHashSet::•<core::List<core::int>>();
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      #t95.{core::Set::add}(<core::int>[]);
    #t95.{core::Set::add}(null);
  } =>#t95;
  core::List<core::List<core::int>> list71 = block {
    final core::List<core::List<core::int>> #t96 = <core::List<core::int>>[];
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        #t96.{core::List::add}(<core::int>[]);
  } =>#t96;
  core::Set<core::List<core::int>> set71 = block {
    final core::Set<core::List<core::int>> #t97 = col::LinkedHashSet::•<core::List<core::int>>();
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        #t97.{core::Set::add}(<core::int>[]);
    #t97.{core::Set::add}(null);
  } =>#t97;
  core::List<core::num> list80 = block {
    final core::List<core::num> #t98 = <core::num>[];
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      #t98.{core::List::add}(42);
    else
      #t98.{core::List::add}(3.14);
  } =>#t98;
  core::Set<core::num> set80 = block {
    final core::Set<core::num> #t99 = col::LinkedHashSet::•<core::num>();
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      #t99.{core::Set::add}(42);
    else
      #t99.{core::Set::add}(3.14);
    #t99.{core::Set::add}(null);
  } =>#t99;
  core::Map<core::String, core::num> map80 = block {
    final core::Map<core::String, core::num> #t100 = <core::String, core::num>{};
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      #t100.{core::Map::[]=}("bar", 42);
    else
      #t100.{core::Map::[]=}("bar", 3.14);
    #t100.{core::Map::[]=}("baz", null);
  } =>#t100;
  core::List<core::num> list81 = block {
    final core::List<core::num> #t101 = <core::num>[];
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final core::num #t102 in listInt)
        #t101.{core::List::add}(#t102);
    else
      for (final core::num #t103 in listDouble)
        #t101.{core::List::add}(#t103);
  } =>#t101;
  core::Set<core::num> set81 = block {
    final core::Set<core::num> #t104 = col::LinkedHashSet::•<core::num>();
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final core::num #t105 in listInt)
        #t104.{core::Set::add}(#t105);
    else
      for (final core::num #t106 in listDouble)
        #t104.{core::Set::add}(#t106);
    #t104.{core::Set::add}(null);
  } =>#t104;
  core::Map<core::String, core::num> map81 = block {
    final core::Map<core::String, core::num> #t107 = <core::String, core::num>{};
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final core::MapEntry<core::String, core::num> #t108 in mapToInt.{core::Map::entries})
        #t107.{core::Map::[]=}(#t108.{core::MapEntry::key}, #t108.{core::MapEntry::value});
    else
      for (final core::MapEntry<core::String, core::num> #t109 in mapToDouble.{core::Map::entries})
        #t107.{core::Map::[]=}(#t109.{core::MapEntry::key}, #t109.{core::MapEntry::value});
    #t107.{core::Map::[]=}("baz", null);
  } =>#t107;
  core::List<dynamic> list82 = block {
    final core::List<dynamic> #t110 = <dynamic>[];
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final dynamic #t111 in listInt)
        #t110.{core::List::add}(#t111);
    else
      for (final dynamic #t112 in dynVar as{TypeError} core::Iterable<dynamic>)
        #t110.{core::List::add}(#t112);
  } =>#t110;
  core::Set<dynamic> set82 = block {
    final core::Set<dynamic> #t113 = col::LinkedHashSet::•<dynamic>();
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final dynamic #t114 in listInt)
        #t113.{core::Set::add}(#t114);
    else
      for (final dynamic #t115 in dynVar as{TypeError} core::Iterable<dynamic>)
        #t113.{core::Set::add}(#t115);
    #t113.{core::Set::add}(null);
  } =>#t113;
  core::Set<dynamic> map82 = block {
    final core::Set<dynamic> #t116 = col::LinkedHashSet::•<dynamic>();
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      #t116.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:71:38: Error: Unexpected type 'Map<String, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  var map82 = {if (oracle(\"foo\")) ...mapToInt else ...dynVar, null};
                                     ^");
    else
      for (final dynamic #t117 in dynVar as{TypeError} core::Iterable<dynamic>)
        #t116.{core::Set::add}(#t117);
    #t116.{core::Set::add}(null);
  } =>#t116;
  core::List<core::num> list83 = block {
    final core::List<core::num> #t118 = <core::num>[];
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      #t118.{core::List::add}(42);
    else
      for (final core::num #t119 in listDouble)
        #t118.{core::List::add}(#t119);
  } =>#t118;
  core::Set<core::num> set83 = block {
    final core::Set<core::num> #t120 = col::LinkedHashSet::•<core::num>();
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final core::num #t121 in listInt)
        #t120.{core::Set::add}(#t121);
    else
      #t120.{core::Set::add}(3.14);
    #t120.{core::Set::add}(null);
  } =>#t120;
  core::Map<core::String, core::num> map83 = block {
    final core::Map<core::String, core::num> #t122 = <core::String, core::num>{};
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final core::MapEntry<core::String, core::num> #t123 in mapToInt.{core::Map::entries})
        #t122.{core::Map::[]=}(#t123.{core::MapEntry::key}, #t123.{core::MapEntry::value});
    else
      #t122.{core::Map::[]=}("bar", 3.14);
    #t122.{core::Map::[]=}("baz", null);
  } =>#t122;
  core::List<core::int> list90 = block {
    final core::List<core::int> #t124 = <core::int>[];
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      #t124.{core::List::add}(dynVar as{TypeError} core::int);
  } =>#t124;
  core::Set<core::int> set90 = block {
    final core::Set<core::int> #t125 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      #t125.{core::Set::add}(dynVar as{TypeError} core::int);
    #t125.{core::Set::add}(null);
  } =>#t125;
  core::Map<core::String, core::int> map90 = block {
    final core::Map<core::String, core::int> #t126 = <core::String, core::int>{};
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      #t126.{core::Map::[]=}("bar", dynVar as{TypeError} core::int);
    #t126.{core::Map::[]=}("baz", null);
  } =>#t126;
  core::List<core::int> list91 = block {
    final core::List<core::int> #t127 = <core::int>[];
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final dynamic #t128 in dynVar as{TypeError} core::Iterable<dynamic>) {
        final core::int #t129 = #t128 as{TypeError} core::int;
        #t127.{core::List::add}(#t129);
      }
  } =>#t127;
  core::Set<core::int> set91 = block {
    final core::Set<core::int> #t130 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final dynamic #t131 in dynVar as{TypeError} core::Iterable<dynamic>) {
        final core::int #t132 = #t131 as{TypeError} core::int;
        #t130.{core::Set::add}(#t132);
      }
    #t130.{core::Set::add}(null);
  } =>#t130;
  core::Map<core::String, core::int> map91 = block {
    final core::Map<core::String, core::int> #t133 = <core::String, core::int>{};
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final core::MapEntry<dynamic, dynamic> #t134 in (dynVar as{TypeError} core::Map<dynamic, dynamic>).{core::Map::entries}) {
        final core::String #t135 = #t134.{core::MapEntry::key} as{TypeError} core::String;
        final core::int #t136 = #t134.{core::MapEntry::value} as{TypeError} core::int;
        #t133.{core::Map::[]=}(#t135, #t136);
      }
    #t133.{core::Map::[]=}("baz", null);
  } =>#t133;
  core::List<core::int> list100 = block {
    final core::List<core::int> #t137 = <core::int>[];
    if(dynVar as{TypeError} core::bool)
      #t137.{core::List::add}(42);
  } =>#t137;
  core::Set<core::int> set100 = block {
    final core::Set<core::int> #t138 = col::LinkedHashSet::•<core::int>();
    if(dynVar as{TypeError} core::bool)
      #t138.{core::Set::add}(42);
  } =>#t138;
  core::Map<core::int, core::int> map100 = block {
    final core::Map<core::int, core::int> #t139 = <core::int, core::int>{};
    if(dynVar as{TypeError} core::bool)
      #t139.{core::Map::[]=}(42, 42);
  } =>#t139;
}
static method testIfElementErrors(core::Map<core::int, core::int> map) → dynamic {
  <core::int>[invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:87:28: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int>[if (oracle(\"foo\")) \"bar\"];
                           ^"];
  let final core::Set<core::int> #t140 = col::LinkedHashSet::•<core::int>() in let final dynamic #t141 = #t140.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:88:28: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int>{if (oracle(\"foo\")) \"bar\", null};
                           ^") in let final dynamic #t142 = #t140.{core::Set::add}(null) in #t140;
  <core::String, core::int>{null: invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:89:41: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <String, int>{if (oracle(\"foo\")) \"bar\": \"bar\", \"baz\": null};
                                        ^", "baz": null};
  block {
    final core::List<core::int> #t143 = <core::int>[];
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final core::int #t144 in <core::int>[let final<BottomType> #t145 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:90:32: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int>[if (oracle(\"foo\")) ...[\"bar\"]];
                               ^" in "bar" as{TypeError} core::int])
        #t143.{core::List::add}(#t144);
  } =>#t143;
  block {
    final core::Set<core::int> #t146 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final core::int #t147 in <core::int>[let final<BottomType> #t148 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:91:32: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int>{if (oracle(\"foo\")) ...[\"bar\"], null};
                               ^" in "bar" as{TypeError} core::int])
        #t146.{core::Set::add}(#t147);
    #t146.{core::Set::add}(null);
  } =>#t146;
  block {
    final core::Map<core::String, core::int> #t149 = <core::String, core::int>{};
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      for (final core::MapEntry<core::String, core::int> #t150 in <core::String, core::int>{"bar": let final<BottomType> #t151 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:92:47: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <String, int>{if (oracle(\"foo\")) ...{\"bar\": \"bar\"}, \"baz\": null};
                                              ^" in "bar" as{TypeError} core::int}.{core::Map::entries})
        #t149.{core::Map::[]=}(#t150.{core::MapEntry::key}, #t150.{core::MapEntry::value});
    #t149.{core::Map::[]=}("baz", null);
  } =>#t149;
  block {
    final core::List<core::int> #t152 = <core::int>[];
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      #t152.{core::List::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:93:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>[if (oracle(\"foo\")) ...map];
                              ^" as{TypeError} core::int);
  } =>#t152;
  block {
    final core::Set<core::int> #t153 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      #t153.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:94:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>{if (oracle(\"foo\")) ...map, null};
                              ^" as{TypeError} core::int);
    #t153.{core::Set::add}(null);
  } =>#t153;
  <core::String, core::int>{invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:95:39: Error: Unexpected type 'List<String>' of a map spread entry.  Expected 'dynamic' or a Map.
 - 'List' is from 'dart:core'.
  <String, int>{if (oracle(\"foo\")) ...[\"bar\"], \"baz\": null};
                                      ^": null, invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:95:39: Error: Unexpected type 'List<String>' of a map spread entry.  Expected 'dynamic' or a Map.
 - 'List' is from 'dart:core'.
  <String, int>{if (oracle(\"foo\")) ...[\"bar\"], \"baz\": null};
                                      ^": null};
  <core::String>[invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:96:12: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
Try changing the type of the left hand side, or casting the right hand side to 'String'.
  <String>[if (oracle(\"foo\")) 42 else 3.14];
           ^"];
  let final core::Set<core::String> #t154 = col::LinkedHashSet::•<core::String>() in let final dynamic #t155 = #t154.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:97:12: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
Try changing the type of the left hand side, or casting the right hand side to 'String'.
  <String>{if (oracle(\"foo\")) 42 else 3.14, null};
           ^") in let final dynamic #t156 = #t154.{core::Set::add}(null) in #t154;
  <core::String, core::String>{null: invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:98:20: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
Try changing the type of the left hand side, or casting the right hand side to 'String'.
  <String, String>{if (oracle(\"foo\")) \"bar\": 42 else \"baz\": 3.14, \"baz\": null};
                   ^", "baz": null};
  block {
    final core::List<core::int> #t157 = <core::int>[];
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      #t157.{core::List::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:99:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>[if (oracle(\"foo\")) ...map else 42];
                              ^" as{TypeError} core::int);
    else
      #t157.{core::List::add}(42 as{TypeError} core::int);
  } =>#t157;
  block {
    final core::Set<core::int> #t158 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      #t158.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:100:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>{if (oracle(\"foo\")) ...map else 42, null};
                              ^" as{TypeError} core::int);
    else
      #t158.{core::Set::add}(42 as{TypeError} core::int);
    #t158.{core::Set::add}(null);
  } =>#t158;
  <core::String, core::int>{invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:101:39: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
 - 'List' is from 'dart:core'.
  <String, int>{if (oracle(\"foo\")) ...[42] else \"bar\": 42, \"baz\": null};
                                      ^": null, invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:101:39: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
 - 'List' is from 'dart:core'.
  <String, int>{if (oracle(\"foo\")) ...[42] else \"bar\": 42, \"baz\": null};
                                      ^": null};
  block {
    final core::List<core::int> #t159 = <core::int>[];
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      #t159.{core::List::add}(42 as{TypeError} core::int);
    else
      #t159.{core::List::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:102:39: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>[if (oracle(\"foo\")) 42 else ...map];
                                      ^" as{TypeError} core::int);
  } =>#t159;
  block {
    final core::Set<core::int> #t160 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo") as{TypeError} core::bool)
      #t160.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:103:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>{if (oracle(\"foo\")) ...map else 42, null};
                              ^" as{TypeError} core::int);
    else
      #t160.{core::Set::add}(42 as{TypeError} core::int);
    #t160.{core::Set::add}(null);
  } =>#t160;
  <core::String, core::int>{invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:104:54: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
 - 'List' is from 'dart:core'.
  <String, int>{if (oracle(\"foo\")) \"bar\": 42 else ...[42], \"baz\": null};
                                                     ^": null, invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:104:54: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
 - 'List' is from 'dart:core'.
  <String, int>{if (oracle(\"foo\")) \"bar\": 42 else ...[42], \"baz\": null};
                                                     ^": null};
  core::Set<dynamic> set10 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:106:24: Error: Both Iterable and Map spread elements encountered in ambiguous literal.
  Set<dynamic> set10 = {if (oracle(\"foo\")) 42 else \"bar\": 3.14};
                       ^";
  core::Map<dynamic, dynamic> map10 = <dynamic, dynamic>{invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:107:53: Error: Expected ':' after this.
  Map<dynamic, dynamic> map10 = {if (oracle(\"foo\")) 42 else \"bar\": 3.14};
                                                    ^": null};
  core::Set<dynamic> set11 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:108:24: Error: Both Iterable and Map spread elements encountered in ambiguous literal.
  Set<dynamic> set11 = {if (oracle(\"foo\")) \"bar\": 3.14 else 42};
                       ^";
  core::Map<dynamic, dynamic> map11 = <dynamic, dynamic>{invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:109:70: Error: Expected ':' after this.
  Map<dynamic, dynamic> map11 = {if (oracle(\"foo\")) \"bar\": 3.14 else 42};
                                                                     ^": null};
  core::Map<<BottomType>, core::Null> map12 = <<BottomType>, core::Null>{invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:110:35: Error: Expected ':' after this.
  var map12 = {if (oracle(\"foo\")) 42 else \"bar\": 3.14};
                                  ^": null};
  core::Map<<BottomType>, core::Null> map13 = <<BottomType>, core::Null>{invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:111:52: Error: Expected ':' after this.
  var map13 = {if (oracle(\"foo\")) \"bar\": 3.14 else 42};
                                                   ^": null};
  core::List<core::int> list20 = block {
    final core::List<core::int> #t161 = <core::int>[];
    if(let final<BottomType> #t162 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:112:27: Error: A value of type 'int' can't be assigned to a variable of type 'bool'.
Try changing the type of the left hand side, or casting the right hand side to 'bool'.
  List<int> list20 = [if (42) 42];
                          ^" in 42 as{TypeError} core::bool)
      #t161.{core::List::add}(42);
  } =>#t161;
  core::Set<core::int> set20 = block {
    final core::Set<core::int> #t163 = col::LinkedHashSet::•<core::int>();
    if(let final<BottomType> #t164 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:113:25: Error: A value of type 'int' can't be assigned to a variable of type 'bool'.
Try changing the type of the left hand side, or casting the right hand side to 'bool'.
  Set<int> set20 = {if (42) 42};
                        ^" in 42 as{TypeError} core::bool)
      #t163.{core::Set::add}(42);
  } =>#t163;
  core::Map<core::int, core::int> map30 = block {
    final core::Map<core::int, core::int> #t165 = <core::int, core::int>{};
    if(let final<BottomType> #t166 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:114:30: Error: A value of type 'int' can't be assigned to a variable of type 'bool'.
Try changing the type of the left hand side, or casting the right hand side to 'bool'.
  Map<int, int> map30 = {if (42) 42: 42};
                             ^" in 42 as{TypeError} core::bool)
      #t165.{core::Map::[]=}(42, 42);
  } =>#t165;
}
static method testForElement(dynamic dynVar, core::List<core::int> listInt, core::List<core::double> listDouble, core::int index, core::Map<core::String, core::int> mapStringInt, core::Map<core::String, core::double> mapStringDouble) → dynamic {
  core::List<core::int> list10 = block {
    final core::List<core::int> #t167 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t167.{core::List::add}(42);
  } =>#t167;
  core::Set<core::int> set10 = block {
    final core::Set<core::int> #t168 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t168.{core::Set::add}(42);
    #t168.{core::Set::add}(null);
  } =>#t168;
  core::Map<core::String, core::int> map10 = block {
    final core::Map<core::String, core::int> #t169 = <core::String, core::int>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t169.{core::Map::[]=}("bar", 42);
    #t169.{core::Map::[]=}("baz", null);
  } =>#t169;
  core::List<dynamic> list11 = block {
    final core::List<dynamic> #t170 = <dynamic>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t170.{core::List::add}(dynVar);
  } =>#t170;
  core::Set<dynamic> set11 = block {
    final core::Set<dynamic> #t171 = col::LinkedHashSet::•<dynamic>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t171.{core::Set::add}(dynVar);
    #t171.{core::Set::add}(null);
  } =>#t171;
  core::Map<core::String, dynamic> map11 = block {
    final core::Map<core::String, dynamic> #t172 = <core::String, dynamic>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t172.{core::Map::[]=}("bar", dynVar);
    #t172.{core::Map::[]=}("baz", null);
  } =>#t172;
  core::List<core::List<core::int>> list12 = block {
    final core::List<core::List<core::int>> #t173 = <core::List<core::int>>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t173.{core::List::add}(<core::int>[42]);
  } =>#t173;
  core::Set<core::List<core::int>> set12 = block {
    final core::Set<core::List<core::int>> #t174 = col::LinkedHashSet::•<core::List<core::int>>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t174.{core::Set::add}(<core::int>[42]);
    #t174.{core::Set::add}(null);
  } =>#t174;
  core::Map<core::String, core::List<core::int>> map12 = block {
    final core::Map<core::String, core::List<core::int>> #t175 = <core::String, core::List<core::int>>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t175.{core::Map::[]=}("bar", <core::int>[42]);
    #t175.{core::Map::[]=}("baz", null);
  } =>#t175;
  core::List<core::int> list20 = block {
    final core::List<core::int> #t176 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::int #t177 in <core::int>[42])
        #t176.{core::List::add}(#t177);
  } =>#t176;
  core::Set<core::int> set20 = block {
    final core::Set<core::int> #t178 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::int #t179 in <core::int>[42])
        #t178.{core::Set::add}(#t179);
    #t178.{core::Set::add}(null);
  } =>#t178;
  core::Map<core::String, core::int> map20 = block {
    final core::Map<core::String, core::int> #t180 = <core::String, core::int>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::MapEntry<core::String, core::int> #t181 in <core::String, core::int>{"bar": 42}.{core::Map::entries})
        #t180.{core::Map::[]=}(#t181.{core::MapEntry::key}, #t181.{core::MapEntry::value});
    #t180.{core::Map::[]=}("baz", null);
  } =>#t180;
  core::List<dynamic> list21 = block {
    final core::List<dynamic> #t182 = <dynamic>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final dynamic #t183 in <dynamic>[dynVar])
        #t182.{core::List::add}(#t183);
  } =>#t182;
  core::Set<dynamic> set21 = block {
    final core::Set<dynamic> #t184 = col::LinkedHashSet::•<dynamic>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final dynamic #t185 in <dynamic>[dynVar])
        #t184.{core::Set::add}(#t185);
    #t184.{core::Set::add}(null);
  } =>#t184;
  core::Map<core::String, dynamic> map21 = block {
    final core::Map<core::String, dynamic> #t186 = <core::String, dynamic>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::MapEntry<core::String, dynamic> #t187 in <core::String, dynamic>{"bar": dynVar}.{core::Map::entries})
        #t186.{core::Map::[]=}(#t187.{core::MapEntry::key}, #t187.{core::MapEntry::value});
    #t186.{core::Map::[]=}("baz", null);
  } =>#t186;
  core::List<core::List<core::int>> list22 = block {
    final core::List<core::List<core::int>> #t188 = <core::List<core::int>>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::List<core::int> #t189 in <core::List<core::int>>[<core::int>[42]])
        #t188.{core::List::add}(#t189);
  } =>#t188;
  core::Set<core::List<core::int>> set22 = block {
    final core::Set<core::List<core::int>> #t190 = col::LinkedHashSet::•<core::List<core::int>>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::List<core::int> #t191 in <core::List<core::int>>[<core::int>[42]])
        #t190.{core::Set::add}(#t191);
    #t190.{core::Set::add}(null);
  } =>#t190;
  core::Map<core::String, core::List<core::int>> map22 = block {
    final core::Map<core::String, core::List<core::int>> #t192 = <core::String, core::List<core::int>>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::MapEntry<core::String, core::List<core::int>> #t193 in <core::String, core::List<core::int>>{"bar": <core::int>[42]}.{core::Map::entries})
        #t192.{core::Map::[]=}(#t193.{core::MapEntry::key}, #t193.{core::MapEntry::value});
    #t192.{core::Map::[]=}("baz", null);
  } =>#t192;
  core::List<core::int> list30 = block {
    final core::List<core::int> #t194 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::int #t195 in <core::int>[42])
          #t194.{core::List::add}(#t195);
  } =>#t194;
  core::Set<core::int> set30 = block {
    final core::Set<core::int> #t196 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::int #t197 in <core::int>[42])
          #t196.{core::Set::add}(#t197);
    #t196.{core::Set::add}(null);
  } =>#t196;
  core::Map<core::String, core::int> map30 = block {
    final core::Map<core::String, core::int> #t198 = <core::String, core::int>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::MapEntry<core::String, core::int> #t199 in <core::String, core::int>{"bar": 42}.{core::Map::entries})
          #t198.{core::Map::[]=}(#t199.{core::MapEntry::key}, #t199.{core::MapEntry::value});
    #t198.{core::Map::[]=}("baz", null);
  } =>#t198;
  core::List<dynamic> list31 = block {
    final core::List<dynamic> #t200 = <dynamic>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final dynamic #t201 in <dynamic>[dynVar])
          #t200.{core::List::add}(#t201);
  } =>#t200;
  core::Set<dynamic> set31 = block {
    final core::Set<dynamic> #t202 = col::LinkedHashSet::•<dynamic>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final dynamic #t203 in <dynamic>[dynVar])
          #t202.{core::Set::add}(#t203);
    #t202.{core::Set::add}(null);
  } =>#t202;
  core::Map<core::String, dynamic> map31 = block {
    final core::Map<core::String, dynamic> #t204 = <core::String, dynamic>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::MapEntry<core::String, dynamic> #t205 in <core::String, dynamic>{"bar": dynVar}.{core::Map::entries})
          #t204.{core::Map::[]=}(#t205.{core::MapEntry::key}, #t205.{core::MapEntry::value});
    #t204.{core::Map::[]=}("baz", null);
  } =>#t204;
  core::List<core::List<core::int>> list33 = block {
    final core::List<core::List<core::int>> #t206 = <core::List<core::int>>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::List<core::int> #t207 in <core::List<core::int>>[<core::int>[42]])
          #t206.{core::List::add}(#t207);
  } =>#t206;
  core::Set<core::List<core::int>> set33 = block {
    final core::Set<core::List<core::int>> #t208 = col::LinkedHashSet::•<core::List<core::int>>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::List<core::int> #t209 in <core::List<core::int>>[<core::int>[42]])
          #t208.{core::Set::add}(#t209);
    #t208.{core::Set::add}(null);
  } =>#t208;
  core::Map<core::String, core::List<core::int>> map33 = block {
    final core::Map<core::String, core::List<core::int>> #t210 = <core::String, core::List<core::int>>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::MapEntry<core::String, core::List<core::int>> #t211 in <core::String, core::List<core::int>>{"bar": <core::int>[42]}.{core::Map::entries})
          #t210.{core::Map::[]=}(#t211.{core::MapEntry::key}, #t211.{core::MapEntry::value});
    #t210.{core::Map::[]=}("baz", null);
  } =>#t210;
  core::List<core::List<core::int>> list40 = block {
    final core::List<core::List<core::int>> #t212 = <core::List<core::int>>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::List<core::int> #t213 in <core::List<core::int>>[<core::int>[]])
        #t212.{core::List::add}(#t213);
  } =>#t212;
  core::Set<core::List<core::int>> set40 = block {
    final core::Set<core::List<core::int>> #t214 = col::LinkedHashSet::•<core::List<core::int>>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::List<core::int> #t215 in <core::List<core::int>>[<core::int>[]])
        #t214.{core::Set::add}(#t215);
    #t214.{core::Set::add}(null);
  } =>#t214;
  core::Map<core::String, core::List<core::int>> map40 = block {
    final core::Map<core::String, core::List<core::int>> #t216 = <core::String, core::List<core::int>>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::MapEntry<core::String, core::List<core::int>> #t217 in <core::String, core::List<core::int>>{"bar": <core::int>[]}.{core::Map::entries})
        #t216.{core::Map::[]=}(#t217.{core::MapEntry::key}, #t217.{core::MapEntry::value});
    #t216.{core::Map::[]=}("baz", null);
  } =>#t216;
  core::List<core::List<core::int>> list41 = block {
    final core::List<core::List<core::int>> #t218 = <core::List<core::int>>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::List<core::int> #t219 in let final core::Set<core::List<core::int>> #t220 = col::LinkedHashSet::•<core::List<core::int>>() in let final dynamic #t221 = #t220.{core::Set::add}(<core::int>[]) in #t220)
        #t218.{core::List::add}(#t219);
  } =>#t218;
  core::Set<core::List<core::int>> set41 = block {
    final core::Set<core::List<core::int>> #t222 = col::LinkedHashSet::•<core::List<core::int>>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::List<core::int> #t223 in let final core::Set<core::List<core::int>> #t224 = col::LinkedHashSet::•<core::List<core::int>>() in let final dynamic #t225 = #t224.{core::Set::add}(<core::int>[]) in #t224)
        #t222.{core::Set::add}(#t223);
    #t222.{core::Set::add}(null);
  } =>#t222;
  core::List<core::List<core::int>> list42 = block {
    final core::List<core::List<core::int>> #t226 = <core::List<core::int>>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::List<core::int> #t227 in <core::List<core::int>>[<core::int>[]])
          #t226.{core::List::add}(#t227);
  } =>#t226;
  core::Set<core::List<core::int>> set42 = block {
    final core::Set<core::List<core::int>> #t228 = col::LinkedHashSet::•<core::List<core::int>>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::List<core::int> #t229 in <core::List<core::int>>[<core::int>[]])
          #t228.{core::Set::add}(#t229);
    #t228.{core::Set::add}(null);
  } =>#t228;
  core::Map<core::String, core::List<core::int>> map42 = block {
    final core::Map<core::String, core::List<core::int>> #t230 = <core::String, core::List<core::int>>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::MapEntry<core::String, core::List<core::int>> #t231 in <core::String, core::List<core::int>>{"bar": <core::int>[]}.{core::Map::entries})
          #t230.{core::Map::[]=}(#t231.{core::MapEntry::key}, #t231.{core::MapEntry::value});
    #t230.{core::Map::[]=}("baz", null);
  } =>#t230;
  core::List<core::int> list50 = block {
    final core::List<core::int> #t232 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::int #t233 in <core::int>[])
        #t232.{core::List::add}(#t233);
  } =>#t232;
  core::Set<core::int> set50 = block {
    final core::Set<core::int> #t234 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::int #t235 in <core::int>[])
        #t234.{core::Set::add}(#t235);
    #t234.{core::Set::add}(null);
  } =>#t234;
  core::Map<core::String, core::int> map50 = block {
    final core::Map<core::String, core::int> #t236 = <core::String, core::int>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::MapEntry<core::String, core::int> #t237 in <core::String, core::int>{}.{core::Map::entries})
        #t236.{core::Map::[]=}(#t237.{core::MapEntry::key}, #t237.{core::MapEntry::value});
    #t236.{core::Map::[]=}("baz", null);
  } =>#t236;
  core::List<core::int> list51 = block {
    final core::List<core::int> #t238 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::int #t239 in let final core::Set<core::int> #t240 = col::LinkedHashSet::•<core::int>() in #t240)
        #t238.{core::List::add}(#t239);
  } =>#t238;
  core::Set<core::int> set51 = block {
    final core::Set<core::int> #t241 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::int #t242 in let final core::Set<core::int> #t243 = col::LinkedHashSet::•<core::int>() in #t243)
        #t241.{core::Set::add}(#t242);
    #t241.{core::Set::add}(null);
  } =>#t241;
  core::List<core::int> list52 = block {
    final core::List<core::int> #t244 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::int #t245 in <core::int>[])
          #t244.{core::List::add}(#t245);
  } =>#t244;
  core::Set<core::int> set52 = block {
    final core::Set<core::int> #t246 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::int #t247 in <core::int>[])
          #t246.{core::Set::add}(#t247);
    #t246.{core::Set::add}(null);
  } =>#t246;
  core::List<core::List<core::int>> list60 = block {
    final core::List<core::List<core::int>> #t248 = <core::List<core::int>>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::List<core::int> #t249 in <core::List<core::int>>[<core::int>[]])
        #t248.{core::List::add}(#t249);
  } =>#t248;
  core::Set<core::List<core::int>> set60 = block {
    final core::Set<core::List<core::int>> #t250 = col::LinkedHashSet::•<core::List<core::int>>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::List<core::int> #t251 in <core::List<core::int>>[<core::int>[]])
        #t250.{core::Set::add}(#t251);
    #t250.{core::Set::add}(null);
  } =>#t250;
  core::Map<core::String, core::List<core::int>> map60 = block {
    final core::Map<core::String, core::List<core::int>> #t252 = <core::String, core::List<core::int>>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::MapEntry<core::String, core::List<core::int>> #t253 in <core::String, core::List<core::int>>{"bar": <core::int>[]}.{core::Map::entries})
        #t252.{core::Map::[]=}(#t253.{core::MapEntry::key}, #t253.{core::MapEntry::value});
    #t252.{core::Map::[]=}("baz", null);
  } =>#t252;
  core::List<core::List<core::int>> list61 = block {
    final core::List<core::List<core::int>> #t254 = <core::List<core::int>>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::List<core::int> #t255 in <core::List<core::int>>[<core::int>[]])
          #t254.{core::List::add}(#t255);
  } =>#t254;
  core::Set<core::List<core::int>> set61 = block {
    final core::Set<core::List<core::int>> #t256 = col::LinkedHashSet::•<core::List<core::int>>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::List<core::int> #t257 in <core::List<core::int>>[<core::int>[]])
          #t256.{core::Set::add}(#t257);
    #t256.{core::Set::add}(null);
  } =>#t256;
  core::Map<core::String, core::List<core::int>> map61 = block {
    final core::Map<core::String, core::List<core::int>> #t258 = <core::String, core::List<core::int>>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::MapEntry<core::String, core::List<core::int>> #t259 in <core::String, core::List<core::int>>{"bar": <core::int>[]}.{core::Map::entries})
          #t258.{core::Map::[]=}(#t259.{core::MapEntry::key}, #t259.{core::MapEntry::value});
    #t258.{core::Map::[]=}("baz", null);
  } =>#t258;
  core::List<core::List<core::int>> list70 = block {
    final core::List<core::List<core::int>> #t260 = <core::List<core::int>>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t260.{core::List::add}(<core::int>[]);
  } =>#t260;
  core::Set<core::List<core::int>> set70 = block {
    final core::Set<core::List<core::int>> #t261 = col::LinkedHashSet::•<core::List<core::int>>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t261.{core::Set::add}(<core::int>[]);
    #t261.{core::Set::add}(null);
  } =>#t261;
  core::Map<core::String, core::List<core::int>> map70 = block {
    final core::Map<core::String, core::List<core::int>> #t262 = <core::String, core::List<core::int>>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t262.{core::Map::[]=}("bar", <core::int>[]);
    #t262.{core::Map::[]=}("baz", null);
  } =>#t262;
  core::List<core::List<core::int>> list71 = block {
    final core::List<core::List<core::int>> #t263 = <core::List<core::int>>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        #t263.{core::List::add}(<core::int>[]);
  } =>#t263;
  core::Set<core::List<core::int>> set71 = block {
    final core::Set<core::List<core::int>> #t264 = col::LinkedHashSet::•<core::List<core::int>>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        #t264.{core::Set::add}(<core::int>[]);
    #t264.{core::Set::add}(null);
  } =>#t264;
  core::Map<core::String, core::List<core::int>> map71 = block {
    final core::Map<core::String, core::List<core::int>> #t265 = <core::String, core::List<core::int>>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        #t265.{core::Map::[]=}("bar", <core::int>[]);
    #t265.{core::Map::[]=}("baz", null);
  } =>#t265;
  core::List<core::num> list80 = block {
    final core::List<core::num> #t266 = <core::num>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        #t266.{core::List::add}(42);
      else
        #t266.{core::List::add}(3.14);
  } =>#t266;
  core::Set<core::num> set80 = block {
    final core::Set<core::num> #t267 = col::LinkedHashSet::•<core::num>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        #t267.{core::Set::add}(42);
      else
        #t267.{core::Set::add}(3.14);
    #t267.{core::Set::add}(null);
  } =>#t267;
  core::Map<core::String, core::num> map80 = block {
    final core::Map<core::String, core::num> #t268 = <core::String, core::num>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        #t268.{core::Map::[]=}("bar", 42);
      else
        #t268.{core::Map::[]=}("bar", 3.14);
    #t268.{core::Map::[]=}("baz", null);
  } =>#t268;
  core::List<core::num> list81 = block {
    final core::List<core::num> #t269 = <core::num>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::num #t270 in listInt)
          #t269.{core::List::add}(#t270);
      else
        for (final core::num #t271 in listDouble)
          #t269.{core::List::add}(#t271);
  } =>#t269;
  core::Set<core::num> set81 = block {
    final core::Set<core::num> #t272 = col::LinkedHashSet::•<core::num>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::num #t273 in listInt)
          #t272.{core::Set::add}(#t273);
      else
        for (final core::num #t274 in listDouble)
          #t272.{core::Set::add}(#t274);
    #t272.{core::Set::add}(null);
  } =>#t272;
  core::Map<core::String, core::num> map81 = block {
    final core::Map<core::String, core::num> #t275 = <core::String, core::num>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::MapEntry<core::String, core::num> #t276 in mapStringInt.{core::Map::entries})
          #t275.{core::Map::[]=}(#t276.{core::MapEntry::key}, #t276.{core::MapEntry::value});
      else
        for (final core::MapEntry<core::String, core::num> #t277 in mapStringDouble.{core::Map::entries})
          #t275.{core::Map::[]=}(#t277.{core::MapEntry::key}, #t277.{core::MapEntry::value});
    #t275.{core::Map::[]=}("baz", null);
  } =>#t275;
  core::List<dynamic> list82 = block {
    final core::List<dynamic> #t278 = <dynamic>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final dynamic #t279 in listInt)
          #t278.{core::List::add}(#t279);
      else
        for (final dynamic #t280 in dynVar as{TypeError} core::Iterable<dynamic>)
          #t278.{core::List::add}(#t280);
  } =>#t278;
  core::Set<dynamic> set82 = block {
    final core::Set<dynamic> #t281 = col::LinkedHashSet::•<dynamic>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final dynamic #t282 in listInt)
          #t281.{core::Set::add}(#t282);
      else
        for (final dynamic #t283 in dynVar as{TypeError} core::Iterable<dynamic>)
          #t281.{core::Set::add}(#t283);
    #t281.{core::Set::add}(null);
  } =>#t281;
  core::Map<dynamic, dynamic> map82 = block {
    final core::Map<dynamic, dynamic> #t284 = <dynamic, dynamic>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::MapEntry<dynamic, dynamic> #t285 in mapStringInt.{core::Map::entries})
          #t284.{core::Map::[]=}(#t285.{core::MapEntry::key}, #t285.{core::MapEntry::value});
      else
        for (final core::MapEntry<dynamic, dynamic> #t286 in (dynVar as{TypeError} core::Map<dynamic, dynamic>).{core::Map::entries})
          #t284.{core::Map::[]=}(#t286.{core::MapEntry::key}, #t286.{core::MapEntry::value});
    #t284.{core::Map::[]=}("baz", null);
  } =>#t284;
  core::List<core::num> list83 = block {
    final core::List<core::num> #t287 = <core::num>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        #t287.{core::List::add}(42);
      else
        for (final core::num #t288 in listDouble)
          #t287.{core::List::add}(#t288);
  } =>#t287;
  core::Set<core::num> set83 = block {
    final core::Set<core::num> #t289 = col::LinkedHashSet::•<core::num>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::num #t290 in listInt)
          #t289.{core::Set::add}(#t290);
      else
        #t289.{core::Set::add}(3.14);
    #t289.{core::Set::add}(null);
  } =>#t289;
  core::Map<core::String, core::num> map83 = block {
    final core::Map<core::String, core::num> #t291 = <core::String, core::num>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        for (final core::MapEntry<core::String, core::num> #t292 in mapStringInt.{core::Map::entries})
          #t291.{core::Map::[]=}(#t292.{core::MapEntry::key}, #t292.{core::MapEntry::value});
      else
        #t291.{core::Map::[]=}("bar", 3.14);
    #t291.{core::Map::[]=}("baz", null);
  } =>#t291;
  core::List<core::int> list90 = block {
    final core::List<core::int> #t293 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t293.{core::List::add}(dynVar as{TypeError} core::int);
  } =>#t293;
  core::Set<core::int> set90 = block {
    final core::Set<core::int> #t294 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t294.{core::Set::add}(dynVar as{TypeError} core::int);
    #t294.{core::Set::add}(null);
  } =>#t294;
  core::Map<core::String, core::int> map90 = block {
    final core::Map<core::String, core::int> #t295 = <core::String, core::int>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t295.{core::Map::[]=}("bar", dynVar as{TypeError} core::int);
    #t295.{core::Map::[]=}("baz", null);
  } =>#t295;
  core::List<core::int> list91 = block {
    final core::List<core::int> #t296 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final dynamic #t297 in dynVar as{TypeError} core::Iterable<dynamic>) {
        final core::int #t298 = #t297 as{TypeError} core::int;
        #t296.{core::List::add}(#t298);
      }
  } =>#t296;
  core::Set<core::int> set91 = block {
    final core::Set<core::int> #t299 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final dynamic #t300 in dynVar as{TypeError} core::Iterable<dynamic>) {
        final core::int #t301 = #t300 as{TypeError} core::int;
        #t299.{core::Set::add}(#t301);
      }
    #t299.{core::Set::add}(null);
  } =>#t299;
  core::Map<core::String, core::int> map91 = block {
    final core::Map<core::String, core::int> #t302 = <core::String, core::int>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::MapEntry<dynamic, dynamic> #t303 in (dynVar as{TypeError} core::Map<dynamic, dynamic>).{core::Map::entries}) {
        final core::String #t304 = #t303.{core::MapEntry::key} as{TypeError} core::String;
        final core::int #t305 = #t303.{core::MapEntry::value} as{TypeError} core::int;
        #t302.{core::Map::[]=}(#t304, #t305);
      }
    #t302.{core::Map::[]=}("baz", null);
  } =>#t302;
  core::List<core::int> list100 = block {
    final core::List<core::int> #t306 = <core::int>[];
    for (final core::int #t307 = index = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; index = index.{core::num::+}(1))
      #t306.{core::List::add}(42);
  } =>#t306;
  core::Set<core::int> set100 = block {
    final core::Set<core::int> #t308 = col::LinkedHashSet::•<core::int>();
    for (final core::int #t309 = index = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; index = index.{core::num::+}(1))
      #t308.{core::Set::add}(42);
  } =>#t308;
  core::Map<core::String, core::int> map100 = block {
    final core::Map<core::String, core::int> #t310 = <core::String, core::int>{};
    for (final core::int #t311 = index = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; index = index.{core::num::+}(1))
      #t310.{core::Map::[]=}("bar", 42);
  } =>#t310;
  core::List<core::int> list110 = block {
    final core::List<core::int> #t312 = <core::int>[];
    for (core::int i in <core::int>[1, 2, 3])
      #t312.{core::List::add}(i);
  } =>#t312;
  core::Set<core::int> set110 = block {
    final core::Set<core::int> #t313 = col::LinkedHashSet::•<core::int>();
    for (core::int i in <core::int>[1, 2, 3])
      #t313.{core::Set::add}(i);
    #t313.{core::Set::add}(null);
  } =>#t313;
  core::Map<core::String, core::int> map110 = block {
    final core::Map<core::String, core::int> #t314 = <core::String, core::int>{};
    for (core::int i in <core::int>[1, 2, 3])
      #t314.{core::Map::[]=}("bar", i);
    #t314.{core::Map::[]=}("baz", null);
  } =>#t314;
  core::List<core::int> list120 = block {
    final core::List<core::int> #t315 = <core::int>[];
    for (dynamic i in dynVar as{TypeError} core::Iterable<dynamic>)
      #t315.{core::List::add}(i as{TypeError} core::int);
  } =>#t315;
  core::Set<core::int> set120 = block {
    final core::Set<core::int> #t316 = col::LinkedHashSet::•<core::int>();
    for (dynamic i in dynVar as{TypeError} core::Iterable<dynamic>)
      #t316.{core::Set::add}(i as{TypeError} core::int);
    #t316.{core::Set::add}(null);
  } =>#t316;
  core::Map<core::String, core::int> map120 = block {
    final core::Map<core::String, core::int> #t317 = <core::String, core::int>{};
    for (dynamic i in dynVar as{TypeError} core::Iterable<dynamic>)
      #t317.{core::Map::[]=}("bar", i as{TypeError} core::int);
    #t317.{core::Map::[]=}("baz", null);
  } =>#t317;
  core::List<core::int> list130 = block {
    final core::List<core::int> #t318 = <core::int>[];
    for (core::int i = 1; i.{core::num::<}(2); i = i.{core::num::+}(1))
      #t318.{core::List::add}(i);
  } =>#t318;
  core::Set<core::int> set130 = block {
    final core::Set<core::int> #t319 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 1; i.{core::num::<}(2); i = i.{core::num::+}(1))
      #t319.{core::Set::add}(i);
  } =>#t319;
  core::Map<core::int, core::int> map130 = block {
    final core::Map<core::int, core::int> #t320 = <core::int, core::int>{};
    for (core::int i = 1; i.{core::num::<}(2); i = i.{core::num::+}(1))
      #t320.{core::Map::[]=}(i, i);
  } =>#t320;
}
static method testForElementErrors(core::Map<core::int, core::int> map, core::List<core::int> list) → dynamic async {
  <core::int>[invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:206:45: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int>[for (int i = 0; oracle(\"foo\"); i++) \"bar\"];
                                            ^"];
  let final core::Set<core::int> #t321 = col::LinkedHashSet::•<core::int>() in let final dynamic #t322 = #t321.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:207:45: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int>{for (int i = 0; oracle(\"foo\"); i++) \"bar\", null};
                                            ^") in let final dynamic #t323 = #t321.{core::Set::add}(null) in #t321;
  <core::int, core::int>{invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:208:14: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int, int>{for (int i = 0; oracle(\"foo\"); i++) \"bar\": \"bar\", \"baz\": null};
             ^": invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:208:14: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int, int>{for (int i = 0; oracle(\"foo\"); i++) \"bar\": \"bar\", \"baz\": null};
             ^", let final<BottomType> #t324 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:208:64: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int, int>{for (int i = 0; oracle(\"foo\"); i++) \"bar\": \"bar\", \"baz\": null};
                                                               ^" in "baz" as{TypeError} core::int: null};
  block {
    final core::List<core::int> #t325 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::int #t326 in <core::int>[let final<BottomType> #t327 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:209:49: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int>[for (int i = 0; oracle(\"foo\"); i++) ...[\"bar\"]];
                                                ^" in "bar" as{TypeError} core::int])
        #t325.{core::List::add}(#t326);
  } =>#t325;
  block {
    final core::Set<core::int> #t328 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::int #t329 in <core::int>[let final<BottomType> #t330 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:210:49: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int>{for (int i = 0; oracle(\"foo\"); i++) ...[\"bar\"], null};
                                                ^" in "bar" as{TypeError} core::int])
        #t328.{core::Set::add}(#t329);
    #t328.{core::Set::add}(null);
  } =>#t328;
  block {
    final core::Map<core::int, core::int> #t331 = <core::int, core::int>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::MapEntry<core::int, core::int> #t332 in <core::int, core::int>{let final<BottomType> #t333 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:211:54: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int, int>{for (int i = 0; oracle(\"foo\"); i++) ...{\"bar\": \"bar\"}, \"baz\": null};
                                                     ^" in "bar" as{TypeError} core::int: let final<BottomType> #t334 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:211:61: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int, int>{for (int i = 0; oracle(\"foo\"); i++) ...{\"bar\": \"bar\"}, \"baz\": null};
                                                            ^" in "bar" as{TypeError} core::int}.{core::Map::entries})
        #t331.{core::Map::[]=}(#t332.{core::MapEntry::key}, #t332.{core::MapEntry::value});
    #t331.{core::Map::[]=}(let final<BottomType> #t335 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:211:69: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int, int>{for (int i = 0; oracle(\"foo\"); i++) ...{\"bar\": \"bar\"}, \"baz\": null};
                                                                    ^" in "baz" as{TypeError} core::int, null);
  } =>#t331;
  block {
    final core::List<core::int> #t336 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t336.{core::List::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:212:48: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>[for (int i = 0; oracle(\"foo\"); i++) ...map];
                                               ^" as{TypeError} core::int);
  } =>#t336;
  block {
    final core::Set<core::int> #t337 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t337.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:213:48: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>{for (int i = 0; oracle(\"foo\"); i++) ...map, null};
                                               ^" as{TypeError} core::int);
    #t337.{core::Set::add}(null);
  } =>#t337;
  <core::int, core::int>{invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:214:53: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
 - 'List' is from 'dart:core'.
  <int, int>{for (int i = 0; oracle(\"foo\"); i++) ...list, 42: null};
                                                    ^": null, invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:214:53: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
 - 'List' is from 'dart:core'.
  <int, int>{for (int i = 0; oracle(\"foo\"); i++) ...list, 42: null};
                                                    ^": null};
  <core::String>[invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:215:48: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
Try changing the type of the left hand side, or casting the right hand side to 'String'.
  <String>[for (int i = 0; oracle(\"foo\"); i++) if (oracle()) 42 else 3.14];
                                               ^"];
  let final core::Set<core::String> #t338 = col::LinkedHashSet::•<core::String>() in let final dynamic #t339 = #t338.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:216:48: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
Try changing the type of the left hand side, or casting the right hand side to 'String'.
  <String>{for (int i = 0; oracle(\"foo\"); i++) if (oracle()) 42 else 3.14, null};
                                               ^") in let final dynamic #t340 = #t338.{core::Set::add}(null) in #t338;
  <core::String, core::String>{null: invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:217:20: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
Try changing the type of the left hand side, or casting the right hand side to 'String'.
  <String, String>{for (int i = 0; oracle(\"foo\"); i++) if (oracle()) \"bar\": 42 else \"bar\": 3.14, \"baz\": null};
                   ^", "baz": null};
  block {
    final core::List<core::int> #t341 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        #t341.{core::List::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:218:62: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>[for (int i = 0; oracle(\"foo\"); i++) if (oracle()) ...map else 42];
                                                             ^" as{TypeError} core::int);
      else
        #t341.{core::List::add}(42 as{TypeError} core::int);
  } =>#t341;
  block {
    final core::Set<core::int> #t342 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        #t342.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:219:62: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>{for (int i = 0; oracle(\"foo\"); i++) if (oracle()) ...map else 42, null};
                                                             ^" as{TypeError} core::int);
      else
        #t342.{core::Set::add}(42 as{TypeError} core::int);
    #t342.{core::Set::add}(null);
  } =>#t342;
  <core::String, core::int>{invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:220:70: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
 - 'List' is from 'dart:core'.
  <String, int>{for (int i = 0; oracle(\"foo\"); i++) if (oracle()) ...list else \"bar\": 42, \"baz\": null};
                                                                     ^": null, invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:220:70: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
 - 'List' is from 'dart:core'.
  <String, int>{for (int i = 0; oracle(\"foo\"); i++) if (oracle()) ...list else \"bar\": 42, \"baz\": null};
                                                                     ^": null};
  block {
    final core::List<core::int> #t343 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        #t343.{core::List::add}(42 as{TypeError} core::int);
      else
        #t343.{core::List::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:221:70: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>[for (int i = 0; oracle(\"foo\"); i++) if (oracle()) 42 else ...map];
                                                                     ^" as{TypeError} core::int);
  } =>#t343;
  block {
    final core::Set<core::int> #t344 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>() as{TypeError} core::bool)
        #t344.{core::Set::add}(42 as{TypeError} core::int);
      else
        #t344.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:222:70: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>{for (int i = 0; oracle(\"foo\"); i++) if (oracle()) 42 else ...map, null};
                                                                     ^" as{TypeError} core::int);
    #t344.{core::Set::add}(null);
  } =>#t344;
  <core::String, core::int>{invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:223:85: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
 - 'List' is from 'dart:core'.
  <String, int>{for (int i = 0; oracle(\"foo\"); i++) if (oracle()) \"bar\": 42 else ...list, \"baz\": null};
                                                                                    ^": null, invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:223:85: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
 - 'List' is from 'dart:core'.
  <String, int>{for (int i = 0; oracle(\"foo\"); i++) if (oracle()) \"bar\": 42 else ...list, \"baz\": null};
                                                                                    ^": null};
  final core::int i = 0;
  block {
    final core::List<core::int> #t345 = <core::int>[];
    for (final core::int #t346 in <core::int>[1]) {
      invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:226:14: Error: Setter not found: 'i'.
  <int>[for (i in <int>[1]) i];
             ^";
      #t345.{core::List::add}(i);
    }
  } =>#t345;
  block {
    final core::Set<core::int> #t347 = col::LinkedHashSet::•<core::int>();
    for (final core::int #t348 in <core::int>[1]) {
      invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:227:14: Error: Setter not found: 'i'.
  <int>{for (i in <int>[1]) i, null};
             ^";
      #t347.{core::Set::add}(i);
    }
    #t347.{core::Set::add}(null);
  } =>#t347;
  block {
    final core::Map<core::String, core::int> #t349 = <core::String, core::int>{};
    for (final core::int #t350 in <core::int>[1]) {
      invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:228:21: Error: Setter not found: 'i'.
\t<String, int>{for (i in <int>[1]) \"bar\": i, \"baz\": null};
\t                   ^";
      #t349.{core::Map::[]=}("bar", i);
    }
    #t349.{core::Map::[]=}("baz", null);
  } =>#t349;
  core::List<dynamic> list10 = block {
    final core::List<dynamic> #t351 = <dynamic>[];
    for (dynamic i in let final<BottomType> #t352 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:230:31: Error: The type 'String' used in the 'for' loop must implement 'Iterable<dynamic>'.
 - 'Iterable' is from 'dart:core'.
  var list10 = [for (var i in \"not iterable\") i];
                              ^" in "not iterable" as{TypeError} core::Iterable<dynamic>)
      #t351.{core::List::add}(i);
  } =>#t351;
  core::Set<dynamic> set10 = block {
    final core::Set<dynamic> #t353 = col::LinkedHashSet::•<dynamic>();
    for (dynamic i in let final<BottomType> #t354 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:231:30: Error: The type 'String' used in the 'for' loop must implement 'Iterable<dynamic>'.
 - 'Iterable' is from 'dart:core'.
  var set10 = {for (var i in \"not iterable\") i, null};
                             ^" in "not iterable" as{TypeError} core::Iterable<dynamic>)
      #t353.{core::Set::add}(i);
    #t353.{core::Set::add}(null);
  } =>#t353;
  core::Map<core::String, dynamic> map10 = block {
    final core::Map<core::String, dynamic> #t355 = <core::String, dynamic>{};
    for (dynamic i in let final<BottomType> #t356 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:232:30: Error: The type 'String' used in the 'for' loop must implement 'Iterable<dynamic>'.
 - 'Iterable' is from 'dart:core'.
  var map10 = {for (var i in \"not iterable\") \"bar\": i, \"baz\": null};
                             ^" in "not iterable" as{TypeError} core::Iterable<dynamic>)
      #t355.{core::Map::[]=}("bar", i);
    #t355.{core::Map::[]=}("baz", null);
  } =>#t355;
  core::List<core::int> list20 = block {
    final core::List<core::int> #t357 = <core::int>[];
    for (core::int i in <core::int>[let final<BottomType> #t358 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:233:32: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var list20 = [for (int i in [\"not\", \"int\"]) i];
                               ^" in "not" as{TypeError} core::int, let final<BottomType> #t359 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:233:39: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var list20 = [for (int i in [\"not\", \"int\"]) i];
                                      ^" in "int" as{TypeError} core::int])
      #t357.{core::List::add}(i);
  } =>#t357;
  core::Set<core::int> set20 = block {
    final core::Set<core::int> #t360 = col::LinkedHashSet::•<core::int>();
    for (core::int i in <core::int>[let final<BottomType> #t361 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:234:31: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var set20 = {for (int i in [\"not\", \"int\"]) i, null};
                              ^" in "not" as{TypeError} core::int, let final<BottomType> #t362 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:234:38: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var set20 = {for (int i in [\"not\", \"int\"]) i, null};
                                     ^" in "int" as{TypeError} core::int])
      #t360.{core::Set::add}(i);
    #t360.{core::Set::add}(null);
  } =>#t360;
  core::Map<core::String, core::int> map20 = block {
    final core::Map<core::String, core::int> #t363 = <core::String, core::int>{};
    for (core::int i in <core::int>[let final<BottomType> #t364 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:235:31: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var map20 = {for (int i in [\"not\", \"int\"]) \"bar\": i, \"baz\": null};
                              ^" in "not" as{TypeError} core::int, let final<BottomType> #t365 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:235:38: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var map20 = {for (int i in [\"not\", \"int\"]) \"bar\": i, \"baz\": null};
                                     ^" in "int" as{TypeError} core::int])
      #t363.{core::Map::[]=}("bar", i);
    #t363.{core::Map::[]=}("baz", null);
  } =>#t363;
  core::List<dynamic> list30 = block {
    final core::List<dynamic> #t366 = <dynamic>[];
    await for (dynamic i in let final<BottomType> #t367 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:236:37: Error: The type 'String' used in the 'for' loop must implement 'Stream<dynamic>'.
 - 'Stream' is from 'dart:async'.
  var list30 = [await for (var i in \"not stream\") i];
                                    ^" in "not stream" as{TypeError} asy::Stream<dynamic>)
      #t366.{core::List::add}(i);
  } =>#t366;
  core::Set<dynamic> set30 = block {
    final core::Set<dynamic> #t368 = col::LinkedHashSet::•<dynamic>();
    await for (dynamic i in let final<BottomType> #t369 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:237:36: Error: The type 'String' used in the 'for' loop must implement 'Stream<dynamic>'.
 - 'Stream' is from 'dart:async'.
  var set30 = {await for (var i in \"not stream\") i, null};
                                   ^" in "not stream" as{TypeError} asy::Stream<dynamic>)
      #t368.{core::Set::add}(i);
    #t368.{core::Set::add}(null);
  } =>#t368;
  core::Map<core::String, dynamic> map30 = block {
    final core::Map<core::String, dynamic> #t370 = <core::String, dynamic>{};
    await for (dynamic i in let final<BottomType> #t371 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:238:36: Error: The type 'String' used in the 'for' loop must implement 'Stream<dynamic>'.
 - 'Stream' is from 'dart:async'.
  var map30 = {await for (var i in \"not stream\") \"bar\": i, \"baz\": null};
                                   ^" in "not stream" as{TypeError} asy::Stream<dynamic>)
      #t370.{core::Map::[]=}("bar", i);
    #t370.{core::Map::[]=}("baz", null);
  } =>#t370;
  core::List<core::int> list40 = block {
    final core::List<core::int> #t372 = <core::int>[];
    await for (core::int i in asy::Stream::fromIterable<core::int>(<core::int>[let final<BottomType> #t373 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:239:58: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var list40 = [await for (int i in Stream.fromIterable([\"not\", \"int\"])) i];
                                                         ^" in "not" as{TypeError} core::int, let final<BottomType> #t374 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:239:65: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var list40 = [await for (int i in Stream.fromIterable([\"not\", \"int\"])) i];
                                                                ^" in "int" as{TypeError} core::int]))
      #t372.{core::List::add}(i);
  } =>#t372;
  core::Set<core::int> set40 = block {
    final core::Set<core::int> #t375 = col::LinkedHashSet::•<core::int>();
    await for (core::int i in asy::Stream::fromIterable<core::int>(<core::int>[let final<BottomType> #t376 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:240:57: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var set40 = {await for (int i in Stream.fromIterable([\"not\", \"int\"])) i, null};
                                                        ^" in "not" as{TypeError} core::int, let final<BottomType> #t377 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:240:64: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var set40 = {await for (int i in Stream.fromIterable([\"not\", \"int\"])) i, null};
                                                               ^" in "int" as{TypeError} core::int]))
      #t375.{core::Set::add}(i);
    #t375.{core::Set::add}(null);
  } =>#t375;
  core::Map<core::String, core::int> map40 = block {
    final core::Map<core::String, core::int> #t378 = <core::String, core::int>{};
    await for (core::int i in asy::Stream::fromIterable<core::int>(<core::int>[let final<BottomType> #t379 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:241:57: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var map40 = {await for (int i in Stream.fromIterable([\"not\", \"int\"])) \"bar\": i, \"baz\": null};
                                                        ^" in "not" as{TypeError} core::int, let final<BottomType> #t380 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:241:64: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var map40 = {await for (int i in Stream.fromIterable([\"not\", \"int\"])) \"bar\": i, \"baz\": null};
                                                               ^" in "int" as{TypeError} core::int]))
      #t378.{core::Map::[]=}("bar", i);
    #t378.{core::Map::[]=}("baz", null);
  } =>#t378;
  core::List<core::int> list50 = block {
    final core::List<core::int> #t381 = <core::int>[];
    for (; ; )
      #t381.{core::List::add}(42);
  } =>#t381;
  core::Set<core::int> set50 = block {
    final core::Set<core::int> #t382 = col::LinkedHashSet::•<core::int>();
    for (; ; )
      #t382.{core::Set::add}(42);
    #t382.{core::Set::add}(null);
  } =>#t382;
  core::Map<core::String, core::int> map50 = block {
    final core::Map<core::String, core::int> #t383 = <core::String, core::int>{};
    for (; ; )
      #t383.{core::Map::[]=}("bar", 42);
    #t383.{core::Map::[]=}("baz", null);
  } =>#t383;
  core::List<core::int> list60 = block {
    final core::List<core::int> #t384 = <core::int>[];
    for (; let final<BottomType> #t385 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:245:24: Error: A value of type 'String' can't be assigned to a variable of type 'bool'.
Try changing the type of the left hand side, or casting the right hand side to 'bool'.
  var list60 = [for (; \"not bool\";) 42];
                       ^" in "not bool" as{TypeError} core::bool; )
      #t384.{core::List::add}(42);
  } =>#t384;
  core::Set<core::int> set60 = block {
    final core::Set<core::int> #t386 = col::LinkedHashSet::•<core::int>();
    for (; let final<BottomType> #t387 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:246:23: Error: A value of type 'String' can't be assigned to a variable of type 'bool'.
Try changing the type of the left hand side, or casting the right hand side to 'bool'.
  var set60 = {for (; \"not bool\";) 42, null};
                      ^" in "not bool" as{TypeError} core::bool; )
      #t386.{core::Set::add}(42);
    #t386.{core::Set::add}(null);
  } =>#t386;
  core::Map<core::String, core::int> map60 = block {
    final core::Map<core::String, core::int> #t388 = <core::String, core::int>{};
    for (; let final<BottomType> #t389 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:247:23: Error: A value of type 'String' can't be assigned to a variable of type 'bool'.
Try changing the type of the left hand side, or casting the right hand side to 'bool'.
  var map60 = {for (; \"not bool\";) \"bar\": 42, \"baz\": null};
                      ^" in "not bool" as{TypeError} core::bool; )
      #t388.{core::Map::[]=}("bar", 42);
    #t388.{core::Map::[]=}("baz", null);
  } =>#t388;
}
static method testForElementErrorsNotAsync(asy::Stream<core::int> stream) → dynamic {
  block {
    final core::List<core::int> #t390 = <core::int>[];
    await for (core::int i in stream)
      #t390.{core::List::add}(i);
  } =>#t390;
  block {
    final core::Set<core::int> #t391 = col::LinkedHashSet::•<core::int>();
    await for (core::int i in stream)
      #t391.{core::Set::add}(i);
  } =>#t391;
  block {
    final core::Map<core::String, core::int> #t392 = <core::String, core::int>{};
    await for (core::int i in stream)
      #t392.{core::Map::[]=}("bar", i);
  } =>#t392;
}
static method testPromotion(self::A a) → dynamic {
  core::List<core::int> list10 = block {
    final core::List<core::int> #t393 = <core::int>[];
    if(a is self::B)
      #t393.{core::List::add}(a{self::B}.{self::B::foo});
  } =>#t393;
  core::Set<core::int> set10 = block {
    final core::Set<core::int> #t394 = col::LinkedHashSet::•<core::int>();
    if(a is self::B)
      #t394.{core::Set::add}(a{self::B}.{self::B::foo});
  } =>#t394;
  core::Map<core::int, core::int> map10 = block {
    final core::Map<core::int, core::int> #t395 = <core::int, core::int>{};
    if(a is self::B)
      #t395.{core::Map::[]=}(a{self::B}.{self::B::foo}, a{self::B}.{self::B::foo});
  } =>#t395;
}
static method main() → dynamic {}

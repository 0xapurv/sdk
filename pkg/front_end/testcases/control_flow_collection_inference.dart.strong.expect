library;
//
// Problems in library:
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:39:34: Error: Both Iterable and Map spread elements encountered in ambiguous literal.
//   Map<String, List<int>> map40 = {if (oracle("foo")) ...{"bar", []}, "baz": null};
//                                  ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:84:28: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int>[if (oracle("foo")) "bar"];
//                            ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:85:28: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int>{if (oracle("foo")) "bar", null};
//                            ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:86:43: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <String, int>{if (oracle("foo")) "bar": "bar", "baz": null};
//                                           ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:86:41: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <String, int>{if (oracle("foo")) "bar": "bar", "baz": null};
//                                         ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:87:32: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int>[if (oracle("foo")) ...["bar"]];
//                                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:88:32: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int>{if (oracle("foo")) ...["bar"], null};
//                                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:89:47: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <String, int>{if (oracle("foo")) ...{"bar": "bar"}, "baz": null};
//                                               ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:90:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>[if (oracle("foo")) ...map];
//                               ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:91:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>{if (oracle("foo")) ...map, null};
//                               ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:92:39: Error: Unexpected type 'List<String>' of a map spread entry.  Expected 'dynamic' or a Map.
//  - 'List' is from 'dart:core'.
//   <String, int>{if (oracle("foo")) ...["bar"], "baz": null};
//                                       ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:93:12: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
// Try changing the type of the left hand side, or casting the right hand side to 'String'.
//   <String>[if (oracle("foo")) 42 else 3.14];
//            ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:94:12: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
// Try changing the type of the left hand side, or casting the right hand side to 'String'.
//   <String>{if (oracle("foo")) 42 else 3.14, null};
//            ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:95:46: Error: A value of type 'int' can't be assigned to a variable of type 'String'.
// Try changing the type of the left hand side, or casting the right hand side to 'String'.
//   <String, String>{if (oracle("foo")) "bar": 42 else "baz": 3.14, "baz": null};
//                                              ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:95:61: Error: A value of type 'double' can't be assigned to a variable of type 'String'.
// Try changing the type of the left hand side, or casting the right hand side to 'String'.
//   <String, String>{if (oracle("foo")) "bar": 42 else "baz": 3.14, "baz": null};
//                                                             ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:95:20: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
// Try changing the type of the left hand side, or casting the right hand side to 'String'.
//   <String, String>{if (oracle("foo")) "bar": 42 else "baz": 3.14, "baz": null};
//                    ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:96:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>[if (oracle("foo")) ...map else 42];
//                               ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:97:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>{if (oracle("foo")) ...map else 42, null};
//                               ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:98:39: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
//  - 'List' is from 'dart:core'.
//   <String, int>{if (oracle("foo")) ...[42] else "bar": 42, "baz": null};
//                                       ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:99:39: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>[if (oracle("foo")) 42 else ...map];
//                                       ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:100:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>{if (oracle("foo")) ...map else 42, null};
//                               ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:101:54: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
//  - 'List' is from 'dart:core'.
//   <String, int>{if (oracle("foo")) "bar": 42 else ...[42], "baz": null};
//                                                      ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:210:14: Error: Setter not found: 'i'.
//   <int>[for (i in <int>[1]) i];
//              ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:211:14: Error: Setter not found: 'i'.
//   <int>{for (i in <int>[1]) i, null};
//              ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:212:21: Error: Setter not found: 'i'.
// 	<String, int>{for (i in <int>[1]) "bar": i, "baz": null};
// 	                   ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:226:17: Error: The keyword 'await' isn't allowed for a normal 'for' statement.
// Try removing the keyword, or use a for-each statement.
//   var list50 = [await for (;;) 42];
//                 ^^^^^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:227:16: Error: The keyword 'await' isn't allowed for a normal 'for' statement.
// Try removing the keyword, or use a for-each statement.
//   var set50 = {await for (;;) 42, null};
//                ^^^^^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:228:16: Error: The keyword 'await' isn't allowed for a normal 'for' statement.
// Try removing the keyword, or use a for-each statement.
//   var map50 = {await for (;;) "bar": 42, "baz": null};
//                ^^^^^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:190:45: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int>[for (int i = 0; oracle("foo"); i++) "bar"];
//                                             ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:191:45: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int>{for (int i = 0; oracle("foo"); i++) "bar", null};
//                                             ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:192:50: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int, int>{for (int i = 0; oracle("foo"); i++) "bar": "bar", "baz": null};
//                                                  ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:192:57: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int, int>{for (int i = 0; oracle("foo"); i++) "bar": "bar", "baz": null};
//                                                         ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:192:64: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int, int>{for (int i = 0; oracle("foo"); i++) "bar": "bar", "baz": null};
//                                                                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:192:14: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int, int>{for (int i = 0; oracle("foo"); i++) "bar": "bar", "baz": null};
//              ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:193:49: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int>[for (int i = 0; oracle("foo"); i++) ...["bar"]];
//                                                 ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:194:49: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int>{for (int i = 0; oracle("foo"); i++) ...["bar"], null};
//                                                 ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:195:54: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int, int>{for (int i = 0; oracle("foo"); i++) ...{"bar": "bar"}, "baz": null};
//                                                      ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:195:61: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int, int>{for (int i = 0; oracle("foo"); i++) ...{"bar": "bar"}, "baz": null};
//                                                             ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:195:69: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   <int, int>{for (int i = 0; oracle("foo"); i++) ...{"bar": "bar"}, "baz": null};
//                                                                     ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:196:48: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>[for (int i = 0; oracle("foo"); i++) ...map];
//                                                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:197:48: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>{for (int i = 0; oracle("foo"); i++) ...map, null};
//                                                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:198:53: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
//  - 'List' is from 'dart:core'.
//   <int, int>{for (int i = 0; oracle("foo"); i++) ...list, 42: null};
//                                                     ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:199:48: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
// Try changing the type of the left hand side, or casting the right hand side to 'String'.
//   <String>[for (int i = 0; oracle("foo"); i++) if (oracle()) 42 else 3.14];
//                                                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:200:48: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
// Try changing the type of the left hand side, or casting the right hand side to 'String'.
//   <String>{for (int i = 0; oracle("foo"); i++) if (oracle()) 42 else 3.14, null};
//                                                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:201:77: Error: A value of type 'int' can't be assigned to a variable of type 'String'.
// Try changing the type of the left hand side, or casting the right hand side to 'String'.
//   <String, String>{for (int i = 0; oracle("foo"); i++) if (oracle()) "bar": 42 else "bar": 3.14, "baz": null};
//                                                                             ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:201:92: Error: A value of type 'double' can't be assigned to a variable of type 'String'.
// Try changing the type of the left hand side, or casting the right hand side to 'String'.
//   <String, String>{for (int i = 0; oracle("foo"); i++) if (oracle()) "bar": 42 else "bar": 3.14, "baz": null};
//                                                                                            ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:201:20: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
// Try changing the type of the left hand side, or casting the right hand side to 'String'.
//   <String, String>{for (int i = 0; oracle("foo"); i++) if (oracle()) "bar": 42 else "bar": 3.14, "baz": null};
//                    ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:202:62: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>[for (int i = 0; oracle("foo"); i++) if (oracle()) ...map else 42];
//                                                              ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:203:62: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>{for (int i = 0; oracle("foo"); i++) if (oracle()) ...map else 42, null};
//                                                              ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:204:70: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
//  - 'List' is from 'dart:core'.
//   <String, int>{for (int i = 0; oracle("foo"); i++) if (oracle()) ...list else "bar": 42, "baz": null};
//                                                                      ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:205:70: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>[for (int i = 0; oracle("foo"); i++) if (oracle()) 42 else ...map];
//                                                                      ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:206:70: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>{for (int i = 0; oracle("foo"); i++) if (oracle()) 42 else ...map, null};
//                                                                      ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:207:85: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
//  - 'List' is from 'dart:core'.
//   <String, int>{for (int i = 0; oracle("foo"); i++) if (oracle()) "bar": 42 else ...list, "baz": null};
//                                                                                     ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:214:31: Error: The type 'String' used in the 'for' loop must implement 'Iterable<dynamic>'.
//  - 'Iterable' is from 'dart:core'.
//   var list10 = [for (var i in "not iterable") i];
//                               ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:215:30: Error: The type 'String' used in the 'for' loop must implement 'Iterable<dynamic>'.
//  - 'Iterable' is from 'dart:core'.
//   var set10 = {for (var i in "not iterable") i, null};
//                              ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:216:30: Error: The type 'String' used in the 'for' loop must implement 'Iterable<dynamic>'.
//  - 'Iterable' is from 'dart:core'.
//   var map10 = {for (var i in "not iterable") "bar": i, "baz": null};
//                              ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:217:32: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var list20 = [for (int i in ["not", "int"]) i];
//                                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:217:39: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var list20 = [for (int i in ["not", "int"]) i];
//                                       ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:218:31: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var set20 = {for (int i in ["not", "int"]) i, null};
//                               ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:218:38: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var set20 = {for (int i in ["not", "int"]) i, null};
//                                      ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:219:31: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var map20 = {for (int i in ["not", "int"]) "bar": i, "baz": null};
//                               ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:219:38: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var map20 = {for (int i in ["not", "int"]) "bar": i, "baz": null};
//                                      ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:220:37: Error: The type 'String' used in the 'for' loop must implement 'Stream<dynamic>'.
//  - 'Stream' is from 'dart:async'.
//   var list30 = [await for (var i in "not stream") i];
//                                     ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:221:36: Error: The type 'String' used in the 'for' loop must implement 'Stream<dynamic>'.
//  - 'Stream' is from 'dart:async'.
//   var set30 = {await for (var i in "not stream") i, null};
//                                    ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:222:36: Error: The type 'String' used in the 'for' loop must implement 'Stream<dynamic>'.
//  - 'Stream' is from 'dart:async'.
//   var map30 = {await for (var i in "not stream") "bar": i, "baz": null};
//                                    ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:223:58: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var list40 = [await for (int i in Stream.fromIterable(["not", "int"])) i];
//                                                          ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:223:65: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var list40 = [await for (int i in Stream.fromIterable(["not", "int"])) i];
//                                                                 ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:224:57: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var set40 = {await for (int i in Stream.fromIterable(["not", "int"])) i, null};
//                                                         ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:224:64: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var set40 = {await for (int i in Stream.fromIterable(["not", "int"])) i, null};
//                                                                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:225:57: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var map40 = {await for (int i in Stream.fromIterable(["not", "int"])) "bar": i, "baz": null};
//                                                         ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:225:64: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
// Try changing the type of the left hand side, or casting the right hand side to 'int'.
//   var map40 = {await for (int i in Stream.fromIterable(["not", "int"])) "bar": i, "baz": null};
//                                                                ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:229:24: Error: A value of type 'String' can't be assigned to a variable of type 'bool'.
// Try changing the type of the left hand side, or casting the right hand side to 'bool'.
//   var list60 = [for (; "not bool";) 42];
//                        ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:230:23: Error: A value of type 'String' can't be assigned to a variable of type 'bool'.
// Try changing the type of the left hand side, or casting the right hand side to 'bool'.
//   var set60 = {for (; "not bool";) 42, null};
//                       ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:231:23: Error: A value of type 'String' can't be assigned to a variable of type 'bool'.
// Try changing the type of the left hand side, or casting the right hand side to 'bool'.
//   var map60 = {for (; "not bool";) "bar": 42, "baz": null};
//                       ^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:235:26: Error: The asynchronous for-in can only be used in functions marked with 'async' or 'async*'.
// Try marking the function body with either 'async' or 'async*', or removing the 'await' before the for loop.
//   <int>[await for (int i in stream) i];
//                          ^^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:236:26: Error: The asynchronous for-in can only be used in functions marked with 'async' or 'async*'.
// Try marking the function body with either 'async' or 'async*', or removing the 'await' before the for loop.
//   <int>{await for (int i in stream) i};
//                          ^^
//
// pkg/front_end/testcases/control_flow_collection_inference.dart:237:34: Error: The asynchronous for-in can only be used in functions marked with 'async' or 'async*'.
// Try marking the function body with either 'async' or 'async*', or removing the 'await' before the for loop.
//   <String, int>{await for (int i in stream) "bar": i};
//                                  ^^
//
import self as self;
import "dart:core" as core;
import "dart:collection" as col;
import "dart:async" as asy;

static method oracle<T extends core::Object = dynamic>([self::oracle::T t = null]) → dynamic
  return true;
static method testIfElement(dynamic dynVar, core::List<core::int> listInt, core::List<core::double> listDouble, core::Map<core::String, core::int> mapToInt, core::Map<core::String, core::double> mapToDouble) → dynamic {
  core::List<core::int> list10 = block {
    final core::List<core::int> #t1 = <core::int>[];
    if(self::oracle<core::String>("foo"))
      #t1.{core::List::add}(42);
  } =>#t1;
  core::Set<core::int> set10 = block {
    final core::Set<core::int> #t2 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo"))
      #t2.{core::Set::add}(42);
    #t2.{core::Set::add}(null);
  } =>#t2;
  core::Map<core::String, core::int> map10 = block {
    final core::Map<core::String, core::int> #t3 = <core::String, core::int>{};
    if(self::oracle<core::String>("foo"))
      #t3.{core::Map::[]=}("bar", 42);
    #t3.{core::Map::[]=}("baz", null);
  } =>#t3;
  core::List<dynamic> list11 = block {
    final core::List<dynamic> #t4 = <dynamic>[];
    if(self::oracle<core::String>("foo"))
      #t4.{core::List::add}(dynVar);
  } =>#t4;
  core::Set<dynamic> set11 = block {
    final core::Set<dynamic> #t5 = col::LinkedHashSet::•<dynamic>();
    if(self::oracle<core::String>("foo"))
      #t5.{core::Set::add}(dynVar);
    #t5.{core::Set::add}(null);
  } =>#t5;
  core::Map<core::String, dynamic> map11 = block {
    final core::Map<core::String, dynamic> #t6 = <core::String, dynamic>{};
    if(self::oracle<core::String>("foo"))
      #t6.{core::Map::[]=}("bar", dynVar);
    #t6.{core::Map::[]=}("baz", null);
  } =>#t6;
  core::List<core::List<core::int>> list12 = block {
    final core::List<core::List<core::int>> #t7 = <core::List<core::int>>[];
    if(self::oracle<core::String>("foo"))
      #t7.{core::List::add}(<core::int>[42]);
  } =>#t7;
  core::Set<core::List<core::int>> set12 = block {
    final core::Set<core::List<core::int>> #t8 = col::LinkedHashSet::•<core::List<core::int>>();
    if(self::oracle<core::String>("foo"))
      #t8.{core::Set::add}(<core::int>[42]);
    #t8.{core::Set::add}(null);
  } =>#t8;
  core::Map<core::String, core::List<core::int>> map12 = block {
    final core::Map<core::String, core::List<core::int>> #t9 = <core::String, core::List<core::int>>{};
    if(self::oracle<core::String>("foo"))
      #t9.{core::Map::[]=}("bar", <core::int>[42]);
    #t9.{core::Map::[]=}("baz", null);
  } =>#t9;
  core::List<core::int> list20 = block {
    final core::List<core::int> #t10 = <core::int>[];
    if(self::oracle<core::String>("foo"))
      for (final core::int #t11 in <core::int>[42])
        #t10.{core::List::add}(#t11);
  } =>#t10;
  core::Set<core::int> set20 = block {
    final core::Set<core::int> #t12 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo"))
      for (final core::int #t13 in <core::int>[42])
        #t12.{core::Set::add}(#t13);
    #t12.{core::Set::add}(null);
  } =>#t12;
  core::Map<core::String, core::int> map20 = block {
    final core::Map<core::String, core::int> #t14 = <core::String, core::int>{};
    if(self::oracle<core::String>("foo"))
      for (final core::MapEntry<core::String, core::int> #t15 in <core::String, core::int>{"bar": 42}.{core::Map::entries})
        #t14.{core::Map::[]=}(#t15.{core::MapEntry::key}, #t15.{core::MapEntry::value});
    #t14.{core::Map::[]=}("baz", null);
  } =>#t14;
  core::List<dynamic> list21 = block {
    final core::List<dynamic> #t16 = <dynamic>[];
    if(self::oracle<core::String>("foo"))
      for (final dynamic #t17 in <dynamic>[dynVar])
        #t16.{core::List::add}(#t17);
  } =>#t16;
  core::Set<dynamic> set21 = block {
    final core::Set<dynamic> #t18 = col::LinkedHashSet::•<dynamic>();
    if(self::oracle<core::String>("foo"))
      for (final dynamic #t19 in <dynamic>[dynVar])
        #t18.{core::Set::add}(#t19);
    #t18.{core::Set::add}(null);
  } =>#t18;
  core::Map<core::String, dynamic> map21 = block {
    final core::Map<core::String, dynamic> #t20 = <core::String, dynamic>{};
    if(self::oracle<core::String>("foo"))
      for (final core::MapEntry<core::String, dynamic> #t21 in <core::String, dynamic>{"bar": dynVar}.{core::Map::entries})
        #t20.{core::Map::[]=}(#t21.{core::MapEntry::key}, #t21.{core::MapEntry::value});
    #t20.{core::Map::[]=}("baz", null);
  } =>#t20;
  core::List<core::List<core::int>> list22 = block {
    final core::List<core::List<core::int>> #t22 = <core::List<core::int>>[];
    if(self::oracle<core::String>("foo"))
      for (final core::List<core::int> #t23 in <core::List<core::int>>[<core::int>[42]])
        #t22.{core::List::add}(#t23);
  } =>#t22;
  core::Set<core::List<core::int>> set22 = block {
    final core::Set<core::List<core::int>> #t24 = col::LinkedHashSet::•<core::List<core::int>>();
    if(self::oracle<core::String>("foo"))
      for (final core::List<core::int> #t25 in <core::List<core::int>>[<core::int>[42]])
        #t24.{core::Set::add}(#t25);
    #t24.{core::Set::add}(null);
  } =>#t24;
  core::Map<core::String, core::List<core::int>> map22 = block {
    final core::Map<core::String, core::List<core::int>> #t26 = <core::String, core::List<core::int>>{};
    if(self::oracle<core::String>("foo"))
      for (final core::MapEntry<core::String, core::List<core::int>> #t27 in <core::String, core::List<core::int>>{"bar": <core::int>[42]}.{core::Map::entries})
        #t26.{core::Map::[]=}(#t27.{core::MapEntry::key}, #t27.{core::MapEntry::value});
    #t26.{core::Map::[]=}("baz", null);
  } =>#t26;
  core::List<core::int> list30 = block {
    final core::List<core::int> #t28 = <core::int>[];
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        for (final core::int #t29 in <core::int>[42])
          #t28.{core::List::add}(#t29);
  } =>#t28;
  core::Set<core::int> set30 = block {
    final core::Set<core::int> #t30 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        for (final core::int #t31 in <core::int>[42])
          #t30.{core::Set::add}(#t31);
    #t30.{core::Set::add}(null);
  } =>#t30;
  core::Map<core::String, core::int> map30 = block {
    final core::Map<core::String, core::int> #t32 = <core::String, core::int>{};
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        for (final core::MapEntry<core::String, core::int> #t33 in <core::String, core::int>{"bar": 42}.{core::Map::entries})
          #t32.{core::Map::[]=}(#t33.{core::MapEntry::key}, #t33.{core::MapEntry::value});
    #t32.{core::Map::[]=}("baz", null);
  } =>#t32;
  core::List<dynamic> list31 = block {
    final core::List<dynamic> #t34 = <dynamic>[];
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        for (final dynamic #t35 in <dynamic>[dynVar])
          #t34.{core::List::add}(#t35);
  } =>#t34;
  core::Set<dynamic> set31 = block {
    final core::Set<dynamic> #t36 = col::LinkedHashSet::•<dynamic>();
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        for (final dynamic #t37 in <dynamic>[dynVar])
          #t36.{core::Set::add}(#t37);
    #t36.{core::Set::add}(null);
  } =>#t36;
  core::Map<core::String, dynamic> map31 = block {
    final core::Map<core::String, dynamic> #t38 = <core::String, dynamic>{};
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        for (final core::MapEntry<core::String, dynamic> #t39 in <core::String, dynamic>{"bar": dynVar}.{core::Map::entries})
          #t38.{core::Map::[]=}(#t39.{core::MapEntry::key}, #t39.{core::MapEntry::value});
    #t38.{core::Map::[]=}("baz", null);
  } =>#t38;
  core::List<core::List<core::int>> list33 = block {
    final core::List<core::List<core::int>> #t40 = <core::List<core::int>>[];
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        for (final core::List<core::int> #t41 in <core::List<core::int>>[<core::int>[42]])
          #t40.{core::List::add}(#t41);
  } =>#t40;
  core::Set<core::List<core::int>> set33 = block {
    final core::Set<core::List<core::int>> #t42 = col::LinkedHashSet::•<core::List<core::int>>();
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        for (final core::List<core::int> #t43 in <core::List<core::int>>[<core::int>[42]])
          #t42.{core::Set::add}(#t43);
    #t42.{core::Set::add}(null);
  } =>#t42;
  core::Map<core::String, core::List<core::int>> map33 = block {
    final core::Map<core::String, core::List<core::int>> #t44 = <core::String, core::List<core::int>>{};
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        for (final core::MapEntry<core::String, core::List<core::int>> #t45 in <core::String, core::List<core::int>>{"bar": <core::int>[42]}.{core::Map::entries})
          #t44.{core::Map::[]=}(#t45.{core::MapEntry::key}, #t45.{core::MapEntry::value});
    #t44.{core::Map::[]=}("baz", null);
  } =>#t44;
  core::List<core::List<core::int>> list40 = block {
    final core::List<core::List<core::int>> #t46 = <core::List<core::int>>[];
    if(self::oracle<core::String>("foo"))
      for (final core::List<core::int> #t47 in <core::List<core::int>>[<core::int>[]])
        #t46.{core::List::add}(#t47);
  } =>#t46;
  core::Set<core::List<core::int>> set40 = block {
    final core::Set<core::List<core::int>> #t48 = col::LinkedHashSet::•<core::List<core::int>>();
    if(self::oracle<core::String>("foo"))
      for (final core::List<core::int> #t49 in <core::List<core::int>>[<core::int>[]])
        #t48.{core::Set::add}(#t49);
    #t48.{core::Set::add}(null);
  } =>#t48;
  core::Map<core::String, core::List<core::int>> map40 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:39:34: Error: Both Iterable and Map spread elements encountered in ambiguous literal.
  Map<String, List<int>> map40 = {if (oracle(\"foo\")) ...{\"bar\", []}, \"baz\": null};
                                 ^";
  core::List<core::List<core::int>> list41 = block {
    final core::List<core::List<core::int>> #t50 = <core::List<core::int>>[];
    if(self::oracle<core::String>("foo"))
      for (final core::List<core::int> #t51 in let final core::Set<core::List<core::int>> #t52 = col::LinkedHashSet::•<core::List<core::int>>() in let final dynamic #t53 = #t52.{core::Set::add}(<core::int>[]) in #t52)
        #t50.{core::List::add}(#t51);
  } =>#t50;
  core::Set<core::List<core::int>> set41 = block {
    final core::Set<core::List<core::int>> #t54 = col::LinkedHashSet::•<core::List<core::int>>();
    if(self::oracle<core::String>("foo"))
      for (final core::List<core::int> #t55 in let final core::Set<core::List<core::int>> #t56 = col::LinkedHashSet::•<core::List<core::int>>() in let final dynamic #t57 = #t56.{core::Set::add}(<core::int>[]) in #t56)
        #t54.{core::Set::add}(#t55);
    #t54.{core::Set::add}(null);
  } =>#t54;
  core::List<core::List<core::int>> list42 = block {
    final core::List<core::List<core::int>> #t58 = <core::List<core::int>>[];
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        for (final core::List<core::int> #t59 in <core::List<core::int>>[<core::int>[]])
          #t58.{core::List::add}(#t59);
  } =>#t58;
  core::Set<core::List<core::int>> set42 = block {
    final core::Set<core::List<core::int>> #t60 = col::LinkedHashSet::•<core::List<core::int>>();
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        for (final core::List<core::int> #t61 in <core::List<core::int>>[<core::int>[]])
          #t60.{core::Set::add}(#t61);
    #t60.{core::Set::add}(null);
  } =>#t60;
  core::Map<core::String, core::List<core::int>> map42 = block {
    final core::Map<core::String, core::List<core::int>> #t62 = <core::String, core::List<core::int>>{};
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        for (final core::MapEntry<core::String, core::List<core::int>> #t63 in <core::String, core::List<core::int>>{"bar": <core::int>[]}.{core::Map::entries})
          #t62.{core::Map::[]=}(#t63.{core::MapEntry::key}, #t63.{core::MapEntry::value});
    #t62.{core::Map::[]=}("baz", null);
  } =>#t62;
  core::List<core::int> list50 = block {
    final core::List<core::int> #t64 = <core::int>[];
    if(self::oracle<core::String>("foo"))
      for (final core::int #t65 in <core::int>[])
        #t64.{core::List::add}(#t65);
  } =>#t64;
  core::Set<core::int> set50 = block {
    final core::Set<core::int> #t66 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo"))
      for (final core::int #t67 in <core::int>[])
        #t66.{core::Set::add}(#t67);
    #t66.{core::Set::add}(null);
  } =>#t66;
  core::Map<core::String, core::int> map50 = block {
    final core::Map<core::String, core::int> #t68 = <core::String, core::int>{};
    if(self::oracle<core::String>("foo"))
      for (final core::MapEntry<core::String, core::int> #t69 in <core::String, core::int>{}.{core::Map::entries})
        #t68.{core::Map::[]=}(#t69.{core::MapEntry::key}, #t69.{core::MapEntry::value});
    #t68.{core::Map::[]=}("baz", null);
  } =>#t68;
  core::List<core::int> list51 = block {
    final core::List<core::int> #t70 = <core::int>[];
    if(self::oracle<core::String>("foo"))
      for (final core::int #t71 in let final core::Set<core::int> #t72 = col::LinkedHashSet::•<core::int>() in #t72)
        #t70.{core::List::add}(#t71);
  } =>#t70;
  core::Set<core::int> set51 = block {
    final core::Set<core::int> #t73 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo"))
      for (final core::int #t74 in let final core::Set<core::int> #t75 = col::LinkedHashSet::•<core::int>() in #t75)
        #t73.{core::Set::add}(#t74);
    #t73.{core::Set::add}(null);
  } =>#t73;
  core::List<core::int> list52 = block {
    final core::List<core::int> #t76 = <core::int>[];
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        for (final core::int #t77 in <core::int>[])
          #t76.{core::List::add}(#t77);
  } =>#t76;
  core::Set<core::int> set52 = block {
    final core::Set<core::int> #t78 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        for (final core::int #t79 in <core::int>[])
          #t78.{core::Set::add}(#t79);
    #t78.{core::Set::add}(null);
  } =>#t78;
  core::Map<core::String, core::int> map52 = block {
    final core::Map<core::String, core::int> #t80 = <core::String, core::int>{};
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        for (final core::MapEntry<core::String, core::int> #t81 in <core::String, core::int>{}.{core::Map::entries})
          #t80.{core::Map::[]=}(#t81.{core::MapEntry::key}, #t81.{core::MapEntry::value});
    #t80.{core::Map::[]=}("baz", null);
  } =>#t80;
  core::List<core::List<core::int>> list60 = block {
    final core::List<core::List<core::int>> #t82 = <core::List<core::int>>[];
    if(self::oracle<core::String>("foo"))
      for (final core::List<core::int> #t83 in <core::List<core::int>>[<core::int>[]])
        #t82.{core::List::add}(#t83);
  } =>#t82;
  core::Set<core::List<core::int>> set60 = block {
    final core::Set<core::List<core::int>> #t84 = col::LinkedHashSet::•<core::List<core::int>>();
    if(self::oracle<core::String>("foo"))
      for (final core::List<core::int> #t85 in <core::List<core::int>>[<core::int>[]])
        #t84.{core::Set::add}(#t85);
    #t84.{core::Set::add}(null);
  } =>#t84;
  core::Map<core::String, core::List<core::int>> map60 = block {
    final core::Map<core::String, core::List<core::int>> #t86 = <core::String, core::List<core::int>>{};
    if(self::oracle<core::String>("foo"))
      for (final core::MapEntry<core::String, core::List<core::int>> #t87 in <core::String, core::List<core::int>>{"bar": <core::int>[]}.{core::Map::entries})
        #t86.{core::Map::[]=}(#t87.{core::MapEntry::key}, #t87.{core::MapEntry::value});
    #t86.{core::Map::[]=}("baz", null);
  } =>#t86;
  core::List<core::List<core::int>> list61 = block {
    final core::List<core::List<core::int>> #t88 = <core::List<core::int>>[];
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        for (final core::List<core::int> #t89 in <core::List<core::int>>[<core::int>[]])
          #t88.{core::List::add}(#t89);
  } =>#t88;
  core::Set<core::List<core::int>> set61 = block {
    final core::Set<core::List<core::int>> #t90 = col::LinkedHashSet::•<core::List<core::int>>();
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        for (final core::List<core::int> #t91 in <core::List<core::int>>[<core::int>[]])
          #t90.{core::Set::add}(#t91);
    #t90.{core::Set::add}(null);
  } =>#t90;
  core::Map<core::String, core::List<core::int>> map61 = block {
    final core::Map<core::String, core::List<core::int>> #t92 = <core::String, core::List<core::int>>{};
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        for (final core::MapEntry<core::String, core::List<core::int>> #t93 in <core::String, core::List<core::int>>{"bar": <core::int>[]}.{core::Map::entries})
          #t92.{core::Map::[]=}(#t93.{core::MapEntry::key}, #t93.{core::MapEntry::value});
    #t92.{core::Map::[]=}("baz", null);
  } =>#t92;
  core::List<core::List<core::int>> list70 = block {
    final core::List<core::List<core::int>> #t94 = <core::List<core::int>>[];
    if(self::oracle<core::String>("foo"))
      #t94.{core::List::add}(<core::int>[]);
  } =>#t94;
  core::Set<core::List<core::int>> set70 = block {
    final core::Set<core::List<core::int>> #t95 = col::LinkedHashSet::•<core::List<core::int>>();
    if(self::oracle<core::String>("foo"))
      #t95.{core::Set::add}(<core::int>[]);
    #t95.{core::Set::add}(null);
  } =>#t95;
  core::List<core::List<core::int>> list71 = block {
    final core::List<core::List<core::int>> #t96 = <core::List<core::int>>[];
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        #t96.{core::List::add}(<core::int>[]);
  } =>#t96;
  core::Set<core::List<core::int>> set71 = block {
    final core::Set<core::List<core::int>> #t97 = col::LinkedHashSet::•<core::List<core::int>>();
    if(self::oracle<core::String>("foo"))
      if(self::oracle<dynamic>())
        #t97.{core::Set::add}(<core::int>[]);
    #t97.{core::Set::add}(null);
  } =>#t97;
  core::List<core::num> list80 = block {
    final core::List<core::num> #t98 = <core::num>[];
    if(self::oracle<core::String>("foo"))
      #t98.{core::List::add}(42);
    else
      #t98.{core::List::add}(3.14);
  } =>#t98;
  core::Set<core::num> set80 = block {
    final core::Set<core::num> #t99 = col::LinkedHashSet::•<core::num>();
    if(self::oracle<core::String>("foo"))
      #t99.{core::Set::add}(42);
    else
      #t99.{core::Set::add}(3.14);
    #t99.{core::Set::add}(null);
  } =>#t99;
  core::Map<core::String, core::num> map80 = block {
    final core::Map<core::String, core::num> #t100 = <core::String, core::num>{};
    if(self::oracle<core::String>("foo"))
      #t100.{core::Map::[]=}("bar", 42);
    else
      #t100.{core::Map::[]=}("bar", 3.14);
    #t100.{core::Map::[]=}("baz", null);
  } =>#t100;
  core::List<core::num> list81 = block {
    final core::List<core::num> #t101 = <core::num>[];
    if(self::oracle<core::String>("foo"))
      for (final core::num #t102 in listInt)
        #t101.{core::List::add}(#t102);
    else
      for (final core::num #t103 in listDouble)
        #t101.{core::List::add}(#t103);
  } =>#t101;
  core::Set<core::num> set81 = block {
    final core::Set<core::num> #t104 = col::LinkedHashSet::•<core::num>();
    if(self::oracle<core::String>("foo"))
      for (final core::num #t105 in listInt)
        #t104.{core::Set::add}(#t105);
    else
      for (final core::num #t106 in listDouble)
        #t104.{core::Set::add}(#t106);
    #t104.{core::Set::add}(null);
  } =>#t104;
  core::Map<core::String, core::num> map81 = block {
    final core::Map<core::String, core::num> #t107 = <core::String, core::num>{};
    if(self::oracle<core::String>("foo"))
      for (final core::MapEntry<core::String, core::num> #t108 in mapToInt.{core::Map::entries})
        #t107.{core::Map::[]=}(#t108.{core::MapEntry::key}, #t108.{core::MapEntry::value});
    else
      for (final core::MapEntry<core::String, core::num> #t109 in mapToDouble.{core::Map::entries})
        #t107.{core::Map::[]=}(#t109.{core::MapEntry::key}, #t109.{core::MapEntry::value});
    #t107.{core::Map::[]=}("baz", null);
  } =>#t107;
  core::List<dynamic> list82 = block {
    final core::List<dynamic> #t110 = <dynamic>[];
    if(self::oracle<core::String>("foo"))
      for (final dynamic #t111 in listInt as{TypeError} core::Iterable<dynamic>)
        #t110.{core::List::add}(#t111);
    else
      for (final dynamic #t112 in dynVar as{TypeError} core::Iterable<dynamic>)
        #t110.{core::List::add}(#t112);
  } =>#t110;
  core::Set<dynamic> set82 = block {
    final core::Set<dynamic> #t113 = col::LinkedHashSet::•<dynamic>();
    if(self::oracle<core::String>("foo"))
      for (final dynamic #t114 in listInt as{TypeError} core::Iterable<dynamic>)
        #t113.{core::Set::add}(#t114);
    else
      for (final dynamic #t115 in dynVar as{TypeError} core::Iterable<dynamic>)
        #t113.{core::Set::add}(#t115);
    #t113.{core::Set::add}(null);
  } =>#t113;
  core::Set<dynamic> map82 = block {
    final core::Set<dynamic> #t116 = col::LinkedHashSet::•<dynamic>();
    if(self::oracle<core::String>("foo"))
      for (final dynamic #t117 in mapToInt as{TypeError} core::Iterable<dynamic>)
        #t116.{core::Set::add}(#t117);
    else
      for (final dynamic #t118 in dynVar as{TypeError} core::Iterable<dynamic>)
        #t116.{core::Set::add}(#t118);
    #t116.{core::Set::add}(null);
  } =>#t116;
  core::List<core::num> list83 = block {
    final core::List<core::num> #t119 = <core::num>[];
    if(self::oracle<core::String>("foo"))
      #t119.{core::List::add}(42);
    else
      for (final core::num #t120 in listDouble)
        #t119.{core::List::add}(#t120);
  } =>#t119;
  core::Set<core::num> set83 = block {
    final core::Set<core::num> #t121 = col::LinkedHashSet::•<core::num>();
    if(self::oracle<core::String>("foo"))
      for (final core::num #t122 in listInt)
        #t121.{core::Set::add}(#t122);
    else
      #t121.{core::Set::add}(3.14);
    #t121.{core::Set::add}(null);
  } =>#t121;
  core::Map<core::String, core::num> map83 = block {
    final core::Map<core::String, core::num> #t123 = <core::String, core::num>{};
    if(self::oracle<core::String>("foo"))
      for (final core::MapEntry<core::String, core::num> #t124 in mapToInt.{core::Map::entries})
        #t123.{core::Map::[]=}(#t124.{core::MapEntry::key}, #t124.{core::MapEntry::value});
    else
      #t123.{core::Map::[]=}("bar", 3.14);
    #t123.{core::Map::[]=}("baz", null);
  } =>#t123;
  core::List<core::int> list90 = block {
    final core::List<core::int> #t125 = <core::int>[];
    if(self::oracle<core::String>("foo"))
      #t125.{core::List::add}(dynVar as{TypeError} core::int);
  } =>#t125;
  core::Set<core::int> set90 = block {
    final core::Set<core::int> #t126 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo"))
      #t126.{core::Set::add}(dynVar as{TypeError} core::int);
    #t126.{core::Set::add}(null);
  } =>#t126;
  core::Map<core::String, core::int> map90 = block {
    final core::Map<core::String, core::int> #t127 = <core::String, core::int>{};
    if(self::oracle<core::String>("foo"))
      #t127.{core::Map::[]=}("bar", dynVar as{TypeError} core::int);
    #t127.{core::Map::[]=}("baz", null);
  } =>#t127;
  core::List<core::int> list91 = block {
    final core::List<core::int> #t128 = <core::int>[];
    if(self::oracle<core::String>("foo"))
      for (final dynamic #t129 in dynVar as{TypeError} core::Iterable<dynamic>) {
        final core::int #t130 = #t129 as{TypeError} core::int;
        #t128.{core::List::add}(#t130);
      }
  } =>#t128;
  core::Set<core::int> set91 = block {
    final core::Set<core::int> #t131 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo"))
      for (final dynamic #t132 in dynVar as{TypeError} core::Iterable<dynamic>) {
        final core::int #t133 = #t132 as{TypeError} core::int;
        #t131.{core::Set::add}(#t133);
      }
    #t131.{core::Set::add}(null);
  } =>#t131;
  core::Map<core::String, core::int> map91 = block {
    final core::Map<core::String, core::int> #t134 = <core::String, core::int>{};
    if(self::oracle<core::String>("foo"))
      for (final core::MapEntry<dynamic, dynamic> #t135 in (dynVar as{TypeError} core::Map<dynamic, dynamic>).{core::Map::entries}) {
        final core::String #t136 = #t135.{core::MapEntry::key} as{TypeError} core::String;
        final core::int #t137 = #t135.{core::MapEntry::value} as{TypeError} core::int;
        #t134.{core::Map::[]=}(#t136, #t137);
      }
    #t134.{core::Map::[]=}("baz", null);
  } =>#t134;
}
static method testIfElementErrors(core::Map<core::int, core::int> map) → dynamic {
  <core::int>[invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:84:28: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int>[if (oracle(\"foo\")) \"bar\"];
                           ^"];
  let final core::Set<core::int> #t138 = col::LinkedHashSet::•<core::int>() in let final dynamic #t139 = #t138.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:85:28: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int>{if (oracle(\"foo\")) \"bar\", null};
                           ^") in let final dynamic #t140 = #t138.{core::Set::add}(null) in #t138;
  <core::String, core::int>{null: invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:86:41: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <String, int>{if (oracle(\"foo\")) \"bar\": \"bar\", \"baz\": null};
                                        ^", "baz": null};
  block {
    final core::List<core::int> #t141 = <core::int>[];
    if(self::oracle<core::String>("foo"))
      for (final core::int #t142 in <core::int>[let final<BottomType> #t143 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:87:32: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int>[if (oracle(\"foo\")) ...[\"bar\"]];
                               ^" in "bar" as{TypeError} core::int])
        #t141.{core::List::add}(#t142);
  } =>#t141;
  block {
    final core::Set<core::int> #t144 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo"))
      for (final core::int #t145 in <core::int>[let final<BottomType> #t146 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:88:32: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int>{if (oracle(\"foo\")) ...[\"bar\"], null};
                               ^" in "bar" as{TypeError} core::int])
        #t144.{core::Set::add}(#t145);
    #t144.{core::Set::add}(null);
  } =>#t144;
  block {
    final core::Map<core::String, core::int> #t147 = <core::String, core::int>{};
    if(self::oracle<core::String>("foo"))
      for (final core::MapEntry<core::String, core::int> #t148 in <core::String, core::int>{"bar": let final<BottomType> #t149 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:89:47: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <String, int>{if (oracle(\"foo\")) ...{\"bar\": \"bar\"}, \"baz\": null};
                                              ^" in "bar" as{TypeError} core::int}.{core::Map::entries})
        #t147.{core::Map::[]=}(#t148.{core::MapEntry::key}, #t148.{core::MapEntry::value});
    #t147.{core::Map::[]=}("baz", null);
  } =>#t147;
  block {
    final core::List<core::int> #t150 = <core::int>[];
    if(self::oracle<core::String>("foo"))
      #t150.{core::List::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:90:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>[if (oracle(\"foo\")) ...map];
                              ^");
  } =>#t150;
  block {
    final core::Set<core::int> #t151 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo"))
      #t151.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:91:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>{if (oracle(\"foo\")) ...map, null};
                              ^");
    #t151.{core::Set::add}(null);
  } =>#t151;
  block {
    final core::Map<core::String, core::int> #t152 = <core::String, core::int>{};
    if(self::oracle<core::String>("foo"))
      #t152.{core::Map::[]=}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:92:39: Error: Unexpected type 'List<String>' of a map spread entry.  Expected 'dynamic' or a Map.
 - 'List' is from 'dart:core'.
  <String, int>{if (oracle(\"foo\")) ...[\"bar\"], \"baz\": null};
                                      ^", null);
    #t152.{core::Map::[]=}("baz", null);
  } =>#t152;
  <core::String>[invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:93:12: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
Try changing the type of the left hand side, or casting the right hand side to 'String'.
  <String>[if (oracle(\"foo\")) 42 else 3.14];
           ^"];
  let final core::Set<core::String> #t153 = col::LinkedHashSet::•<core::String>() in let final dynamic #t154 = #t153.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:94:12: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
Try changing the type of the left hand side, or casting the right hand side to 'String'.
  <String>{if (oracle(\"foo\")) 42 else 3.14, null};
           ^") in let final dynamic #t155 = #t153.{core::Set::add}(null) in #t153;
  <core::String, core::String>{null: invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:95:20: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
Try changing the type of the left hand side, or casting the right hand side to 'String'.
  <String, String>{if (oracle(\"foo\")) \"bar\": 42 else \"baz\": 3.14, \"baz\": null};
                   ^", "baz": null};
  block {
    final core::List<core::int> #t156 = <core::int>[];
    if(self::oracle<core::String>("foo"))
      #t156.{core::List::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:96:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>[if (oracle(\"foo\")) ...map else 42];
                              ^");
    else
      #t156.{core::List::add}(42 as{TypeError} core::int);
  } =>#t156;
  block {
    final core::Set<core::int> #t157 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo"))
      #t157.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:97:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>{if (oracle(\"foo\")) ...map else 42, null};
                              ^");
    else
      #t157.{core::Set::add}(42 as{TypeError} core::int);
    #t157.{core::Set::add}(null);
  } =>#t157;
  block {
    final core::Map<core::String, core::int> #t158 = <core::String, core::int>{};
    if(self::oracle<core::String>("foo"))
      #t158.{core::Map::[]=}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:98:39: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
 - 'List' is from 'dart:core'.
  <String, int>{if (oracle(\"foo\")) ...[42] else \"bar\": 42, \"baz\": null};
                                      ^", null);
    else
      #t158.{core::Map::[]=}("bar", 42);
    #t158.{core::Map::[]=}("baz", null);
  } =>#t158;
  block {
    final core::List<core::int> #t159 = <core::int>[];
    if(self::oracle<core::String>("foo"))
      #t159.{core::List::add}(42 as{TypeError} core::int);
    else
      #t159.{core::List::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:99:39: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>[if (oracle(\"foo\")) 42 else ...map];
                                      ^");
  } =>#t159;
  block {
    final core::Set<core::int> #t160 = col::LinkedHashSet::•<core::int>();
    if(self::oracle<core::String>("foo"))
      #t160.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:100:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>{if (oracle(\"foo\")) ...map else 42, null};
                              ^");
    else
      #t160.{core::Set::add}(42 as{TypeError} core::int);
    #t160.{core::Set::add}(null);
  } =>#t160;
  block {
    final core::Map<core::String, core::int> #t161 = <core::String, core::int>{};
    if(self::oracle<core::String>("foo"))
      #t161.{core::Map::[]=}("bar", 42);
    else
      #t161.{core::Map::[]=}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:101:54: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
 - 'List' is from 'dart:core'.
  <String, int>{if (oracle(\"foo\")) \"bar\": 42 else ...[42], \"baz\": null};
                                                     ^", null);
    #t161.{core::Map::[]=}("baz", null);
  } =>#t161;
}
static method testForElement(dynamic dynVar, core::List<core::int> listInt, core::List<core::double> listDouble, core::int index, core::Map<core::String, core::int> mapStringInt, core::Map<core::String, core::double> mapStringDouble) → dynamic {
  core::List<core::int> list10 = block {
    final core::List<core::int> #t162 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t162.{core::List::add}(42);
  } =>#t162;
  core::Set<core::int> set10 = block {
    final core::Set<core::int> #t163 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t163.{core::Set::add}(42);
    #t163.{core::Set::add}(null);
  } =>#t163;
  core::Map<core::String, core::int> map10 = block {
    final core::Map<core::String, core::int> #t164 = <core::String, core::int>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t164.{core::Map::[]=}("bar", 42);
    #t164.{core::Map::[]=}("baz", null);
  } =>#t164;
  core::List<dynamic> list11 = block {
    final core::List<dynamic> #t165 = <dynamic>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t165.{core::List::add}(dynVar);
  } =>#t165;
  core::Set<dynamic> set11 = block {
    final core::Set<dynamic> #t166 = col::LinkedHashSet::•<dynamic>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t166.{core::Set::add}(dynVar);
    #t166.{core::Set::add}(null);
  } =>#t166;
  core::Map<core::String, dynamic> map11 = block {
    final core::Map<core::String, dynamic> #t167 = <core::String, dynamic>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t167.{core::Map::[]=}("bar", dynVar);
    #t167.{core::Map::[]=}("baz", null);
  } =>#t167;
  core::List<core::List<core::int>> list12 = block {
    final core::List<core::List<core::int>> #t168 = <core::List<core::int>>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t168.{core::List::add}(<core::int>[42]);
  } =>#t168;
  core::Set<core::List<core::int>> set12 = block {
    final core::Set<core::List<core::int>> #t169 = col::LinkedHashSet::•<core::List<core::int>>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t169.{core::Set::add}(<core::int>[42]);
    #t169.{core::Set::add}(null);
  } =>#t169;
  core::Map<core::String, core::List<core::int>> map12 = block {
    final core::Map<core::String, core::List<core::int>> #t170 = <core::String, core::List<core::int>>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t170.{core::Map::[]=}("bar", <core::int>[42]);
    #t170.{core::Map::[]=}("baz", null);
  } =>#t170;
  core::List<core::int> list20 = block {
    final core::List<core::int> #t171 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::int #t172 in <core::int>[42])
        #t171.{core::List::add}(#t172);
  } =>#t171;
  core::Set<core::int> set20 = block {
    final core::Set<core::int> #t173 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::int #t174 in <core::int>[42])
        #t173.{core::Set::add}(#t174);
    #t173.{core::Set::add}(null);
  } =>#t173;
  core::Map<core::String, core::int> map20 = block {
    final core::Map<core::String, core::int> #t175 = <core::String, core::int>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::MapEntry<core::String, core::int> #t176 in <core::String, core::int>{"bar": 42}.{core::Map::entries})
        #t175.{core::Map::[]=}(#t176.{core::MapEntry::key}, #t176.{core::MapEntry::value});
    #t175.{core::Map::[]=}("baz", null);
  } =>#t175;
  core::List<dynamic> list21 = block {
    final core::List<dynamic> #t177 = <dynamic>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final dynamic #t178 in <dynamic>[dynVar])
        #t177.{core::List::add}(#t178);
  } =>#t177;
  core::Set<dynamic> set21 = block {
    final core::Set<dynamic> #t179 = col::LinkedHashSet::•<dynamic>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final dynamic #t180 in <dynamic>[dynVar])
        #t179.{core::Set::add}(#t180);
    #t179.{core::Set::add}(null);
  } =>#t179;
  core::Map<core::String, dynamic> map21 = block {
    final core::Map<core::String, dynamic> #t181 = <core::String, dynamic>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::MapEntry<core::String, dynamic> #t182 in <core::String, dynamic>{"bar": dynVar}.{core::Map::entries})
        #t181.{core::Map::[]=}(#t182.{core::MapEntry::key}, #t182.{core::MapEntry::value});
    #t181.{core::Map::[]=}("baz", null);
  } =>#t181;
  core::List<core::List<core::int>> list22 = block {
    final core::List<core::List<core::int>> #t183 = <core::List<core::int>>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::List<core::int> #t184 in <core::List<core::int>>[<core::int>[42]])
        #t183.{core::List::add}(#t184);
  } =>#t183;
  core::Set<core::List<core::int>> set22 = block {
    final core::Set<core::List<core::int>> #t185 = col::LinkedHashSet::•<core::List<core::int>>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::List<core::int> #t186 in <core::List<core::int>>[<core::int>[42]])
        #t185.{core::Set::add}(#t186);
    #t185.{core::Set::add}(null);
  } =>#t185;
  core::Map<core::String, core::List<core::int>> map22 = block {
    final core::Map<core::String, core::List<core::int>> #t187 = <core::String, core::List<core::int>>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::MapEntry<core::String, core::List<core::int>> #t188 in <core::String, core::List<core::int>>{"bar": <core::int>[42]}.{core::Map::entries})
        #t187.{core::Map::[]=}(#t188.{core::MapEntry::key}, #t188.{core::MapEntry::value});
    #t187.{core::Map::[]=}("baz", null);
  } =>#t187;
  core::List<core::int> list30 = block {
    final core::List<core::int> #t189 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::int #t190 in <core::int>[42])
          #t189.{core::List::add}(#t190);
  } =>#t189;
  core::Set<core::int> set30 = block {
    final core::Set<core::int> #t191 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::int #t192 in <core::int>[42])
          #t191.{core::Set::add}(#t192);
    #t191.{core::Set::add}(null);
  } =>#t191;
  core::Map<core::String, core::int> map30 = block {
    final core::Map<core::String, core::int> #t193 = <core::String, core::int>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::MapEntry<core::String, core::int> #t194 in <core::String, core::int>{"bar": 42}.{core::Map::entries})
          #t193.{core::Map::[]=}(#t194.{core::MapEntry::key}, #t194.{core::MapEntry::value});
    #t193.{core::Map::[]=}("baz", null);
  } =>#t193;
  core::List<dynamic> list31 = block {
    final core::List<dynamic> #t195 = <dynamic>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final dynamic #t196 in <dynamic>[dynVar])
          #t195.{core::List::add}(#t196);
  } =>#t195;
  core::Set<dynamic> set31 = block {
    final core::Set<dynamic> #t197 = col::LinkedHashSet::•<dynamic>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final dynamic #t198 in <dynamic>[dynVar])
          #t197.{core::Set::add}(#t198);
    #t197.{core::Set::add}(null);
  } =>#t197;
  core::Map<core::String, dynamic> map31 = block {
    final core::Map<core::String, dynamic> #t199 = <core::String, dynamic>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::MapEntry<core::String, dynamic> #t200 in <core::String, dynamic>{"bar": dynVar}.{core::Map::entries})
          #t199.{core::Map::[]=}(#t200.{core::MapEntry::key}, #t200.{core::MapEntry::value});
    #t199.{core::Map::[]=}("baz", null);
  } =>#t199;
  core::List<core::List<core::int>> list33 = block {
    final core::List<core::List<core::int>> #t201 = <core::List<core::int>>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::List<core::int> #t202 in <core::List<core::int>>[<core::int>[42]])
          #t201.{core::List::add}(#t202);
  } =>#t201;
  core::Set<core::List<core::int>> set33 = block {
    final core::Set<core::List<core::int>> #t203 = col::LinkedHashSet::•<core::List<core::int>>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::List<core::int> #t204 in <core::List<core::int>>[<core::int>[42]])
          #t203.{core::Set::add}(#t204);
    #t203.{core::Set::add}(null);
  } =>#t203;
  core::Map<core::String, core::List<core::int>> map33 = block {
    final core::Map<core::String, core::List<core::int>> #t205 = <core::String, core::List<core::int>>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::MapEntry<core::String, core::List<core::int>> #t206 in <core::String, core::List<core::int>>{"bar": <core::int>[42]}.{core::Map::entries})
          #t205.{core::Map::[]=}(#t206.{core::MapEntry::key}, #t206.{core::MapEntry::value});
    #t205.{core::Map::[]=}("baz", null);
  } =>#t205;
  core::List<core::List<core::int>> list40 = block {
    final core::List<core::List<core::int>> #t207 = <core::List<core::int>>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::List<core::int> #t208 in <core::List<core::int>>[<core::int>[]])
        #t207.{core::List::add}(#t208);
  } =>#t207;
  core::Set<core::List<core::int>> set40 = block {
    final core::Set<core::List<core::int>> #t209 = col::LinkedHashSet::•<core::List<core::int>>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::List<core::int> #t210 in <core::List<core::int>>[<core::int>[]])
        #t209.{core::Set::add}(#t210);
    #t209.{core::Set::add}(null);
  } =>#t209;
  core::Map<core::String, core::List<core::int>> map40 = block {
    final core::Map<core::String, core::List<core::int>> #t211 = <core::String, core::List<core::int>>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::MapEntry<core::String, core::List<core::int>> #t212 in <core::String, core::List<core::int>>{"bar": <core::int>[]}.{core::Map::entries})
        #t211.{core::Map::[]=}(#t212.{core::MapEntry::key}, #t212.{core::MapEntry::value});
    #t211.{core::Map::[]=}("baz", null);
  } =>#t211;
  core::List<core::List<core::int>> list41 = block {
    final core::List<core::List<core::int>> #t213 = <core::List<core::int>>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::List<core::int> #t214 in let final core::Set<core::List<core::int>> #t215 = col::LinkedHashSet::•<core::List<core::int>>() in let final dynamic #t216 = #t215.{core::Set::add}(<core::int>[]) in #t215)
        #t213.{core::List::add}(#t214);
  } =>#t213;
  core::Set<core::List<core::int>> set41 = block {
    final core::Set<core::List<core::int>> #t217 = col::LinkedHashSet::•<core::List<core::int>>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::List<core::int> #t218 in let final core::Set<core::List<core::int>> #t219 = col::LinkedHashSet::•<core::List<core::int>>() in let final dynamic #t220 = #t219.{core::Set::add}(<core::int>[]) in #t219)
        #t217.{core::Set::add}(#t218);
    #t217.{core::Set::add}(null);
  } =>#t217;
  core::List<core::List<core::int>> list42 = block {
    final core::List<core::List<core::int>> #t221 = <core::List<core::int>>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::List<core::int> #t222 in <core::List<core::int>>[<core::int>[]])
          #t221.{core::List::add}(#t222);
  } =>#t221;
  core::Set<core::List<core::int>> set42 = block {
    final core::Set<core::List<core::int>> #t223 = col::LinkedHashSet::•<core::List<core::int>>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::List<core::int> #t224 in <core::List<core::int>>[<core::int>[]])
          #t223.{core::Set::add}(#t224);
    #t223.{core::Set::add}(null);
  } =>#t223;
  core::Map<core::String, core::List<core::int>> map42 = block {
    final core::Map<core::String, core::List<core::int>> #t225 = <core::String, core::List<core::int>>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::MapEntry<core::String, core::List<core::int>> #t226 in <core::String, core::List<core::int>>{"bar": <core::int>[]}.{core::Map::entries})
          #t225.{core::Map::[]=}(#t226.{core::MapEntry::key}, #t226.{core::MapEntry::value});
    #t225.{core::Map::[]=}("baz", null);
  } =>#t225;
  core::List<core::int> list50 = block {
    final core::List<core::int> #t227 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::int #t228 in <core::int>[])
        #t227.{core::List::add}(#t228);
  } =>#t227;
  core::Set<core::int> set50 = block {
    final core::Set<core::int> #t229 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::int #t230 in <core::int>[])
        #t229.{core::Set::add}(#t230);
    #t229.{core::Set::add}(null);
  } =>#t229;
  core::Map<core::String, core::int> map50 = block {
    final core::Map<core::String, core::int> #t231 = <core::String, core::int>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::MapEntry<core::String, core::int> #t232 in <core::String, core::int>{}.{core::Map::entries})
        #t231.{core::Map::[]=}(#t232.{core::MapEntry::key}, #t232.{core::MapEntry::value});
    #t231.{core::Map::[]=}("baz", null);
  } =>#t231;
  core::List<core::int> list51 = block {
    final core::List<core::int> #t233 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::int #t234 in let final core::Set<core::int> #t235 = col::LinkedHashSet::•<core::int>() in #t235)
        #t233.{core::List::add}(#t234);
  } =>#t233;
  core::Set<core::int> set51 = block {
    final core::Set<core::int> #t236 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::int #t237 in let final core::Set<core::int> #t238 = col::LinkedHashSet::•<core::int>() in #t238)
        #t236.{core::Set::add}(#t237);
    #t236.{core::Set::add}(null);
  } =>#t236;
  core::List<core::int> list52 = block {
    final core::List<core::int> #t239 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::int #t240 in <core::int>[])
          #t239.{core::List::add}(#t240);
  } =>#t239;
  core::Set<core::int> set52 = block {
    final core::Set<core::int> #t241 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::int #t242 in <core::int>[])
          #t241.{core::Set::add}(#t242);
    #t241.{core::Set::add}(null);
  } =>#t241;
  core::List<core::List<core::int>> list60 = block {
    final core::List<core::List<core::int>> #t243 = <core::List<core::int>>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::List<core::int> #t244 in <core::List<core::int>>[<core::int>[]])
        #t243.{core::List::add}(#t244);
  } =>#t243;
  core::Set<core::List<core::int>> set60 = block {
    final core::Set<core::List<core::int>> #t245 = col::LinkedHashSet::•<core::List<core::int>>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::List<core::int> #t246 in <core::List<core::int>>[<core::int>[]])
        #t245.{core::Set::add}(#t246);
    #t245.{core::Set::add}(null);
  } =>#t245;
  core::Map<core::String, core::List<core::int>> map60 = block {
    final core::Map<core::String, core::List<core::int>> #t247 = <core::String, core::List<core::int>>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::MapEntry<core::String, core::List<core::int>> #t248 in <core::String, core::List<core::int>>{"bar": <core::int>[]}.{core::Map::entries})
        #t247.{core::Map::[]=}(#t248.{core::MapEntry::key}, #t248.{core::MapEntry::value});
    #t247.{core::Map::[]=}("baz", null);
  } =>#t247;
  core::List<core::List<core::int>> list61 = block {
    final core::List<core::List<core::int>> #t249 = <core::List<core::int>>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::List<core::int> #t250 in <core::List<core::int>>[<core::int>[]])
          #t249.{core::List::add}(#t250);
  } =>#t249;
  core::Set<core::List<core::int>> set61 = block {
    final core::Set<core::List<core::int>> #t251 = col::LinkedHashSet::•<core::List<core::int>>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::List<core::int> #t252 in <core::List<core::int>>[<core::int>[]])
          #t251.{core::Set::add}(#t252);
    #t251.{core::Set::add}(null);
  } =>#t251;
  core::Map<core::String, core::List<core::int>> map61 = block {
    final core::Map<core::String, core::List<core::int>> #t253 = <core::String, core::List<core::int>>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::MapEntry<core::String, core::List<core::int>> #t254 in <core::String, core::List<core::int>>{"bar": <core::int>[]}.{core::Map::entries})
          #t253.{core::Map::[]=}(#t254.{core::MapEntry::key}, #t254.{core::MapEntry::value});
    #t253.{core::Map::[]=}("baz", null);
  } =>#t253;
  core::List<core::List<core::int>> list70 = block {
    final core::List<core::List<core::int>> #t255 = <core::List<core::int>>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t255.{core::List::add}(<core::int>[]);
  } =>#t255;
  core::Set<core::List<core::int>> set70 = block {
    final core::Set<core::List<core::int>> #t256 = col::LinkedHashSet::•<core::List<core::int>>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t256.{core::Set::add}(<core::int>[]);
    #t256.{core::Set::add}(null);
  } =>#t256;
  core::Map<core::String, core::List<core::int>> map70 = block {
    final core::Map<core::String, core::List<core::int>> #t257 = <core::String, core::List<core::int>>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t257.{core::Map::[]=}("bar", <core::int>[]);
    #t257.{core::Map::[]=}("baz", null);
  } =>#t257;
  core::List<core::List<core::int>> list71 = block {
    final core::List<core::List<core::int>> #t258 = <core::List<core::int>>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        #t258.{core::List::add}(<core::int>[]);
  } =>#t258;
  core::Set<core::List<core::int>> set71 = block {
    final core::Set<core::List<core::int>> #t259 = col::LinkedHashSet::•<core::List<core::int>>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        #t259.{core::Set::add}(<core::int>[]);
    #t259.{core::Set::add}(null);
  } =>#t259;
  core::Map<core::String, core::List<core::int>> map71 = block {
    final core::Map<core::String, core::List<core::int>> #t260 = <core::String, core::List<core::int>>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        #t260.{core::Map::[]=}("bar", <core::int>[]);
    #t260.{core::Map::[]=}("baz", null);
  } =>#t260;
  core::List<core::num> list80 = block {
    final core::List<core::num> #t261 = <core::num>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        #t261.{core::List::add}(42);
      else
        #t261.{core::List::add}(3.14);
  } =>#t261;
  core::Set<core::num> set80 = block {
    final core::Set<core::num> #t262 = col::LinkedHashSet::•<core::num>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        #t262.{core::Set::add}(42);
      else
        #t262.{core::Set::add}(3.14);
    #t262.{core::Set::add}(null);
  } =>#t262;
  core::Map<core::String, core::num> map80 = block {
    final core::Map<core::String, core::num> #t263 = <core::String, core::num>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        #t263.{core::Map::[]=}("bar", 42);
      else
        #t263.{core::Map::[]=}("bar", 3.14);
    #t263.{core::Map::[]=}("baz", null);
  } =>#t263;
  core::List<core::num> list81 = block {
    final core::List<core::num> #t264 = <core::num>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::num #t265 in listInt)
          #t264.{core::List::add}(#t265);
      else
        for (final core::num #t266 in listDouble)
          #t264.{core::List::add}(#t266);
  } =>#t264;
  core::Set<core::num> set81 = block {
    final core::Set<core::num> #t267 = col::LinkedHashSet::•<core::num>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::num #t268 in listInt)
          #t267.{core::Set::add}(#t268);
      else
        for (final core::num #t269 in listDouble)
          #t267.{core::Set::add}(#t269);
    #t267.{core::Set::add}(null);
  } =>#t267;
  core::Map<core::String, core::num> map81 = block {
    final core::Map<core::String, core::num> #t270 = <core::String, core::num>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::MapEntry<core::String, core::num> #t271 in mapStringInt.{core::Map::entries})
          #t270.{core::Map::[]=}(#t271.{core::MapEntry::key}, #t271.{core::MapEntry::value});
      else
        for (final core::MapEntry<core::String, core::num> #t272 in mapStringDouble.{core::Map::entries})
          #t270.{core::Map::[]=}(#t272.{core::MapEntry::key}, #t272.{core::MapEntry::value});
    #t270.{core::Map::[]=}("baz", null);
  } =>#t270;
  core::List<dynamic> list82 = block {
    final core::List<dynamic> #t273 = <dynamic>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final dynamic #t274 in listInt as{TypeError} core::Iterable<dynamic>)
          #t273.{core::List::add}(#t274);
      else
        for (final dynamic #t275 in dynVar as{TypeError} core::Iterable<dynamic>)
          #t273.{core::List::add}(#t275);
  } =>#t273;
  core::Set<dynamic> set82 = block {
    final core::Set<dynamic> #t276 = col::LinkedHashSet::•<dynamic>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final dynamic #t277 in listInt as{TypeError} core::Iterable<dynamic>)
          #t276.{core::Set::add}(#t277);
      else
        for (final dynamic #t278 in dynVar as{TypeError} core::Iterable<dynamic>)
          #t276.{core::Set::add}(#t278);
    #t276.{core::Set::add}(null);
  } =>#t276;
  core::Map<dynamic, dynamic> map82 = block {
    final core::Map<dynamic, dynamic> #t279 = <dynamic, dynamic>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::MapEntry<dynamic, dynamic> #t280 in (mapStringInt as{TypeError} core::Map<dynamic, dynamic>).{core::Map::entries})
          #t279.{core::Map::[]=}(#t280.{core::MapEntry::key}, #t280.{core::MapEntry::value});
      else
        for (final core::MapEntry<dynamic, dynamic> #t281 in (dynVar as{TypeError} core::Map<dynamic, dynamic>).{core::Map::entries})
          #t279.{core::Map::[]=}(#t281.{core::MapEntry::key}, #t281.{core::MapEntry::value});
    #t279.{core::Map::[]=}("baz", null);
  } =>#t279;
  core::List<core::num> list83 = block {
    final core::List<core::num> #t282 = <core::num>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        #t282.{core::List::add}(42);
      else
        for (final core::num #t283 in listDouble)
          #t282.{core::List::add}(#t283);
  } =>#t282;
  core::Set<core::num> set83 = block {
    final core::Set<core::num> #t284 = col::LinkedHashSet::•<core::num>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::num #t285 in listInt)
          #t284.{core::Set::add}(#t285);
      else
        #t284.{core::Set::add}(3.14);
    #t284.{core::Set::add}(null);
  } =>#t284;
  core::Map<core::String, core::num> map83 = block {
    final core::Map<core::String, core::num> #t286 = <core::String, core::num>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        for (final core::MapEntry<core::String, core::num> #t287 in mapStringInt.{core::Map::entries})
          #t286.{core::Map::[]=}(#t287.{core::MapEntry::key}, #t287.{core::MapEntry::value});
      else
        #t286.{core::Map::[]=}("bar", 3.14);
    #t286.{core::Map::[]=}("baz", null);
  } =>#t286;
  core::List<core::int> list90 = block {
    final core::List<core::int> #t288 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t288.{core::List::add}(dynVar as{TypeError} core::int);
  } =>#t288;
  core::Set<core::int> set90 = block {
    final core::Set<core::int> #t289 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t289.{core::Set::add}(dynVar as{TypeError} core::int);
    #t289.{core::Set::add}(null);
  } =>#t289;
  core::Map<core::String, core::int> map90 = block {
    final core::Map<core::String, core::int> #t290 = <core::String, core::int>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t290.{core::Map::[]=}("bar", dynVar as{TypeError} core::int);
    #t290.{core::Map::[]=}("baz", null);
  } =>#t290;
  core::List<core::int> list91 = block {
    final core::List<core::int> #t291 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final dynamic #t292 in dynVar as{TypeError} core::Iterable<dynamic>) {
        final core::int #t293 = #t292 as{TypeError} core::int;
        #t291.{core::List::add}(#t293);
      }
  } =>#t291;
  core::Set<core::int> set91 = block {
    final core::Set<core::int> #t294 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final dynamic #t295 in dynVar as{TypeError} core::Iterable<dynamic>) {
        final core::int #t296 = #t295 as{TypeError} core::int;
        #t294.{core::Set::add}(#t296);
      }
    #t294.{core::Set::add}(null);
  } =>#t294;
  core::Map<core::String, core::int> map91 = block {
    final core::Map<core::String, core::int> #t297 = <core::String, core::int>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::MapEntry<dynamic, dynamic> #t298 in (dynVar as{TypeError} core::Map<dynamic, dynamic>).{core::Map::entries}) {
        final core::String #t299 = #t298.{core::MapEntry::key} as{TypeError} core::String;
        final core::int #t300 = #t298.{core::MapEntry::value} as{TypeError} core::int;
        #t297.{core::Map::[]=}(#t299, #t300);
      }
    #t297.{core::Map::[]=}("baz", null);
  } =>#t297;
  core::List<core::int> list100 = block {
    final core::List<core::int> #t301 = <core::int>[];
    for (final dynamic #t302 = index = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; index = index.{core::num::+}(1))
      #t301.{core::List::add}(42);
  } =>#t301;
  core::Set<core::int> set100 = block {
    final core::Set<core::int> #t303 = col::LinkedHashSet::•<core::int>();
    for (final dynamic #t304 = index = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; index = index.{core::num::+}(1))
      #t303.{core::Set::add}(42);
  } =>#t303;
  core::Map<core::String, core::int> map100 = block {
    final core::Map<core::String, core::int> #t305 = <core::String, core::int>{};
    for (final dynamic #t306 = index = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; index = index.{core::num::+}(1))
      #t305.{core::Map::[]=}("bar", 42);
  } =>#t305;
  core::List<core::int> list110 = block {
    final core::List<core::int> #t307 = <core::int>[];
    for (core::int i in <core::int>[1, 2, 3])
      #t307.{core::List::add}(i);
  } =>#t307;
  core::Set<core::int> set110 = block {
    final core::Set<core::int> #t308 = col::LinkedHashSet::•<core::int>();
    for (core::int i in <core::int>[1, 2, 3])
      #t308.{core::Set::add}(i);
    #t308.{core::Set::add}(null);
  } =>#t308;
  core::Map<core::String, core::int> map110 = block {
    final core::Map<core::String, core::int> #t309 = <core::String, core::int>{};
    for (core::int i in <core::int>[1, 2, 3])
      #t309.{core::Map::[]=}("bar", i);
    #t309.{core::Map::[]=}("baz", null);
  } =>#t309;
  core::List<core::int> list120 = block {
    final core::List<core::int> #t310 = <core::int>[];
    for (dynamic i in dynVar as{TypeError} core::Iterable<dynamic>)
      #t310.{core::List::add}(i as{TypeError} core::int);
  } =>#t310;
  core::Set<core::int> set120 = block {
    final core::Set<core::int> #t311 = col::LinkedHashSet::•<core::int>();
    for (dynamic i in dynVar as{TypeError} core::Iterable<dynamic>)
      #t311.{core::Set::add}(i as{TypeError} core::int);
    #t311.{core::Set::add}(null);
  } =>#t311;
  core::Map<core::String, core::int> map120 = block {
    final core::Map<core::String, core::int> #t312 = <core::String, core::int>{};
    for (dynamic i in dynVar as{TypeError} core::Iterable<dynamic>)
      #t312.{core::Map::[]=}("bar", i as{TypeError} core::int);
    #t312.{core::Map::[]=}("baz", null);
  } =>#t312;
}
static method testForElementErrors(core::Map<core::int, core::int> map, core::List<core::int> list) → dynamic async {
  <core::int>[invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:190:45: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int>[for (int i = 0; oracle(\"foo\"); i++) \"bar\"];
                                            ^"];
  let final core::Set<core::int> #t313 = col::LinkedHashSet::•<core::int>() in let final dynamic #t314 = #t313.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:191:45: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int>{for (int i = 0; oracle(\"foo\"); i++) \"bar\", null};
                                            ^") in let final dynamic #t315 = #t313.{core::Set::add}(null) in #t313;
  <core::int, core::int>{invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:192:14: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int, int>{for (int i = 0; oracle(\"foo\"); i++) \"bar\": \"bar\", \"baz\": null};
             ^": invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:192:14: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int, int>{for (int i = 0; oracle(\"foo\"); i++) \"bar\": \"bar\", \"baz\": null};
             ^", let final<BottomType> #t316 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:192:64: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int, int>{for (int i = 0; oracle(\"foo\"); i++) \"bar\": \"bar\", \"baz\": null};
                                                               ^" in "baz" as{TypeError} core::int: null};
  block {
    final core::List<core::int> #t317 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::int #t318 in <core::int>[let final<BottomType> #t319 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:193:49: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int>[for (int i = 0; oracle(\"foo\"); i++) ...[\"bar\"]];
                                                ^" in "bar" as{TypeError} core::int])
        #t317.{core::List::add}(#t318);
  } =>#t317;
  block {
    final core::Set<core::int> #t320 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::int #t321 in <core::int>[let final<BottomType> #t322 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:194:49: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int>{for (int i = 0; oracle(\"foo\"); i++) ...[\"bar\"], null};
                                                ^" in "bar" as{TypeError} core::int])
        #t320.{core::Set::add}(#t321);
    #t320.{core::Set::add}(null);
  } =>#t320;
  block {
    final core::Map<core::int, core::int> #t323 = <core::int, core::int>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      for (final core::MapEntry<core::int, core::int> #t324 in <core::int, core::int>{let final<BottomType> #t325 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:195:54: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int, int>{for (int i = 0; oracle(\"foo\"); i++) ...{\"bar\": \"bar\"}, \"baz\": null};
                                                     ^" in "bar" as{TypeError} core::int: let final<BottomType> #t326 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:195:61: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int, int>{for (int i = 0; oracle(\"foo\"); i++) ...{\"bar\": \"bar\"}, \"baz\": null};
                                                            ^" in "bar" as{TypeError} core::int}.{core::Map::entries})
        #t323.{core::Map::[]=}(#t324.{core::MapEntry::key}, #t324.{core::MapEntry::value});
    #t323.{core::Map::[]=}(let final<BottomType> #t327 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:195:69: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  <int, int>{for (int i = 0; oracle(\"foo\"); i++) ...{\"bar\": \"bar\"}, \"baz\": null};
                                                                    ^" in "baz" as{TypeError} core::int, null);
  } =>#t323;
  block {
    final core::List<core::int> #t328 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t328.{core::List::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:196:48: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>[for (int i = 0; oracle(\"foo\"); i++) ...map];
                                               ^");
  } =>#t328;
  block {
    final core::Set<core::int> #t329 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t329.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:197:48: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>{for (int i = 0; oracle(\"foo\"); i++) ...map, null};
                                               ^");
    #t329.{core::Set::add}(null);
  } =>#t329;
  block {
    final core::Map<core::int, core::int> #t330 = <core::int, core::int>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      #t330.{core::Map::[]=}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:198:53: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
 - 'List' is from 'dart:core'.
  <int, int>{for (int i = 0; oracle(\"foo\"); i++) ...list, 42: null};
                                                    ^", null);
    #t330.{core::Map::[]=}(42, null);
  } =>#t330;
  <core::String>[invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:199:48: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
Try changing the type of the left hand side, or casting the right hand side to 'String'.
  <String>[for (int i = 0; oracle(\"foo\"); i++) if (oracle()) 42 else 3.14];
                                               ^"];
  let final core::Set<core::String> #t331 = col::LinkedHashSet::•<core::String>() in let final dynamic #t332 = #t331.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:200:48: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
Try changing the type of the left hand side, or casting the right hand side to 'String'.
  <String>{for (int i = 0; oracle(\"foo\"); i++) if (oracle()) 42 else 3.14, null};
                                               ^") in let final dynamic #t333 = #t331.{core::Set::add}(null) in #t331;
  <core::String, core::String>{null: invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:201:20: Error: A value of type 'num' can't be assigned to a variable of type 'String'.
Try changing the type of the left hand side, or casting the right hand side to 'String'.
  <String, String>{for (int i = 0; oracle(\"foo\"); i++) if (oracle()) \"bar\": 42 else \"bar\": 3.14, \"baz\": null};
                   ^", "baz": null};
  block {
    final core::List<core::int> #t334 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        #t334.{core::List::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:202:62: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>[for (int i = 0; oracle(\"foo\"); i++) if (oracle()) ...map else 42];
                                                             ^");
      else
        #t334.{core::List::add}(42 as{TypeError} core::int);
  } =>#t334;
  block {
    final core::Set<core::int> #t335 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        #t335.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:203:62: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>{for (int i = 0; oracle(\"foo\"); i++) if (oracle()) ...map else 42, null};
                                                             ^");
      else
        #t335.{core::Set::add}(42 as{TypeError} core::int);
    #t335.{core::Set::add}(null);
  } =>#t335;
  block {
    final core::Map<core::String, core::int> #t336 = <core::String, core::int>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        #t336.{core::Map::[]=}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:204:70: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
 - 'List' is from 'dart:core'.
  <String, int>{for (int i = 0; oracle(\"foo\"); i++) if (oracle()) ...list else \"bar\": 42, \"baz\": null};
                                                                     ^", null);
      else
        #t336.{core::Map::[]=}("bar", 42);
    #t336.{core::Map::[]=}("baz", null);
  } =>#t336;
  block {
    final core::List<core::int> #t337 = <core::int>[];
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        #t337.{core::List::add}(42 as{TypeError} core::int);
      else
        #t337.{core::List::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:205:70: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>[for (int i = 0; oracle(\"foo\"); i++) if (oracle()) 42 else ...map];
                                                                     ^");
  } =>#t337;
  block {
    final core::Set<core::int> #t338 = col::LinkedHashSet::•<core::int>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        #t338.{core::Set::add}(42 as{TypeError} core::int);
      else
        #t338.{core::Set::add}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:206:70: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>{for (int i = 0; oracle(\"foo\"); i++) if (oracle()) 42 else ...map, null};
                                                                     ^");
    #t338.{core::Set::add}(null);
  } =>#t338;
  block {
    final core::Map<core::String, core::int> #t339 = <core::String, core::int>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError} core::bool; i = i.{core::num::+}(1))
      if(self::oracle<dynamic>())
        #t339.{core::Map::[]=}("bar", 42);
      else
        #t339.{core::Map::[]=}(invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:207:85: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
 - 'List' is from 'dart:core'.
  <String, int>{for (int i = 0; oracle(\"foo\"); i++) if (oracle()) \"bar\": 42 else ...list, \"baz\": null};
                                                                                    ^", null);
    #t339.{core::Map::[]=}("baz", null);
  } =>#t339;
  final core::int i = 0;
  block {
    final core::List<core::int> #t340 = <core::int>[];
    for (final core::int #t341 in <core::int>[1]) {
      invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:210:14: Error: Setter not found: 'i'.
  <int>[for (i in <int>[1]) i];
             ^";
      #t340.{core::List::add}(i);
    }
  } =>#t340;
  block {
    final core::Set<core::int> #t342 = col::LinkedHashSet::•<core::int>();
    for (final core::int #t343 in <core::int>[1]) {
      invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:211:14: Error: Setter not found: 'i'.
  <int>{for (i in <int>[1]) i, null};
             ^";
      #t342.{core::Set::add}(i);
    }
    #t342.{core::Set::add}(null);
  } =>#t342;
  block {
    final core::Map<core::String, core::int> #t344 = <core::String, core::int>{};
    for (final core::int #t345 in <core::int>[1]) {
      invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:212:21: Error: Setter not found: 'i'.
\t<String, int>{for (i in <int>[1]) \"bar\": i, \"baz\": null};
\t                   ^";
      #t344.{core::Map::[]=}("bar", i);
    }
    #t344.{core::Map::[]=}("baz", null);
  } =>#t344;
  core::List<dynamic> list10 = block {
    final core::List<dynamic> #t346 = <dynamic>[];
    for (dynamic i in let final<BottomType> #t347 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:214:31: Error: The type 'String' used in the 'for' loop must implement 'Iterable<dynamic>'.
 - 'Iterable' is from 'dart:core'.
  var list10 = [for (var i in \"not iterable\") i];
                              ^" in "not iterable" as{TypeError} core::Iterable<dynamic>)
      #t346.{core::List::add}(i);
  } =>#t346;
  core::Set<dynamic> set10 = block {
    final core::Set<dynamic> #t348 = col::LinkedHashSet::•<dynamic>();
    for (dynamic i in let final<BottomType> #t349 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:215:30: Error: The type 'String' used in the 'for' loop must implement 'Iterable<dynamic>'.
 - 'Iterable' is from 'dart:core'.
  var set10 = {for (var i in \"not iterable\") i, null};
                             ^" in "not iterable" as{TypeError} core::Iterable<dynamic>)
      #t348.{core::Set::add}(i);
    #t348.{core::Set::add}(null);
  } =>#t348;
  core::Map<core::String, dynamic> map10 = block {
    final core::Map<core::String, dynamic> #t350 = <core::String, dynamic>{};
    for (dynamic i in let final<BottomType> #t351 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:216:30: Error: The type 'String' used in the 'for' loop must implement 'Iterable<dynamic>'.
 - 'Iterable' is from 'dart:core'.
  var map10 = {for (var i in \"not iterable\") \"bar\": i, \"baz\": null};
                             ^" in "not iterable" as{TypeError} core::Iterable<dynamic>)
      #t350.{core::Map::[]=}("bar", i);
    #t350.{core::Map::[]=}("baz", null);
  } =>#t350;
  core::List<core::int> list20 = block {
    final core::List<core::int> #t352 = <core::int>[];
    for (core::int i in <core::int>[let final<BottomType> #t353 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:217:32: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var list20 = [for (int i in [\"not\", \"int\"]) i];
                               ^" in "not" as{TypeError} core::int, let final<BottomType> #t354 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:217:39: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var list20 = [for (int i in [\"not\", \"int\"]) i];
                                      ^" in "int" as{TypeError} core::int])
      #t352.{core::List::add}(i);
  } =>#t352;
  core::Set<core::int> set20 = block {
    final core::Set<core::int> #t355 = col::LinkedHashSet::•<core::int>();
    for (core::int i in <core::int>[let final<BottomType> #t356 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:218:31: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var set20 = {for (int i in [\"not\", \"int\"]) i, null};
                              ^" in "not" as{TypeError} core::int, let final<BottomType> #t357 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:218:38: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var set20 = {for (int i in [\"not\", \"int\"]) i, null};
                                     ^" in "int" as{TypeError} core::int])
      #t355.{core::Set::add}(i);
    #t355.{core::Set::add}(null);
  } =>#t355;
  core::Map<core::String, core::int> map20 = block {
    final core::Map<core::String, core::int> #t358 = <core::String, core::int>{};
    for (core::int i in <core::int>[let final<BottomType> #t359 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:219:31: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var map20 = {for (int i in [\"not\", \"int\"]) \"bar\": i, \"baz\": null};
                              ^" in "not" as{TypeError} core::int, let final<BottomType> #t360 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:219:38: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var map20 = {for (int i in [\"not\", \"int\"]) \"bar\": i, \"baz\": null};
                                     ^" in "int" as{TypeError} core::int])
      #t358.{core::Map::[]=}("bar", i);
    #t358.{core::Map::[]=}("baz", null);
  } =>#t358;
  core::List<dynamic> list30 = block {
    final core::List<dynamic> #t361 = <dynamic>[];
    await for (dynamic i in let final<BottomType> #t362 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:220:37: Error: The type 'String' used in the 'for' loop must implement 'Stream<dynamic>'.
 - 'Stream' is from 'dart:async'.
  var list30 = [await for (var i in \"not stream\") i];
                                    ^" in "not stream" as{TypeError} asy::Stream<dynamic>)
      #t361.{core::List::add}(i);
  } =>#t361;
  core::Set<dynamic> set30 = block {
    final core::Set<dynamic> #t363 = col::LinkedHashSet::•<dynamic>();
    await for (dynamic i in let final<BottomType> #t364 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:221:36: Error: The type 'String' used in the 'for' loop must implement 'Stream<dynamic>'.
 - 'Stream' is from 'dart:async'.
  var set30 = {await for (var i in \"not stream\") i, null};
                                   ^" in "not stream" as{TypeError} asy::Stream<dynamic>)
      #t363.{core::Set::add}(i);
    #t363.{core::Set::add}(null);
  } =>#t363;
  core::Map<core::String, dynamic> map30 = block {
    final core::Map<core::String, dynamic> #t365 = <core::String, dynamic>{};
    await for (dynamic i in let final<BottomType> #t366 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:222:36: Error: The type 'String' used in the 'for' loop must implement 'Stream<dynamic>'.
 - 'Stream' is from 'dart:async'.
  var map30 = {await for (var i in \"not stream\") \"bar\": i, \"baz\": null};
                                   ^" in "not stream" as{TypeError} asy::Stream<dynamic>)
      #t365.{core::Map::[]=}("bar", i);
    #t365.{core::Map::[]=}("baz", null);
  } =>#t365;
  core::List<core::int> list40 = block {
    final core::List<core::int> #t367 = <core::int>[];
    await for (core::int i in asy::Stream::fromIterable<core::int>(<core::int>[let final<BottomType> #t368 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:223:58: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var list40 = [await for (int i in Stream.fromIterable([\"not\", \"int\"])) i];
                                                         ^" in "not" as{TypeError} core::int, let final<BottomType> #t369 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:223:65: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var list40 = [await for (int i in Stream.fromIterable([\"not\", \"int\"])) i];
                                                                ^" in "int" as{TypeError} core::int]))
      #t367.{core::List::add}(i);
  } =>#t367;
  core::Set<core::int> set40 = block {
    final core::Set<core::int> #t370 = col::LinkedHashSet::•<core::int>();
    await for (core::int i in asy::Stream::fromIterable<core::int>(<core::int>[let final<BottomType> #t371 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:224:57: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var set40 = {await for (int i in Stream.fromIterable([\"not\", \"int\"])) i, null};
                                                        ^" in "not" as{TypeError} core::int, let final<BottomType> #t372 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:224:64: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var set40 = {await for (int i in Stream.fromIterable([\"not\", \"int\"])) i, null};
                                                               ^" in "int" as{TypeError} core::int]))
      #t370.{core::Set::add}(i);
    #t370.{core::Set::add}(null);
  } =>#t370;
  core::Map<core::String, core::int> map40 = block {
    final core::Map<core::String, core::int> #t373 = <core::String, core::int>{};
    await for (core::int i in asy::Stream::fromIterable<core::int>(<core::int>[let final<BottomType> #t374 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:225:57: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var map40 = {await for (int i in Stream.fromIterable([\"not\", \"int\"])) \"bar\": i, \"baz\": null};
                                                        ^" in "not" as{TypeError} core::int, let final<BottomType> #t375 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:225:64: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
Try changing the type of the left hand side, or casting the right hand side to 'int'.
  var map40 = {await for (int i in Stream.fromIterable([\"not\", \"int\"])) \"bar\": i, \"baz\": null};
                                                               ^" in "int" as{TypeError} core::int]))
      #t373.{core::Map::[]=}("bar", i);
    #t373.{core::Map::[]=}("baz", null);
  } =>#t373;
  core::List<core::int> list50 = block {
    final core::List<core::int> #t376 = <core::int>[];
    for (; ; )
      #t376.{core::List::add}(42);
  } =>#t376;
  core::Set<core::int> set50 = block {
    final core::Set<core::int> #t377 = col::LinkedHashSet::•<core::int>();
    for (; ; )
      #t377.{core::Set::add}(42);
    #t377.{core::Set::add}(null);
  } =>#t377;
  core::Map<core::String, core::int> map50 = block {
    final core::Map<core::String, core::int> #t378 = <core::String, core::int>{};
    for (; ; )
      #t378.{core::Map::[]=}("bar", 42);
    #t378.{core::Map::[]=}("baz", null);
  } =>#t378;
  core::List<core::int> list60 = block {
    final core::List<core::int> #t379 = <core::int>[];
    for (; let final<BottomType> #t380 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:229:24: Error: A value of type 'String' can't be assigned to a variable of type 'bool'.
Try changing the type of the left hand side, or casting the right hand side to 'bool'.
  var list60 = [for (; \"not bool\";) 42];
                       ^" in "not bool" as{TypeError} core::bool; )
      #t379.{core::List::add}(42);
  } =>#t379;
  core::Set<core::int> set60 = block {
    final core::Set<core::int> #t381 = col::LinkedHashSet::•<core::int>();
    for (; let final<BottomType> #t382 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:230:23: Error: A value of type 'String' can't be assigned to a variable of type 'bool'.
Try changing the type of the left hand side, or casting the right hand side to 'bool'.
  var set60 = {for (; \"not bool\";) 42, null};
                      ^" in "not bool" as{TypeError} core::bool; )
      #t381.{core::Set::add}(42);
    #t381.{core::Set::add}(null);
  } =>#t381;
  core::Map<core::String, core::int> map60 = block {
    final core::Map<core::String, core::int> #t383 = <core::String, core::int>{};
    for (; let final<BottomType> #t384 = invalid-expression "pkg/front_end/testcases/control_flow_collection_inference.dart:231:23: Error: A value of type 'String' can't be assigned to a variable of type 'bool'.
Try changing the type of the left hand side, or casting the right hand side to 'bool'.
  var map60 = {for (; \"not bool\";) \"bar\": 42, \"baz\": null};
                      ^" in "not bool" as{TypeError} core::bool; )
      #t383.{core::Map::[]=}("bar", 42);
    #t383.{core::Map::[]=}("baz", null);
  } =>#t383;
}
static method testForElementErrorsNotAsync(asy::Stream<core::int> stream) → dynamic {
  block {
    final core::List<core::int> #t385 = <core::int>[];
    await for (core::int i in stream)
      #t385.{core::List::add}(i);
  } =>#t385;
  block {
    final core::Set<core::int> #t386 = col::LinkedHashSet::•<core::int>();
    await for (core::int i in stream)
      #t386.{core::Set::add}(i);
  } =>#t386;
  block {
    final core::Map<core::String, core::int> #t387 = <core::String, core::int>{};
    await for (core::int i in stream)
      #t387.{core::Map::[]=}("bar", i);
  } =>#t387;
}
static method main() → dynamic {}

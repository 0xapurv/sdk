library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;
import "mixin_from_opt_out_lib.dart" as mix;

import "org-dartlang-testcase:///mixin_from_opt_out_lib.dart";

abstract class _Class&Object&Mixin = core::Object with mix::Mixin /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_Class&Object&Mixin
    : super core::Object::•()
    ;
  abstract forwarding-stub operator ==(dynamic other) → core::bool*;
}
class Class extends self::_Class&Object&Mixin {
  synthetic constructor •() → self::Class
    ;
  abstract forwarding-stub operator ==(dynamic other) → core::bool*;
}
static method main() → dynamic
  ;

library;
import self as mix;
import "dart:core" as core;

class Mixin extends core::Object {
  synthetic constructor •() → mix::Mixin*
    ;
  method method(core::int* i) → core::int*
    ;
  abstract member-signature get _identityHashCode() → core::int*;
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*;
  abstract member-signature operator ==(dynamic other) → core::bool*;
  abstract member-signature get hashCode() → core::int*;
  abstract member-signature method toString() → core::String*;
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic;
  abstract member-signature get runtimeType() → core::Type*;
}

library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;
import "dart:async" as asy;

import "dart:async";

typedef G<invariant T extends core::Object? = dynamic> = <S extends T% = dynamic>(S%) → void;
typedef H<invariant T extends core::Object? = dynamic> = <S extends asy::FutureOr<T%> = dynamic>(S, asy::FutureOr<T%>) → void;
class C<T extends core::Object? = dynamic> extends core::Object {
  generic-covariant-impl field <S extends self::C::T% = dynamic>(S%) → void field1;
  generic-covariant-impl field <S extends asy::FutureOr<self::C::T%> = dynamic>(S, asy::FutureOr<self::C::T%>) → void field2;
  constructor •(<S extends self::C::T% = dynamic>(S%) → void field1, <S extends asy::FutureOr<self::C::T%> = dynamic>(S, asy::FutureOr<self::C::T%>) → void field2) → self::C<self::C::T%>
    ;
}
static method test1(self::C<core::num> c) → dynamic
  ;
static method test2(self::C<core::num?> c) → dynamic
  ;
static method test3<S extends core::num? = core::num?>(self::test3::S% s) → dynamic
  ;
static method main() → dynamic
  ;

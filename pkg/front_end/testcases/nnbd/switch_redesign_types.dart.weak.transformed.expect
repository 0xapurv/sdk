library /*isNonNullableByDefault*/;
//
// Problems in library:
//
// pkg/front_end/testcases/nnbd/switch_redesign_types.dart:34:16: Error: Type 'A' of the case expression is not a subtype of type 'B' of this switch expression.
//  - 'A' is from 'pkg/front_end/testcases/nnbd/switch_redesign_types.dart'.
//  - 'B' is from 'pkg/front_end/testcases/nnbd/switch_redesign_types.dart'.
//     case const A(42): // Error: not a subtype of B.
//                ^
// pkg/front_end/testcases/nnbd/switch_redesign_types.dart:29:11: Context: The switch expression is here.
//   switch (b) {
//           ^
//
import self as self;
import "dart:core" as core;

class A extends core::Object /*hasConstConstructor*/  {
  final field core::int foo;
  const constructor •(core::int foo) → self::A
    : self::A::foo = foo, super core::Object::•()
    ;
}
class B extends self::A /*hasConstConstructor*/  {
  const constructor •(core::int foo) → self::B
    : super self::A::•(foo)
    ;
}
class C extends self::B /*hasConstConstructor*/  {
  const constructor •(core::int foo) → self::C
    : super self::B::•(foo)
    ;
}
class D extends self::B /*hasConstConstructor*/  {
  const constructor •(core::int foo) → self::D
    : super self::B::•(foo)
    ;
  operator ==(dynamic other) → core::bool
    return core::identical(this, other);
}
static method bar(self::B b) → dynamic {
  #L1:
  switch(b) {
    #L2:
    case #C2:
      {
        break #L1;
      }
    #L3:
    case #C3:
      {
        break #L1;
      }
    #L4:
    case #C4:
      {
        break #L1;
      }
    #L5:
    case #C5:
      {
        break #L1;
      }
    #L6:
    default:
      {}
  }
}
static method main() → dynamic {}

constants  {
  #C1 = 42
  #C2 = self::B {foo:#C1}
  #C3 = self::C {foo:#C1}
  #C4 = self::A {foo:#C1}
  #C5 = self::D {foo:#C1}
}

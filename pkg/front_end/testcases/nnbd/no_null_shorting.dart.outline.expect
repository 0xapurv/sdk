library;
import self as self;
import "dart:core" as core;

class Class extends core::Object {
  field self::Class* field;
  synthetic constructor •() → self::Class*
    ;
  method method() → self::Class*
    ;
  operator [](self::Class* key) → self::Class*
    ;
  operator []=(self::Class* key, self::Class* value) → void
    ;
  operator +(core::int* value) → self::Class*
    ;
  operator unary-() → self::Class*
    ;
  abstract member-signature get _identityHashCode() → core::int*;
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*;
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*;
  abstract member-signature operator ==(dynamic other) → core::bool*;
  abstract member-signature get hashCode() → core::int*;
  abstract member-signature method toString() → core::String*;
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic;
  abstract member-signature get runtimeType() → core::Type*;
}
static method main() → dynamic
  ;
static method propertyAccess(self::Class* c) → void
  ;
static method indexAccess(self::Class* c) → void
  ;
static method operatorAccess(self::Class* c) → void
  ;
static method ifNull(self::Class* c) → void
  ;
static method throws(() →* void f) → void
  ;

library test;
import self as self;
import "dart:core" as core;

typedef Asserter<contravariant T extends core::Object* = dynamic> = (T*) →* void;
typedef AsserterBuilder<contravariant S extends core::Object* = dynamic, contravariant T extends core::Object* = dynamic> = (S*) →* (T*) →* void;
class DartType extends core::Object {
  synthetic constructor •() → self::DartType*
    : super core::Object::•()
    ;
}
abstract class C extends core::Object {
  static field (core::List<(self::DartType*) →* void>*) →* (self::DartType*) →* void assertBOf = null;
  field (core::List<(self::DartType*) →* void>*) →* (self::DartType*) →* void assertAOf = null;
  synthetic constructor •() → self::C*
    : super core::Object::•()
    ;
  static get assertCOf() → (core::List<(self::DartType*) →* void>*) →* (self::DartType*) →* void
    return null;
  abstract get assertDOf() → (core::List<(self::DartType*) →* void>*) →* (self::DartType*) →* void;
  method method((core::List<(self::DartType*) →* void>*) →* (self::DartType*) →* void assertEOf) → dynamic {
    let final self::C* #t1 = this in let final core::List<(self::DartType*) →* void>* #t2 = <(self::DartType*) →* void>[self::_isInt, self::_isString] in #t1.{self::C::assertAOf}.call(#t2);
    self::C::assertBOf.call(<(self::DartType*) →* void>[self::_isInt, self::_isString]);
    self::C::assertCOf.call(<(self::DartType*) →* void>[self::_isInt, self::_isString]);
    let final self::C* #t3 = this in let final core::List<(self::DartType*) →* void>* #t4 = <(self::DartType*) →* void>[self::_isInt, self::_isString] in #t3.{self::C::assertDOf}.call(#t4);
    assertEOf.call(<(self::DartType*) →* void>[self::_isInt, self::_isString]);
  }
}
abstract class G<T extends core::Object* = dynamic> extends core::Object {
  field (core::List<(self::DartType*) →* void>*) →* (self::DartType*) →* void assertAOf = null;
  synthetic constructor •() → self::G<self::G::T*>*
    : super core::Object::•()
    ;
  abstract get assertDOf() → (core::List<(self::DartType*) →* void>*) →* (self::DartType*) →* void;
  method method((core::List<(self::DartType*) →* void>*) →* (self::DartType*) →* void assertEOf) → dynamic {
    let final self::G<self::G::T*>* #t5 = this in let final core::List<(self::DartType*) →* void>* #t6 = <(self::DartType*) →* void>[self::_isInt, self::_isString] in #t5.{self::G::assertAOf}.call(#t6);
    let final self::G<self::G::T*>* #t7 = this in let final core::List<(self::DartType*) →* void>* #t8 = <(self::DartType*) →* void>[self::_isInt, self::_isString] in #t7.{self::G::assertAOf}.call(#t8);
    let final self::G<self::G::T*>* #t9 = this in let final core::List<(self::DartType*) →* void>* #t10 = <(self::DartType*) →* void>[self::_isInt, self::_isString] in #t9.{self::G::assertDOf}.call(#t10);
    assertEOf.call(<(self::DartType*) →* void>[self::_isInt, self::_isString]);
  }
}
static field (self::DartType*) →* void _isInt;
static field (self::DartType*) →* void _isString;
static field (core::List<(self::DartType*) →* void>*) →* (self::DartType*) →* void assertBOf;
static get assertCOf() → (core::List<(self::DartType*) →* void>*) →* (self::DartType*) →* void
  return null;
static method test() → dynamic {
  (core::List<(self::DartType*) →* void>*) →* (self::DartType*) →* void assertAOf;
  assertAOf.call(<(self::DartType*) →* void>[self::_isInt, self::_isString]);
  self::assertBOf.call(<(self::DartType*) →* void>[self::_isInt, self::_isString]);
  self::assertCOf.call(<(self::DartType*) →* void>[self::_isInt, self::_isString]);
  self::C::assertBOf.call(<(self::DartType*) →* void>[self::_isInt, self::_isString]);
  self::C::assertCOf.call(<(self::DartType*) →* void>[self::_isInt, self::_isString]);
  self::C* c;
  let final self::C* #t11 = c in let final core::List<(self::DartType*) →* void>* #t12 = <(self::DartType*) →* void>[self::_isInt, self::_isString] in #t11.{self::C::assertAOf}.call(#t12);
  let final self::C* #t13 = c in let final core::List<(self::DartType*) →* void>* #t14 = <(self::DartType*) →* void>[self::_isInt, self::_isString] in #t13.{self::C::assertDOf}.call(#t14);
  self::G<core::int*>* g;
  let final self::G<core::int*>* #t15 = g in let final core::List<(self::DartType*) →* void>* #t16 = <(self::DartType*) →* void>[self::_isInt, self::_isString] in #t15.{self::G::assertAOf}.call(#t16);
  let final self::G<core::int*>* #t17 = g in let final core::List<(self::DartType*) →* void>* #t18 = <(self::DartType*) →* void>[self::_isInt, self::_isString] in #t17.{self::G::assertDOf}.call(#t18);
}
static method main() → dynamic {}

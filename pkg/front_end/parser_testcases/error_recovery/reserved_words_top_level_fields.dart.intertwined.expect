parseUnit(int)
  skipErrorTokens(int)
  listener: beginCompilationUnit(int)
  syntheticPreviousToken(int)
  parseTopLevelDeclarationImpl(, Instance of 'DirectiveContext')
    parseMetadataStar()
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(int)
      parseFields(, null, null, null, null, null, , Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType()
        ensureIdentifier(, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(assert)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(assert)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(assert)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(assert)
      parseTopLevelMethod(;, null, ;, Instance of 'NoType', null, assert)
        listener: beginTopLevelMethod(;, null)
        listener: handleNoType(;)
        ensureIdentifier(;, topLevelFunctionDeclaration)
          reportRecoverableErrorWithToken(assert, Instance of 'Template<(Token) => Message>')
            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'assert'., null, {token: assert}], assert, assert)
          listener: handleIdentifier(assert, topLevelFunctionDeclaration)
        parseMethodTypeVar(assert)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(assert, assert, false, MemberKind.TopLevelMethod)
          parseFormalParameters(assert, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, x, null, null, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        inPlainSync()
                        parseAssert(return, Assert.Expression)
                          listener: beginAssert(assert, Assert.Expression)
                          parseExpression(()
                            parsePrecedenceExpression((, 1, true)
                              parseUnaryExpression((, true)
                                parsePrimary((, expression)
                                  parseSendOrFunctionLiteral((, expression)
                                    parseSend((, expression)
                                      ensureIdentifier((, expression)
                                        listener: handleIdentifier(x, expression)
                                      listener: handleNoTypeArguments(-)
                                      parseArgumentsOpt(x)
                                        listener: handleNoArguments(-)
                                      listener: handleSend(x, -)
                              listener: beginBinaryExpression(-)
                              parsePrecedenceExpression(-, 14, true)
                                parseUnaryExpression(-, true)
                                  parsePrimary(-, expression)
                                    parseLiteralInt(-)
                                      listener: handleLiteralInt(1)
                              listener: endBinaryExpression(-)
                          reportRecoverableError(assert, AssertAsExpression)
                            listener: handleRecoverableError(AssertAsExpression, assert, assert)
                          listener: endAssert(assert, Assert.Expression, (, null, +)
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true)
                      parseUnaryExpression(+, true)
                        parsePrimary(+, expression)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(assert, null, })
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType(})
        ensureIdentifier(}, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(break)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(break)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(break)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(break)
      parseTopLevelMethod(;, null, ;, Instance of 'NoType', null, break)
        listener: beginTopLevelMethod(;, null)
        listener: handleNoType(;)
        ensureIdentifier(;, topLevelFunctionDeclaration)
          reportRecoverableErrorWithToken(break, Instance of 'Template<(Token) => Message>')
            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'break'., null, {token: break}], break, break)
          listener: handleIdentifier(break, topLevelFunctionDeclaration)
        parseMethodTypeVar(break)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(break, break, false, MemberKind.TopLevelMethod)
          parseFormalParameters(break, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, x, null, null, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        inPlainSync()
                        parseSend(return, expression)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(break, Instance of 'Template<(Token) => Message>')
                              listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'break'., null, {token: break}], break, break)
                            rewriter()
                            listener: handleIdentifier(, expression)
                          listener: handleNoTypeArguments(break)
                          parseArgumentsOpt()
                            listener: handleNoArguments(break)
                          listener: handleSend(, break)
                ensureSemicolon()
                  reportRecoverableError(, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], break, break)
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, break)
          parseStatement(;)
            parseStatementX(;)
              parseBreakStatement(;)
                isBreakAllowed()
                reportRecoverableError(break, BreakOutsideOfLoop)
                  listener: handleRecoverableError(BreakOutsideOfLoop, break, break)
                ensureSemicolon(break)
                  reportRecoverableError(break, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], break, break)
                  rewriter()
                listener: handleBreakStatement(false, break, ;)
          notEofOrValue(}, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(()
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseParenthesizedExpressionOrFunctionLiteral(;)
                              parseParenthesizedExpression(;)
                                parseExpressionInParenthesis(;)
                                  parseExpressionInParenthesisRest(()
                                    parseExpression(()
                                      parsePrecedenceExpression((, 1, true)
                                        parseUnaryExpression((, true)
                                          parsePrimary((, expression)
                                            parseSendOrFunctionLiteral((, expression)
                                              parseSend((, expression)
                                                ensureIdentifier((, expression)
                                                  listener: handleIdentifier(x, expression)
                                                listener: handleNoTypeArguments(-)
                                                parseArgumentsOpt(x)
                                                  listener: handleNoArguments(-)
                                                listener: handleSend(x, -)
                                        listener: beginBinaryExpression(-)
                                        parsePrecedenceExpression(-, 14, true)
                                          parseUnaryExpression(-, true)
                                            parsePrimary(-, expression)
                                              parseLiteralInt(-)
                                                listener: handleLiteralInt(1)
                                        listener: endBinaryExpression(-)
                                    ensureCloseParen(1, ()
                                listener: handleParenthesizedExpression(()
                        listener: beginBinaryExpression(+)
                        parsePrecedenceExpression(+, 14, true)
                          parseUnaryExpression(+, true)
                            parsePrimary(+, expression)
                              parseLiteralInt(+)
                                listener: handleLiteralInt(1)
                        listener: endBinaryExpression(+)
                    ensureSemicolon(1)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(4, {, })
        listener: endTopLevelMethod(break, null, })
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType(})
        ensureIdentifier(}, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(case)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(case)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(case)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(case)
      parseTopLevelMethod(;, null, ;, Instance of 'NoType', null, case)
        listener: beginTopLevelMethod(;, null)
        listener: handleNoType(;)
        ensureIdentifier(;, topLevelFunctionDeclaration)
          reportRecoverableErrorWithToken(case, Instance of 'Template<(Token) => Message>')
            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'case'., null, {token: case}], case, case)
          listener: handleIdentifier(case, topLevelFunctionDeclaration)
        parseMethodTypeVar(case)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(case, case, false, MemberKind.TopLevelMethod)
          parseFormalParameters(case, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, x, null, null, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        inPlainSync()
                        parseSend(return, expression)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(case, Instance of 'Template<(Token) => Message>')
                              listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'case'., null, {token: case}], case, case)
                            listener: handleIdentifier(case, expression)
                          listener: handleNoTypeArguments(()
                          parseArgumentsOpt(case)
                            parseArguments(case)
                              parseArgumentsRest(()
                                listener: beginArguments(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true)
                                    parseUnaryExpression((, true)
                                      parsePrimary((, expression)
                                        parseSendOrFunctionLiteral((, expression)
                                          parseSend((, expression)
                                            ensureIdentifier((, expression)
                                              listener: handleIdentifier(x, expression)
                                            listener: handleNoTypeArguments(-)
                                            parseArgumentsOpt(x)
                                              listener: handleNoArguments(-)
                                            listener: handleSend(x, -)
                                    listener: beginBinaryExpression(-)
                                    parsePrecedenceExpression(-, 14, true)
                                      parseUnaryExpression(-, true)
                                        parsePrimary(-, expression)
                                          parseLiteralInt(-)
                                            listener: handleLiteralInt(1)
                                    listener: endBinaryExpression(-)
                                listener: endArguments(1, (, ))
                          listener: handleSend(case, +)
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true)
                      parseUnaryExpression(+, true)
                        parsePrimary(+, expression)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(case, null, })
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType(})
        ensureIdentifier(}, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(catch)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(catch)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(catch)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(catch)
      parseTopLevelMethod(;, null, ;, Instance of 'NoType', null, catch)
        listener: beginTopLevelMethod(;, null)
        listener: handleNoType(;)
        ensureIdentifier(;, topLevelFunctionDeclaration)
          reportRecoverableErrorWithToken(catch, Instance of 'Template<(Token) => Message>')
            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'catch'., null, {token: catch}], catch, catch)
          listener: handleIdentifier(catch, topLevelFunctionDeclaration)
        parseMethodTypeVar(catch)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(catch, catch, false, MemberKind.TopLevelMethod)
          parseFormalParameters(catch, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, x, null, null, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        inPlainSync()
                        parseSend(return, expression)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(catch, Instance of 'Template<(Token) => Message>')
                              listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'catch'., null, {token: catch}], catch, catch)
                            listener: handleIdentifier(catch, expression)
                          listener: handleNoTypeArguments(()
                          parseArgumentsOpt(catch)
                            parseArguments(catch)
                              parseArgumentsRest(()
                                listener: beginArguments(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true)
                                    parseUnaryExpression((, true)
                                      parsePrimary((, expression)
                                        parseSendOrFunctionLiteral((, expression)
                                          parseSend((, expression)
                                            ensureIdentifier((, expression)
                                              listener: handleIdentifier(x, expression)
                                            listener: handleNoTypeArguments(-)
                                            parseArgumentsOpt(x)
                                              listener: handleNoArguments(-)
                                            listener: handleSend(x, -)
                                    listener: beginBinaryExpression(-)
                                    parsePrecedenceExpression(-, 14, true)
                                      parseUnaryExpression(-, true)
                                        parsePrimary(-, expression)
                                          parseLiteralInt(-)
                                            listener: handleLiteralInt(1)
                                    listener: endBinaryExpression(-)
                                listener: endArguments(1, (, ))
                          listener: handleSend(catch, +)
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true)
                      parseUnaryExpression(+, true)
                        parsePrimary(+, expression)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(catch, null, })
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType(})
        ensureIdentifier(}, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(class)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(class)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(;, class, Instance of 'DirectiveContext')
      parseClassDeclarationModifiers(;, class)
      parseClassOrNamedMixinApplication(null, class)
        listener: beginClassOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          reportRecoverableErrorWithToken((, Instance of 'Template<(Token) => Message>')
            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '('., null, {token: (}], (, ()
          rewriter()
          listener: handleIdentifier(, classOrMixinDeclaration)
        listener: handleNoTypeVariables(int)
        listener: beginClassDeclaration(class, null, )
        parseClass(, class, class, )
          parseClassHeaderOpt(, class, class)
            parseClassExtendsOpt()
              listener: handleNoType()
              listener: handleClassExtends(null)
            parseWithClauseOpt()
              listener: handleClassNoWithClause()
            parseClassOrMixinImplementsOpt()
              listener: handleClassOrMixinImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassHeaderRecovery(, class, class)
            parseClassHeaderOpt(, class, class)
              parseClassExtendsOpt()
              parseWithClauseOpt()
              parseClassOrMixinImplementsOpt()
            skipUnexpectedTokenOpt(, [extends, with, implements, {])
            parseClassExtendsOpt()
              listener: handleNoType()
              listener: handleClassExtends(null)
            parseWithClauseOpt()
              listener: handleClassNoWithClause()
            parseClassOrMixinImplementsOpt()
              listener: handleClassOrMixinImplements(null, 0)
            listener: handleRecoverClassHeader()
          ensureBlock(, null, class declaration)
            reportRecoverableError(, Message[ExpectedClassOrMixinBody, A class declaration must have a body, even if it is empty., Try adding an empty body., {string: class declaration}])
              listener: handleRecoverableError(Message[ExpectedClassOrMixinBody, A class declaration must have a body, even if it is empty., Try adding an empty body., {string: class declaration}], int, int)
            insertBlock()
              rewriter()
              rewriter()
          parseClassOrMixinOrExtensionBody(, DeclarationKind.Class, )
            listener: beginClassOrMixinBody(DeclarationKind.Class, {)
            notEofOrValue(}, })
            listener: endClassOrMixinBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'SimpleType', x, DeclarationKind.TopLevel, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(x)
        listener: handleType(int, null)
        ensureIdentifier(int, topLevelVariableDeclaration)
          listener: handleIdentifier(x, topLevelVariableDeclaration)
        parseFieldInitializerOpt(x, x, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer())
        ensureSemicolon(x)
          reportRecoverableError(x, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], x, x)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration())
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar())
      listener: endMetadataStar(0)
    listener: beginTopLevelMember())
    parseInvalidTopLevelDeclaration(;)
      reportRecoverableErrorWithToken(), Instance of 'Template<(Token) => Message>')
        listener: handleRecoverableError(Message[ExpectedDeclaration, Expected a declaration, but got ')'., null, {token: )}], ), ))
      listener: handleInvalidTopLevelDeclaration())
  listener: endTopLevelDeclaration({)
  parseTopLevelDeclarationImpl(), Instance of 'DirectiveContext')
    parseMetadataStar())
      listener: beginMetadataStar({)
      listener: endMetadataStar(0)
    listener: beginTopLevelMember({)
    parseInvalidTopLevelDeclaration())
      reportRecoverableErrorWithToken({, Instance of 'Template<(Token) => Message>')
        listener: handleRecoverableError(Message[ExpectedDeclaration, Expected a declaration, but got '{'., null, {token: {}], {, {)
      parseInvalidBlock())
        parseBlock(), BlockKind(invalid))
          ensureBlock(), null, null)
          listener: beginBlock({, BlockKind(invalid))
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        inPlainSync()
                        parseSend(return, expression)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(class, Instance of 'Template<(Token) => Message>')
                            listener: handleIdentifier(class, expression)
                          listener: handleNoTypeArguments(()
                          parseArgumentsOpt(class)
                            parseArguments(class)
                              parseArgumentsRest(()
                                listener: beginArguments(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true)
                                    parseUnaryExpression((, true)
                                      parsePrimary((, expression)
                                        parseSendOrFunctionLiteral((, expression)
                                          parseSend((, expression)
                                            ensureIdentifier((, expression)
                                              listener: handleIdentifier(x, expression)
                                            listener: handleNoTypeArguments(-)
                                            parseArgumentsOpt(x)
                                              listener: handleNoArguments(-)
                                            listener: handleSend(x, -)
                                    listener: beginBinaryExpression(-)
                                    parsePrecedenceExpression(-, 14, true)
                                      parseUnaryExpression(-, true)
                                        parsePrimary(-, expression)
                                          parseLiteralInt(-)
                                            listener: handleLiteralInt(1)
                                    listener: endBinaryExpression(-)
                                listener: endArguments(1, (, ))
                          listener: handleSend(class, +)
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true)
                      parseUnaryExpression(+, true)
                        parsePrimary(+, expression)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, })
          listener: endBlock(2, {, }, BlockKind(invalid))
        listener: handleInvalidTopLevelBlock({)
      listener: handleInvalidTopLevelDeclaration(})
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType(})
        ensureIdentifier(}, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(const)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(const)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(const)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(const)
      insertSyntheticIdentifier(const, methodDeclaration, message: null, messageOnToken: null)
        reportRecoverableError((, Message[ExpectedIdentifier, Expected an identifier, but got '('., null, {token: (}])
          listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '('., null, {token: (}], (, ()
        rewriter()
      reportRecoverableErrorWithToken(const, Instance of 'Template<(Token) => Message>')
        listener: handleRecoverableError(Message[ExtraneousModifier, Can't have modifier 'const' here., Try removing 'const'., {token: const}], const, const)
      parseTopLevelMethod(;, null, const, Instance of 'NoType', null, )
        listener: beginTopLevelMethod(;, null)
        listener: handleNoType(const)
        ensureIdentifier(const, topLevelFunctionDeclaration)
          listener: handleIdentifier(, topLevelFunctionDeclaration)
        parseMethodTypeVar()
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(, , false, MemberKind.TopLevelMethod)
          parseFormalParameters(, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, x, null, null, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        parseConstExpression(return)
                          listener: beginConstExpression(const)
                          parseConstructorReference(const, null)
                            ensureIdentifier(const, constructorReference)
                              insertSyntheticIdentifier(const, constructorReference, message: Message[ExpectedIdentifier, Expected an identifier, but got '('., null, {token: (}], messageOnToken: null)
                                reportRecoverableError((, Message[ExpectedIdentifier, Expected an identifier, but got '('., null, {token: (}])
                                  listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '('., null, {token: (}], (, ()
                                rewriter()
                              listener: handleIdentifier(, constructorReference)
                            listener: beginConstructorReference()
                            parseQualifiedRestOpt(, constructorReferenceContinuation)
                            listener: handleNoTypeArguments(()
                            listener: handleNoConstructorReferenceContinuationAfterTypeArguments(()
                            listener: endConstructorReference(, null, ()
                          parseConstructorInvocationArguments()
                            parseArgumentsRest(()
                              listener: beginArguments(()
                              parseExpression(()
                                parsePrecedenceExpression((, 1, true)
                                  parseUnaryExpression((, true)
                                    parsePrimary((, expression)
                                      parseSendOrFunctionLiteral((, expression)
                                        parseSend((, expression)
                                          ensureIdentifier((, expression)
                                            listener: handleIdentifier(x, expression)
                                          listener: handleNoTypeArguments(-)
                                          parseArgumentsOpt(x)
                                            listener: handleNoArguments(-)
                                          listener: handleSend(x, -)
                                  listener: beginBinaryExpression(-)
                                  parsePrecedenceExpression(-, 14, true)
                                    parseUnaryExpression(-, true)
                                      parsePrimary(-, expression)
                                        parseLiteralInt(-)
                                          listener: handleLiteralInt(1)
                                  listener: endBinaryExpression(-)
                              listener: endArguments(1, (, ))
                          listener: endConstExpression(const)
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true)
                      parseUnaryExpression(+, true)
                        parsePrimary(+, expression)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(const, null, })
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType(})
        ensureIdentifier(}, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(continue)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(continue)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(continue)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(continue)
      parseTopLevelMethod(;, null, ;, Instance of 'NoType', null, continue)
        listener: beginTopLevelMethod(;, null)
        listener: handleNoType(;)
        ensureIdentifier(;, topLevelFunctionDeclaration)
          reportRecoverableErrorWithToken(continue, Instance of 'Template<(Token) => Message>')
            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'continue'., null, {token: continue}], continue, continue)
          listener: handleIdentifier(continue, topLevelFunctionDeclaration)
        parseMethodTypeVar(continue)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(continue, continue, false, MemberKind.TopLevelMethod)
          parseFormalParameters(continue, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, x, null, null, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        inPlainSync()
                        parseSend(return, expression)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(continue, Instance of 'Template<(Token) => Message>')
                              listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'continue'., null, {token: continue}], continue, continue)
                            rewriter()
                            listener: handleIdentifier(, expression)
                          listener: handleNoTypeArguments(continue)
                          parseArgumentsOpt()
                            listener: handleNoArguments(continue)
                          listener: handleSend(, continue)
                ensureSemicolon()
                  reportRecoverableError(, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], continue, continue)
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, continue)
          parseStatement(;)
            parseStatementX(;)
              parseContinueStatement(;)
                isContinueAllowed()
                reportRecoverableError(continue, ContinueOutsideOfLoop)
                  listener: handleRecoverableError(ContinueOutsideOfLoop, continue, continue)
                ensureSemicolon(continue)
                  reportRecoverableError(continue, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], continue, continue)
                  rewriter()
                listener: handleContinueStatement(false, continue, ;)
          notEofOrValue(}, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(()
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseParenthesizedExpressionOrFunctionLiteral(;)
                              parseParenthesizedExpression(;)
                                parseExpressionInParenthesis(;)
                                  parseExpressionInParenthesisRest(()
                                    parseExpression(()
                                      parsePrecedenceExpression((, 1, true)
                                        parseUnaryExpression((, true)
                                          parsePrimary((, expression)
                                            parseSendOrFunctionLiteral((, expression)
                                              parseSend((, expression)
                                                ensureIdentifier((, expression)
                                                  listener: handleIdentifier(x, expression)
                                                listener: handleNoTypeArguments(-)
                                                parseArgumentsOpt(x)
                                                  listener: handleNoArguments(-)
                                                listener: handleSend(x, -)
                                        listener: beginBinaryExpression(-)
                                        parsePrecedenceExpression(-, 14, true)
                                          parseUnaryExpression(-, true)
                                            parsePrimary(-, expression)
                                              parseLiteralInt(-)
                                                listener: handleLiteralInt(1)
                                        listener: endBinaryExpression(-)
                                    ensureCloseParen(1, ()
                                listener: handleParenthesizedExpression(()
                        listener: beginBinaryExpression(+)
                        parsePrecedenceExpression(+, 14, true)
                          parseUnaryExpression(+, true)
                            parsePrimary(+, expression)
                              parseLiteralInt(+)
                                listener: handleLiteralInt(1)
                        listener: endBinaryExpression(+)
                    ensureSemicolon(1)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(4, {, })
        listener: endTopLevelMethod(continue, null, })
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType(})
        ensureIdentifier(}, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(default)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(default)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(default)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(default)
      parseTopLevelMethod(;, null, ;, Instance of 'NoType', null, default)
        listener: beginTopLevelMethod(;, null)
        listener: handleNoType(;)
        ensureIdentifier(;, topLevelFunctionDeclaration)
          reportRecoverableErrorWithToken(default, Instance of 'Template<(Token) => Message>')
            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'default'., null, {token: default}], default, default)
          listener: handleIdentifier(default, topLevelFunctionDeclaration)
        parseMethodTypeVar(default)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(default, default, false, MemberKind.TopLevelMethod)
          parseFormalParameters(default, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, x, null, null, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        inPlainSync()
                        parseSend(return, expression)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(default, Instance of 'Template<(Token) => Message>')
                              listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'default'., null, {token: default}], default, default)
                            listener: handleIdentifier(default, expression)
                          listener: handleNoTypeArguments(()
                          parseArgumentsOpt(default)
                            parseArguments(default)
                              parseArgumentsRest(()
                                listener: beginArguments(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true)
                                    parseUnaryExpression((, true)
                                      parsePrimary((, expression)
                                        parseSendOrFunctionLiteral((, expression)
                                          parseSend((, expression)
                                            ensureIdentifier((, expression)
                                              listener: handleIdentifier(x, expression)
                                            listener: handleNoTypeArguments(-)
                                            parseArgumentsOpt(x)
                                              listener: handleNoArguments(-)
                                            listener: handleSend(x, -)
                                    listener: beginBinaryExpression(-)
                                    parsePrecedenceExpression(-, 14, true)
                                      parseUnaryExpression(-, true)
                                        parsePrimary(-, expression)
                                          parseLiteralInt(-)
                                            listener: handleLiteralInt(1)
                                    listener: endBinaryExpression(-)
                                listener: endArguments(1, (, ))
                          listener: handleSend(default, +)
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true)
                      parseUnaryExpression(+, true)
                        parsePrimary(+, expression)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(default, null, })
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType(})
        ensureIdentifier(}, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(do)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(do)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(do)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(do)
      parseTopLevelMethod(;, null, ;, Instance of 'NoType', null, do)
        listener: beginTopLevelMethod(;, null)
        listener: handleNoType(;)
        ensureIdentifier(;, topLevelFunctionDeclaration)
          reportRecoverableErrorWithToken(do, Instance of 'Template<(Token) => Message>')
            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'do'., null, {token: do}], do, do)
          listener: handleIdentifier(do, topLevelFunctionDeclaration)
        parseMethodTypeVar(do)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(do, do, false, MemberKind.TopLevelMethod)
          parseFormalParameters(do, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, x, null, null, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        inPlainSync()
                        parseSend(return, expression)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(do, Instance of 'Template<(Token) => Message>')
                              listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'do'., null, {token: do}], do, do)
                            rewriter()
                            listener: handleIdentifier(, expression)
                          listener: handleNoTypeArguments(do)
                          parseArgumentsOpt()
                            listener: handleNoArguments(do)
                          listener: handleSend(, do)
                ensureSemicolon()
                  reportRecoverableError(, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], do, do)
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, do)
          parseStatement(;)
            parseStatementX(;)
              parseDoWhileStatement(;)
                listener: beginDoWhileStatement(do)
                listener: beginDoWhileStatementBody(()
                parseStatement(do)
                  parseStatementX(do)
                    parseExpressionStatementOrDeclaration(do, false)
                      parseExpressionStatementOrDeclarationAfterModifiers(do, do, null, null, null, false)
                        looksLikeLocalFunction(()
                        parseExpressionStatement(do)
                          parseExpression(do)
                            parsePrecedenceExpression(do, 1, true)
                              parseUnaryExpression(do, true)
                                parsePrimary(do, expression)
                                  parseParenthesizedExpressionOrFunctionLiteral(do)
                                    parseParenthesizedExpression(do)
                                      parseExpressionInParenthesis(do)
                                        parseExpressionInParenthesisRest(()
                                          parseExpression(()
                                            parsePrecedenceExpression((, 1, true)
                                              parseUnaryExpression((, true)
                                                parsePrimary((, expression)
                                                  parseSendOrFunctionLiteral((, expression)
                                                    parseSend((, expression)
                                                      ensureIdentifier((, expression)
                                                        listener: handleIdentifier(x, expression)
                                                      listener: handleNoTypeArguments(-)
                                                      parseArgumentsOpt(x)
                                                        listener: handleNoArguments(-)
                                                      listener: handleSend(x, -)
                                              listener: beginBinaryExpression(-)
                                              parsePrecedenceExpression(-, 14, true)
                                                parseUnaryExpression(-, true)
                                                  parsePrimary(-, expression)
                                                    parseLiteralInt(-)
                                                      listener: handleLiteralInt(1)
                                              listener: endBinaryExpression(-)
                                          ensureCloseParen(1, ()
                                      listener: handleParenthesizedExpression(()
                              listener: beginBinaryExpression(+)
                              parsePrecedenceExpression(+, 14, true)
                                parseUnaryExpression(+, true)
                                  parsePrimary(+, expression)
                                    parseLiteralInt(+)
                                      listener: handleLiteralInt(1)
                              listener: endBinaryExpression(+)
                          ensureSemicolon(1)
                          listener: handleExpressionStatement(;)
                listener: endDoWhileStatementBody(;)
                reportRecoverableError(}, Message[ExpectedButGot, Expected 'while' before this., null, {string: while}])
                  listener: handleRecoverableError(Message[ExpectedButGot, Expected 'while' before this., null, {string: while}], }, })
                rewriter()
                ensureParenthesizedCondition(while)
                  reportRecoverableError(}, Message[ExpectedToken, Expected to find '('., null, {string: (}])
                    listener: handleRecoverableError(Message[ExpectedToken, Expected to find '('., null, {string: (}], }, })
                  rewriter()
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSend((, expression)
                              ensureIdentifier((, expression)
                                reportRecoverableErrorWithToken(), Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '}'., null, {token: }}], }, })
                                rewriter()
                                listener: handleIdentifier(, expression)
                              listener: handleNoTypeArguments())
                              parseArgumentsOpt()
                                listener: handleNoArguments())
                              listener: handleSend(, ))
                    ensureCloseParen(, ()
                  listener: handleParenthesizedCondition(()
                ensureSemicolon())
                  reportRecoverableError(, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], }, })
                  rewriter()
                listener: endDoWhileStatement(do, while, ;)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(3, {, })
        listener: endTopLevelMethod(do, null, })
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType(})
        ensureIdentifier(}, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(else)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(else)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(else)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(else)
      parseTopLevelMethod(;, null, ;, Instance of 'NoType', null, else)
        listener: beginTopLevelMethod(;, null)
        listener: handleNoType(;)
        ensureIdentifier(;, topLevelFunctionDeclaration)
          reportRecoverableErrorWithToken(else, Instance of 'Template<(Token) => Message>')
            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'else'., null, {token: else}], else, else)
          listener: handleIdentifier(else, topLevelFunctionDeclaration)
        parseMethodTypeVar(else)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(else, else, false, MemberKind.TopLevelMethod)
          parseFormalParameters(else, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, x, null, null, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        inPlainSync()
                        parseSend(return, expression)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(else, Instance of 'Template<(Token) => Message>')
                              listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'else'., null, {token: else}], else, else)
                            rewriter()
                            listener: handleIdentifier(, expression)
                          listener: handleNoTypeArguments(else)
                          parseArgumentsOpt()
                            listener: handleNoArguments(else)
                          listener: handleSend(, else)
                ensureSemicolon()
                  reportRecoverableError(, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], else, else)
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, else)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(else)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            inPlainSync()
                            parseSend(;, expression)
                              ensureIdentifier(;, expression)
                                reportRecoverableErrorWithToken(else, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'else'., null, {token: else}], else, else)
                                rewriter()
                                listener: handleIdentifier(, expression)
                              listener: handleNoTypeArguments(else)
                              parseArgumentsOpt()
                                listener: handleNoArguments(else)
                              listener: handleSend(, else)
                    ensureSemicolon()
                      reportRecoverableError(, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                        listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], else, else)
                      rewriter()
                    listener: handleExpressionStatement(;)
          reportRecoverableError(;, Message[UnexpectedToken, Unexpected token ';'., null, {token: ;}])
            listener: handleRecoverableError(Message[UnexpectedToken, Unexpected token ';'., null, {token: ;}], else, else)
          notEofOrValue(}, ()
          parseStatement(else)
            parseStatementX(else)
              parseExpressionStatementOrDeclaration(else, false)
                parseExpressionStatementOrDeclarationAfterModifiers(else, else, null, null, null, false)
                  looksLikeLocalFunction(()
                  parseExpressionStatement(else)
                    parseExpression(else)
                      parsePrecedenceExpression(else, 1, true)
                        parseUnaryExpression(else, true)
                          parsePrimary(else, expression)
                            parseParenthesizedExpressionOrFunctionLiteral(else)
                              parseParenthesizedExpression(else)
                                parseExpressionInParenthesis(else)
                                  parseExpressionInParenthesisRest(()
                                    parseExpression(()
                                      parsePrecedenceExpression((, 1, true)
                                        parseUnaryExpression((, true)
                                          parsePrimary((, expression)
                                            parseSendOrFunctionLiteral((, expression)
                                              parseSend((, expression)
                                                ensureIdentifier((, expression)
                                                  listener: handleIdentifier(x, expression)
                                                listener: handleNoTypeArguments(-)
                                                parseArgumentsOpt(x)
                                                  listener: handleNoArguments(-)
                                                listener: handleSend(x, -)
                                        listener: beginBinaryExpression(-)
                                        parsePrecedenceExpression(-, 14, true)
                                          parseUnaryExpression(-, true)
                                            parsePrimary(-, expression)
                                              parseLiteralInt(-)
                                                listener: handleLiteralInt(1)
                                        listener: endBinaryExpression(-)
                                    ensureCloseParen(1, ()
                                listener: handleParenthesizedExpression(()
                        listener: beginBinaryExpression(+)
                        parsePrecedenceExpression(+, 14, true)
                          parseUnaryExpression(+, true)
                            parsePrimary(+, expression)
                              parseLiteralInt(+)
                                listener: handleLiteralInt(1)
                        listener: endBinaryExpression(+)
                    ensureSemicolon(1)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(4, {, })
        listener: endTopLevelMethod(else, null, })
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType(})
        ensureIdentifier(}, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(enum)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(enum)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(enum)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(;, enum, Instance of 'DirectiveContext')
      parseTopLevelKeywordModifiers(;, enum)
      parseEnum(enum)
        listener: beginEnum(enum)
        ensureIdentifier(enum, enumDeclaration)
          reportRecoverableErrorWithToken((, Instance of 'Template<(Token) => Message>')
            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '('., null, {token: (}], (, ()
          rewriter()
          listener: handleIdentifier(, enumDeclaration)
        ensureBlock(, Instance of 'Template<(Token) => Message>', null)
          reportRecoverableError(int, Message[ExpectedEnumBody, Expected a enum body, but got 'int'., An enum definition must have a body with at least one constant name., {token: int}])
            listener: handleRecoverableError(Message[ExpectedEnumBody, Expected a enum body, but got 'int'., An enum definition must have a body with at least one constant name., {token: int}], int, int)
          insertBlock()
            rewriter()
            rewriter()
        listener: endEnum(enum, {, 0)
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'SimpleType', x, DeclarationKind.TopLevel, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(x)
        listener: handleType(int, null)
        ensureIdentifier(int, topLevelVariableDeclaration)
          listener: handleIdentifier(x, topLevelVariableDeclaration)
        parseFieldInitializerOpt(x, x, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer())
        ensureSemicolon(x)
          reportRecoverableError(x, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], x, x)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration())
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar())
      listener: endMetadataStar(0)
    listener: beginTopLevelMember())
    parseInvalidTopLevelDeclaration(;)
      reportRecoverableErrorWithToken(), Instance of 'Template<(Token) => Message>')
        listener: handleRecoverableError(Message[ExpectedDeclaration, Expected a declaration, but got ')'., null, {token: )}], ), ))
      listener: handleInvalidTopLevelDeclaration())
  listener: endTopLevelDeclaration({)
  parseTopLevelDeclarationImpl(), Instance of 'DirectiveContext')
    parseMetadataStar())
      listener: beginMetadataStar({)
      listener: endMetadataStar(0)
    listener: beginTopLevelMember({)
    parseInvalidTopLevelDeclaration())
      reportRecoverableErrorWithToken({, Instance of 'Template<(Token) => Message>')
        listener: handleRecoverableError(Message[ExpectedDeclaration, Expected a declaration, but got '{'., null, {token: {}], {, {)
      parseInvalidBlock())
        parseBlock(), BlockKind(invalid))
          ensureBlock(), null, null)
          listener: beginBlock({, BlockKind(invalid))
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        inPlainSync()
                        parseSend(return, expression)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(enum, Instance of 'Template<(Token) => Message>')
                            listener: handleIdentifier(enum, expression)
                          listener: handleNoTypeArguments(()
                          parseArgumentsOpt(enum)
                            parseArguments(enum)
                              parseArgumentsRest(()
                                listener: beginArguments(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true)
                                    parseUnaryExpression((, true)
                                      parsePrimary((, expression)
                                        parseSendOrFunctionLiteral((, expression)
                                          parseSend((, expression)
                                            ensureIdentifier((, expression)
                                              listener: handleIdentifier(x, expression)
                                            listener: handleNoTypeArguments(-)
                                            parseArgumentsOpt(x)
                                              listener: handleNoArguments(-)
                                            listener: handleSend(x, -)
                                    listener: beginBinaryExpression(-)
                                    parsePrecedenceExpression(-, 14, true)
                                      parseUnaryExpression(-, true)
                                        parsePrimary(-, expression)
                                          parseLiteralInt(-)
                                            listener: handleLiteralInt(1)
                                    listener: endBinaryExpression(-)
                                listener: endArguments(1, (, ))
                          listener: handleSend(enum, +)
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true)
                      parseUnaryExpression(+, true)
                        parsePrimary(+, expression)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, })
          listener: endBlock(2, {, }, BlockKind(invalid))
        listener: handleInvalidTopLevelBlock({)
      listener: handleInvalidTopLevelDeclaration(})
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType(})
        ensureIdentifier(}, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(extends)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(extends)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(extends)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(extends)
      parseTopLevelMethod(;, null, ;, Instance of 'NoType', null, extends)
        listener: beginTopLevelMethod(;, null)
        listener: handleNoType(;)
        ensureIdentifier(;, topLevelFunctionDeclaration)
          reportRecoverableErrorWithToken(extends, Instance of 'Template<(Token) => Message>')
            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'extends'., null, {token: extends}], extends, extends)
          listener: handleIdentifier(extends, topLevelFunctionDeclaration)
        parseMethodTypeVar(extends)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(extends, extends, false, MemberKind.TopLevelMethod)
          parseFormalParameters(extends, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, x, null, null, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        inPlainSync()
                        parseSend(return, expression)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(extends, Instance of 'Template<(Token) => Message>')
                              listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'extends'., null, {token: extends}], extends, extends)
                            listener: handleIdentifier(extends, expression)
                          listener: handleNoTypeArguments(()
                          parseArgumentsOpt(extends)
                            parseArguments(extends)
                              parseArgumentsRest(()
                                listener: beginArguments(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true)
                                    parseUnaryExpression((, true)
                                      parsePrimary((, expression)
                                        parseSendOrFunctionLiteral((, expression)
                                          parseSend((, expression)
                                            ensureIdentifier((, expression)
                                              listener: handleIdentifier(x, expression)
                                            listener: handleNoTypeArguments(-)
                                            parseArgumentsOpt(x)
                                              listener: handleNoArguments(-)
                                            listener: handleSend(x, -)
                                    listener: beginBinaryExpression(-)
                                    parsePrecedenceExpression(-, 14, true)
                                      parseUnaryExpression(-, true)
                                        parsePrimary(-, expression)
                                          parseLiteralInt(-)
                                            listener: handleLiteralInt(1)
                                    listener: endBinaryExpression(-)
                                listener: endArguments(1, (, ))
                          listener: handleSend(extends, +)
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true)
                      parseUnaryExpression(+, true)
                        parsePrimary(+, expression)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(extends, null, })
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType(})
        ensureIdentifier(}, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(false)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(false)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(false)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(false)
      parseTopLevelMethod(;, null, ;, Instance of 'NoType', null, false)
        listener: beginTopLevelMethod(;, null)
        listener: handleNoType(;)
        ensureIdentifier(;, topLevelFunctionDeclaration)
          reportRecoverableErrorWithToken(false, Instance of 'Template<(Token) => Message>')
            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'false'., null, {token: false}], false, false)
          listener: handleIdentifier(false, topLevelFunctionDeclaration)
        parseMethodTypeVar(false)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(false, false, false, MemberKind.TopLevelMethod)
          parseFormalParameters(false, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, x, null, null, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        parseLiteralBool(return)
                          listener: handleLiteralBool(false)
                    parseArgumentOrIndexStar(false, Instance of 'NoTypeParamOrArg', false)
                      listener: handleNoTypeArguments(()
                      parseArguments(false)
                        parseArgumentsRest(()
                          listener: beginArguments(()
                          parseExpression(()
                            parsePrecedenceExpression((, 1, true)
                              parseUnaryExpression((, true)
                                parsePrimary((, expression)
                                  parseSendOrFunctionLiteral((, expression)
                                    parseSend((, expression)
                                      ensureIdentifier((, expression)
                                        listener: handleIdentifier(x, expression)
                                      listener: handleNoTypeArguments(-)
                                      parseArgumentsOpt(x)
                                        listener: handleNoArguments(-)
                                      listener: handleSend(x, -)
                              listener: beginBinaryExpression(-)
                              parsePrecedenceExpression(-, 14, true)
                                parseUnaryExpression(-, true)
                                  parsePrimary(-, expression)
                                    parseLiteralInt(-)
                                      listener: handleLiteralInt(1)
                              listener: endBinaryExpression(-)
                          listener: endArguments(1, (, ))
                      listener: handleSend((, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true)
                      parseUnaryExpression(+, true)
                        parsePrimary(+, expression)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(false, null, })
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType(})
        ensureIdentifier(}, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(final)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(final)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(final)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(final)
      insertSyntheticIdentifier(final, methodDeclaration, message: null, messageOnToken: null)
        reportRecoverableError((, Message[ExpectedIdentifier, Expected an identifier, but got '('., null, {token: (}])
          listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '('., null, {token: (}], (, ()
        rewriter()
      reportRecoverableErrorWithToken(final, Instance of 'Template<(Token) => Message>')
        listener: handleRecoverableError(Message[ExtraneousModifier, Can't have modifier 'final' here., Try removing 'final'., {token: final}], final, final)
      parseTopLevelMethod(;, null, final, Instance of 'NoType', null, )
        listener: beginTopLevelMethod(;, null)
        listener: handleNoType(final)
        ensureIdentifier(final, topLevelFunctionDeclaration)
          listener: handleIdentifier(, topLevelFunctionDeclaration)
        parseMethodTypeVar()
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(, , false, MemberKind.TopLevelMethod)
          parseFormalParameters(, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, x, null, null, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        inPlainSync()
                        parseSend(return, expression)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(final, Instance of 'Template<(Token) => Message>')
                              listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'final'., null, {token: final}], final, final)
                            rewriter()
                            listener: handleIdentifier(, expression)
                          listener: handleNoTypeArguments(final)
                          parseArgumentsOpt()
                            listener: handleNoArguments(final)
                          listener: handleSend(, final)
                ensureSemicolon()
                  reportRecoverableError(, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], final, final)
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, final)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(final, ;, null, final, null, false)
                looksLikeLocalFunction(()
                listener: beginMetadataStar(final)
                listener: endMetadataStar(0)
                listener: handleNoType(final)
                listener: beginVariablesDeclaration((, null, final)
                parseVariablesDeclarationRest(final, true)
                  parseOptionallyInitializedIdentifier(final)
                    ensureIdentifier(final, localVariableDeclaration)
                      reportRecoverableErrorWithToken((, Instance of 'Template<(Token) => Message>')
                        listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '('., null, {token: (}], (, ()
                      rewriter()
                      listener: handleIdentifier(, localVariableDeclaration)
                    listener: beginInitializedIdentifier()
                    parseVariableInitializerOpt()
                      listener: handleNoVariableInitializer(x)
                    listener: endInitializedIdentifier()
                  ensureSemicolon()
                    reportRecoverableError(, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                      listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], x, x)
                    rewriter()
                  listener: endVariablesDeclaration(1, ;)
          notEofOrValue(}, x)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                looksLikeLocalFunction(x)
                parseExpressionStatement(;)
                  parseExpression(;)
                    parsePrecedenceExpression(;, 1, true)
                      parseUnaryExpression(;, true)
                        parsePrimary(;, expression)
                          parseSendOrFunctionLiteral(;, expression)
                            parseSend(;, expression)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(x, expression)
                              listener: handleNoTypeArguments(-)
                              parseArgumentsOpt(x)
                                listener: handleNoArguments(-)
                              listener: handleSend(x, -)
                      listener: beginBinaryExpression(-)
                      parsePrecedenceExpression(-, 14, true)
                        parseUnaryExpression(-, true)
                          parsePrimary(-, expression)
                            parseLiteralInt(-)
                              listener: handleLiteralInt(1)
                      listener: endBinaryExpression(-)
                  ensureSemicolon(1)
                    reportRecoverableError(1, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                      listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], 1, 1)
                    rewriter()
                  listener: handleExpressionStatement(;)
          notEofOrValue(}, ))
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction())
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseSend(;, expression)
                              ensureIdentifier(;, expression)
                                reportRecoverableErrorWithToken(), Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got ')'., null, {token: )}], ), ))
                                rewriter()
                                listener: handleIdentifier(, expression)
                              listener: handleNoTypeArguments())
                              parseArgumentsOpt()
                                listener: handleNoArguments())
                              listener: handleSend(, ))
                    ensureSemicolon()
                      reportRecoverableError(, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                        listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], ), ))
                      rewriter()
                    listener: handleExpressionStatement(;)
          reportRecoverableError(;, Message[UnexpectedToken, Unexpected token ';'., null, {token: ;}])
            listener: handleRecoverableError(Message[UnexpectedToken, Unexpected token ';'., null, {token: ;}], ), ))
          notEofOrValue(}, +)
          parseStatement())
            parseStatementX())
              parseExpressionStatementOrDeclaration(), false)
                parseExpressionStatementOrDeclarationAfterModifiers(), ), null, null, null, false)
                  looksLikeLocalFunction(+)
                  parseExpressionStatement())
                    parseExpression())
                      parsePrecedenceExpression(), 1, true)
                        parseUnaryExpression(), true)
                          rewriteAndRecover(), UnsupportedPrefixPlus, )
                            reportRecoverableError(+, UnsupportedPrefixPlus)
                              listener: handleRecoverableError(UnsupportedPrefixPlus, +, +)
                            rewriter()
                          parsePrimary(), expression)
                            parseSendOrFunctionLiteral(), expression)
                              parseSend(), expression)
                                ensureIdentifier(), expression)
                                  listener: handleIdentifier(, expression)
                                listener: handleNoTypeArguments(+)
                                parseArgumentsOpt()
                                  listener: handleNoArguments(+)
                                listener: handleSend(, +)
                        listener: beginBinaryExpression(+)
                        parsePrecedenceExpression(+, 14, true)
                          parseUnaryExpression(+, true)
                            parsePrimary(+, expression)
                              parseLiteralInt(+)
                                listener: handleLiteralInt(1)
                        listener: endBinaryExpression(+)
                    ensureSemicolon(1)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(6, {, })
        listener: endTopLevelMethod(final, null, })
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType(})
        ensureIdentifier(}, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(finally)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(finally)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(finally)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(finally)
      parseTopLevelMethod(;, null, ;, Instance of 'NoType', null, finally)
        listener: beginTopLevelMethod(;, null)
        listener: handleNoType(;)
        ensureIdentifier(;, topLevelFunctionDeclaration)
          reportRecoverableErrorWithToken(finally, Instance of 'Template<(Token) => Message>')
            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'finally'., null, {token: finally}], finally, finally)
          listener: handleIdentifier(finally, topLevelFunctionDeclaration)
        parseMethodTypeVar(finally)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(finally, finally, false, MemberKind.TopLevelMethod)
          parseFormalParameters(finally, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, x, null, null, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        inPlainSync()
                        parseSend(return, expression)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(finally, Instance of 'Template<(Token) => Message>')
                              listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'finally'., null, {token: finally}], finally, finally)
                            listener: handleIdentifier(finally, expression)
                          listener: handleNoTypeArguments(()
                          parseArgumentsOpt(finally)
                            parseArguments(finally)
                              parseArgumentsRest(()
                                listener: beginArguments(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true)
                                    parseUnaryExpression((, true)
                                      parsePrimary((, expression)
                                        parseSendOrFunctionLiteral((, expression)
                                          parseSend((, expression)
                                            ensureIdentifier((, expression)
                                              listener: handleIdentifier(x, expression)
                                            listener: handleNoTypeArguments(-)
                                            parseArgumentsOpt(x)
                                              listener: handleNoArguments(-)
                                            listener: handleSend(x, -)
                                    listener: beginBinaryExpression(-)
                                    parsePrecedenceExpression(-, 14, true)
                                      parseUnaryExpression(-, true)
                                        parsePrimary(-, expression)
                                          parseLiteralInt(-)
                                            listener: handleLiteralInt(1)
                                    listener: endBinaryExpression(-)
                                listener: endArguments(1, (, ))
                          listener: handleSend(finally, +)
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true)
                      parseUnaryExpression(+, true)
                        parsePrimary(+, expression)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(finally, null, })
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType(})
        ensureIdentifier(}, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(for)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(for)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(for)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(for)
      parseTopLevelMethod(;, null, ;, Instance of 'NoType', null, for)
        listener: beginTopLevelMethod(;, null)
        listener: handleNoType(;)
        ensureIdentifier(;, topLevelFunctionDeclaration)
          reportRecoverableErrorWithToken(for, Instance of 'Template<(Token) => Message>')
            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'for'., null, {token: for}], for, for)
          listener: handleIdentifier(for, topLevelFunctionDeclaration)
        parseMethodTypeVar(for)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(for, for, false, MemberKind.TopLevelMethod)
          parseFormalParameters(for, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, x, null, null, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        inPlainSync()
                        parseSend(return, expression)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(for, Instance of 'Template<(Token) => Message>')
                              listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'for'., null, {token: for}], for, for)
                            rewriter()
                            listener: handleIdentifier(, expression)
                          listener: handleNoTypeArguments(for)
                          parseArgumentsOpt()
                            listener: handleNoArguments(for)
                          listener: handleSend(, for)
                ensureSemicolon()
                  reportRecoverableError(, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], for, for)
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, for)
          parseStatement(;)
            parseStatementX(;)
              parseForStatement(;, null)
                listener: beginForStatement(for)
                parseForLoopPartsStart(null, for)
                  parseExpressionStatementOrDeclaration((, true)
                    parseExpressionStatementOrDeclarationAfterModifiers((, (, null, null, null, true)
                parseForLoopPartsMid((, null, for)
                  parseExpression(()
                    parsePrecedenceExpression((, 1, true)
                      parseUnaryExpression((, true)
                        parsePrimary((, expression)
                          parseSendOrFunctionLiteral((, expression)
                            parseSend((, expression)
                              ensureIdentifier((, expression)
                                listener: handleIdentifier(x, expression)
                              listener: handleNoTypeArguments(-)
                              parseArgumentsOpt(x)
                                listener: handleNoArguments(-)
                              listener: handleSend(x, -)
                      listener: beginBinaryExpression(-)
                      parsePrecedenceExpression(-, 14, true)
                        parseUnaryExpression(-, true)
                          parsePrimary(-, expression)
                            parseLiteralInt(-)
                              listener: handleLiteralInt(1)
                      listener: endBinaryExpression(-)
                  listener: handleForInitializerExpressionStatement(1, false)
                parseForRest(null, 1, for)
                  parseForLoopPartsRest(1, for, null)
                    ensureSemicolon(1)
                      reportRecoverableError(1, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                        listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], 1, 1)
                      rewriter()
                    parseExpressionStatement(;)
                      parseExpression(;)
                        parsePrecedenceExpression(;, 1, true)
                          parseUnaryExpression(;, true)
                            parsePrimary(;, expression)
                              parseSend(;, expression)
                                ensureIdentifier(;, expression)
                                  reportRecoverableErrorWithToken(), Instance of 'Template<(Token) => Message>')
                                    listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got ')'., null, {token: )}], ), ))
                                  rewriter()
                                  listener: handleIdentifier(, expression)
                                listener: handleNoTypeArguments())
                                parseArgumentsOpt()
                                  listener: handleNoArguments())
                                listener: handleSend(, ))
                      ensureSemicolon()
                        reportRecoverableError(, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                          listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], ), ))
                        rewriter()
                      listener: handleExpressionStatement(;)
                    listener: handleForLoopParts(for, (, ;, 0)
                  listener: beginForStatementBody(+)
                  parseStatement())
                    parseStatementX())
                      parseExpressionStatementOrDeclaration(), false)
                        parseExpressionStatementOrDeclarationAfterModifiers(), ), null, null, null, false)
                          looksLikeLocalFunction(+)
                          parseExpressionStatement())
                            parseExpression())
                              parsePrecedenceExpression(), 1, true)
                                parseUnaryExpression(), true)
                                  rewriteAndRecover(), UnsupportedPrefixPlus, )
                                    reportRecoverableError(+, UnsupportedPrefixPlus)
                                      listener: handleRecoverableError(UnsupportedPrefixPlus, +, +)
                                    rewriter()
                                  parsePrimary(), expression)
                                    parseSendOrFunctionLiteral(), expression)
                                      parseSend(), expression)
                                        ensureIdentifier(), expression)
                                          listener: handleIdentifier(, expression)
                                        listener: handleNoTypeArguments(+)
                                        parseArgumentsOpt()
                                          listener: handleNoArguments(+)
                                        listener: handleSend(, +)
                                listener: beginBinaryExpression(+)
                                parsePrecedenceExpression(+, 14, true)
                                  parseUnaryExpression(+, true)
                                    parsePrimary(+, expression)
                                      parseLiteralInt(+)
                                        listener: handleLiteralInt(1)
                                listener: endBinaryExpression(+)
                            ensureSemicolon(1)
                            listener: handleExpressionStatement(;)
                  listener: endForStatementBody(})
                  listener: endForStatement(})
          notEofOrValue(}, })
          listener: endBlockFunctionBody(3, {, })
        listener: endTopLevelMethod(for, null, })
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType(})
        ensureIdentifier(}, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(if)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(if)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(if)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(if)
      parseTopLevelMethod(;, null, ;, Instance of 'NoType', null, if)
        listener: beginTopLevelMethod(;, null)
        listener: handleNoType(;)
        ensureIdentifier(;, topLevelFunctionDeclaration)
          reportRecoverableErrorWithToken(if, Instance of 'Template<(Token) => Message>')
            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'if'., null, {token: if}], if, if)
          listener: handleIdentifier(if, topLevelFunctionDeclaration)
        parseMethodTypeVar(if)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(if, if, false, MemberKind.TopLevelMethod)
          parseFormalParameters(if, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, x, null, null, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        inPlainSync()
                        parseSend(return, expression)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(if, Instance of 'Template<(Token) => Message>')
                              listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'if'., null, {token: if}], if, if)
                            rewriter()
                            listener: handleIdentifier(, expression)
                          listener: handleNoTypeArguments(if)
                          parseArgumentsOpt()
                            listener: handleNoArguments(if)
                          listener: handleSend(, if)
                ensureSemicolon()
                  reportRecoverableError(, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], if, if)
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, if)
          parseStatement(;)
            parseStatementX(;)
              parseIfStatement(;)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(-)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(-)
                                listener: handleSend(x, -)
                        listener: beginBinaryExpression(-)
                        parsePrecedenceExpression(-, 14, true)
                          parseUnaryExpression(-, true)
                            parsePrimary(-, expression)
                              parseLiteralInt(-)
                                listener: handleLiteralInt(1)
                        listener: endBinaryExpression(-)
                    ensureCloseParen(1, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(+)
                parseStatement())
                  parseStatementX())
                    parseExpressionStatementOrDeclaration(), false)
                      parseExpressionStatementOrDeclarationAfterModifiers(), ), null, null, null, false)
                        looksLikeLocalFunction(+)
                        parseExpressionStatement())
                          parseExpression())
                            parsePrecedenceExpression(), 1, true)
                              parseUnaryExpression(), true)
                                rewriteAndRecover(), UnsupportedPrefixPlus, )
                                  reportRecoverableError(+, UnsupportedPrefixPlus)
                                    listener: handleRecoverableError(UnsupportedPrefixPlus, +, +)
                                  rewriter()
                                parsePrimary(), expression)
                                  parseSendOrFunctionLiteral(), expression)
                                    parseSend(), expression)
                                      ensureIdentifier(), expression)
                                        listener: handleIdentifier(, expression)
                                      listener: handleNoTypeArguments(+)
                                      parseArgumentsOpt()
                                        listener: handleNoArguments(+)
                                      listener: handleSend(, +)
                              listener: beginBinaryExpression(+)
                              parsePrecedenceExpression(+, 14, true)
                                parseUnaryExpression(+, true)
                                  parsePrimary(+, expression)
                                    parseLiteralInt(+)
                                      listener: handleLiteralInt(1)
                              listener: endBinaryExpression(+)
                          ensureSemicolon(1)
                          listener: handleExpressionStatement(;)
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(3, {, })
        listener: endTopLevelMethod(if, null, })
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType(})
        ensureIdentifier(}, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(in)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(in)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(in)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(in)
      parseTopLevelMethod(;, null, ;, Instance of 'NoType', null, in)
        listener: beginTopLevelMethod(;, null)
        listener: handleNoType(;)
        ensureIdentifier(;, topLevelFunctionDeclaration)
          reportRecoverableErrorWithToken(in, Instance of 'Template<(Token) => Message>')
            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'in'., null, {token: in}], in, in)
          listener: handleIdentifier(in, topLevelFunctionDeclaration)
        parseMethodTypeVar(in)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(in, in, false, MemberKind.TopLevelMethod)
          parseFormalParameters(in, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, x, null, null, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        inPlainSync()
                        parseSend(return, expression)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(in, Instance of 'Template<(Token) => Message>')
                              listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'in'., null, {token: in}], in, in)
                            listener: handleIdentifier(in, expression)
                          listener: handleNoTypeArguments(()
                          parseArgumentsOpt(in)
                            parseArguments(in)
                              parseArgumentsRest(()
                                listener: beginArguments(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true)
                                    parseUnaryExpression((, true)
                                      parsePrimary((, expression)
                                        parseSendOrFunctionLiteral((, expression)
                                          parseSend((, expression)
                                            ensureIdentifier((, expression)
                                              listener: handleIdentifier(x, expression)
                                            listener: handleNoTypeArguments(-)
                                            parseArgumentsOpt(x)
                                              listener: handleNoArguments(-)
                                            listener: handleSend(x, -)
                                    listener: beginBinaryExpression(-)
                                    parsePrecedenceExpression(-, 14, true)
                                      parseUnaryExpression(-, true)
                                        parsePrimary(-, expression)
                                          parseLiteralInt(-)
                                            listener: handleLiteralInt(1)
                                    listener: endBinaryExpression(-)
                                listener: endArguments(1, (, ))
                          listener: handleSend(in, +)
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true)
                      parseUnaryExpression(+, true)
                        parsePrimary(+, expression)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(in, null, })
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType(})
        ensureIdentifier(}, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(is)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(is)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(is)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(is)
      parseTopLevelMethod(;, null, ;, Instance of 'NoType', null, is)
        listener: beginTopLevelMethod(;, null)
        listener: handleNoType(;)
        ensureIdentifier(;, topLevelFunctionDeclaration)
          reportRecoverableErrorWithToken(is, Instance of 'Template<(Token) => Message>')
            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'is'., null, {token: is}], is, is)
          listener: handleIdentifier(is, topLevelFunctionDeclaration)
        parseMethodTypeVar(is)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(is, is, false, MemberKind.TopLevelMethod)
          parseFormalParameters(is, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, x, null, null, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        inPlainSync()
                        parseSend(return, expression)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(is, Instance of 'Template<(Token) => Message>')
                              listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'is'., null, {token: is}], is, is)
                            rewriter()
                            listener: handleIdentifier(, expression)
                          listener: handleNoTypeArguments(is)
                          parseArgumentsOpt()
                            listener: handleNoArguments(is)
                          listener: handleSend(, is)
                    parseIsOperatorRest()
                      listener: beginIsOperatorType(is)
                      computeTypeAfterIsOrAs(is)
                      reportRecoverableErrorWithToken((, Instance of 'Template<(Token) => Message>')
                        listener: handleRecoverableError(Message[ExpectedType, Expected a type, but got '('., null, {token: (}], (, ()
                      rewriter()
                      listener: handleIdentifier(, typeReference)
                      listener: handleNoTypeArguments(()
                      listener: handleType(, null)
                      listener: endIsOperatorType(is)
                      listener: handleIsOperator(is, null)
                      skipChainedAsIsOperators()
                ensureSemicolon()
                  reportRecoverableError(, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], (, ()
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(()
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseParenthesizedExpressionOrFunctionLiteral(;)
                              parseParenthesizedExpression(;)
                                parseExpressionInParenthesis(;)
                                  parseExpressionInParenthesisRest(()
                                    parseExpression(()
                                      parsePrecedenceExpression((, 1, true)
                                        parseUnaryExpression((, true)
                                          parsePrimary((, expression)
                                            parseSendOrFunctionLiteral((, expression)
                                              parseSend((, expression)
                                                ensureIdentifier((, expression)
                                                  listener: handleIdentifier(x, expression)
                                                listener: handleNoTypeArguments(-)
                                                parseArgumentsOpt(x)
                                                  listener: handleNoArguments(-)
                                                listener: handleSend(x, -)
                                        listener: beginBinaryExpression(-)
                                        parsePrecedenceExpression(-, 14, true)
                                          parseUnaryExpression(-, true)
                                            parsePrimary(-, expression)
                                              parseLiteralInt(-)
                                                listener: handleLiteralInt(1)
                                        listener: endBinaryExpression(-)
                                    ensureCloseParen(1, ()
                                listener: handleParenthesizedExpression(()
                        listener: beginBinaryExpression(+)
                        parsePrecedenceExpression(+, 14, true)
                          parseUnaryExpression(+, true)
                            parsePrimary(+, expression)
                              parseLiteralInt(+)
                                listener: handleLiteralInt(1)
                        listener: endBinaryExpression(+)
                    ensureSemicolon(1)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(3, {, })
        listener: endTopLevelMethod(is, null, })
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType(})
        ensureIdentifier(}, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(new)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(new)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(new)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(new)
      parseTopLevelMethod(;, null, ;, Instance of 'NoType', null, new)
        listener: beginTopLevelMethod(;, null)
        listener: handleNoType(;)
        ensureIdentifier(;, topLevelFunctionDeclaration)
          reportRecoverableErrorWithToken(new, Instance of 'Template<(Token) => Message>')
            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'new'., null, {token: new}], new, new)
          listener: handleIdentifier(new, topLevelFunctionDeclaration)
        parseMethodTypeVar(new)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(new, new, false, MemberKind.TopLevelMethod)
          parseFormalParameters(new, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, x, null, null, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        parseNewExpression(return)
                          listener: beginNewExpression(new)
                          parseConstructorReference(new, null)
                            ensureIdentifier(new, constructorReference)
                              insertSyntheticIdentifier(new, constructorReference, message: Message[ExpectedIdentifier, Expected an identifier, but got '('., null, {token: (}], messageOnToken: null)
                                reportRecoverableError((, Message[ExpectedIdentifier, Expected an identifier, but got '('., null, {token: (}])
                                  listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '('., null, {token: (}], (, ()
                                rewriter()
                              listener: handleIdentifier(, constructorReference)
                            listener: beginConstructorReference()
                            parseQualifiedRestOpt(, constructorReferenceContinuation)
                            listener: handleNoTypeArguments(()
                            listener: handleNoConstructorReferenceContinuationAfterTypeArguments(()
                            listener: endConstructorReference(, null, ()
                          parseConstructorInvocationArguments()
                            parseArgumentsRest(()
                              listener: beginArguments(()
                              parseExpression(()
                                parsePrecedenceExpression((, 1, true)
                                  parseUnaryExpression((, true)
                                    parsePrimary((, expression)
                                      parseSendOrFunctionLiteral((, expression)
                                        parseSend((, expression)
                                          ensureIdentifier((, expression)
                                            listener: handleIdentifier(x, expression)
                                          listener: handleNoTypeArguments(-)
                                          parseArgumentsOpt(x)
                                            listener: handleNoArguments(-)
                                          listener: handleSend(x, -)
                                  listener: beginBinaryExpression(-)
                                  parsePrecedenceExpression(-, 14, true)
                                    parseUnaryExpression(-, true)
                                      parsePrimary(-, expression)
                                        parseLiteralInt(-)
                                          listener: handleLiteralInt(1)
                                  listener: endBinaryExpression(-)
                              listener: endArguments(1, (, ))
                          listener: endNewExpression(new)
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true)
                      parseUnaryExpression(+, true)
                        parsePrimary(+, expression)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(new, null, })
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType(})
        ensureIdentifier(}, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(null)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(null)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(null)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(null)
      parseTopLevelMethod(;, null, ;, Instance of 'NoType', null, null)
        listener: beginTopLevelMethod(;, null)
        listener: handleNoType(;)
        ensureIdentifier(;, topLevelFunctionDeclaration)
          reportRecoverableErrorWithToken(null, Instance of 'Template<(Token) => Message>')
            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'null'., null, {token: null}], null, null)
          listener: handleIdentifier(null, topLevelFunctionDeclaration)
        parseMethodTypeVar(null)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(null, null, false, MemberKind.TopLevelMethod)
          parseFormalParameters(null, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, x, null, null, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        parseLiteralNull(return)
                          listener: handleLiteralNull(null)
                    parseArgumentOrIndexStar(null, Instance of 'NoTypeParamOrArg', false)
                      listener: handleNoTypeArguments(()
                      parseArguments(null)
                        parseArgumentsRest(()
                          listener: beginArguments(()
                          parseExpression(()
                            parsePrecedenceExpression((, 1, true)
                              parseUnaryExpression((, true)
                                parsePrimary((, expression)
                                  parseSendOrFunctionLiteral((, expression)
                                    parseSend((, expression)
                                      ensureIdentifier((, expression)
                                        listener: handleIdentifier(x, expression)
                                      listener: handleNoTypeArguments(-)
                                      parseArgumentsOpt(x)
                                        listener: handleNoArguments(-)
                                      listener: handleSend(x, -)
                              listener: beginBinaryExpression(-)
                              parsePrecedenceExpression(-, 14, true)
                                parseUnaryExpression(-, true)
                                  parsePrimary(-, expression)
                                    parseLiteralInt(-)
                                      listener: handleLiteralInt(1)
                              listener: endBinaryExpression(-)
                          listener: endArguments(1, (, ))
                      listener: handleSend((, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true)
                      parseUnaryExpression(+, true)
                        parsePrimary(+, expression)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(null, null, })
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType(})
        ensureIdentifier(}, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(rethrow)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(rethrow)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(rethrow)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(rethrow)
      parseTopLevelMethod(;, null, ;, Instance of 'NoType', null, rethrow)
        listener: beginTopLevelMethod(;, null)
        listener: handleNoType(;)
        ensureIdentifier(;, topLevelFunctionDeclaration)
          reportRecoverableErrorWithToken(rethrow, Instance of 'Template<(Token) => Message>')
            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'rethrow'., null, {token: rethrow}], rethrow, rethrow)
          listener: handleIdentifier(rethrow, topLevelFunctionDeclaration)
        parseMethodTypeVar(rethrow)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(rethrow, rethrow, false, MemberKind.TopLevelMethod)
          parseFormalParameters(rethrow, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, x, null, null, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        inPlainSync()
                        parseSend(return, expression)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(rethrow, Instance of 'Template<(Token) => Message>')
                              listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'rethrow'., null, {token: rethrow}], rethrow, rethrow)
                            listener: handleIdentifier(rethrow, expression)
                          listener: handleNoTypeArguments(()
                          parseArgumentsOpt(rethrow)
                            parseArguments(rethrow)
                              parseArgumentsRest(()
                                listener: beginArguments(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true)
                                    parseUnaryExpression((, true)
                                      parsePrimary((, expression)
                                        parseSendOrFunctionLiteral((, expression)
                                          parseSend((, expression)
                                            ensureIdentifier((, expression)
                                              listener: handleIdentifier(x, expression)
                                            listener: handleNoTypeArguments(-)
                                            parseArgumentsOpt(x)
                                              listener: handleNoArguments(-)
                                            listener: handleSend(x, -)
                                    listener: beginBinaryExpression(-)
                                    parsePrecedenceExpression(-, 14, true)
                                      parseUnaryExpression(-, true)
                                        parsePrimary(-, expression)
                                          parseLiteralInt(-)
                                            listener: handleLiteralInt(1)
                                    listener: endBinaryExpression(-)
                                listener: endArguments(1, (, ))
                          listener: handleSend(rethrow, +)
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true)
                      parseUnaryExpression(+, true)
                        parsePrimary(+, expression)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(rethrow, null, })
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType(})
        ensureIdentifier(}, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(return)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(return)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(return)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(return)
      parseTopLevelMethod(;, null, ;, Instance of 'NoType', null, return)
        listener: beginTopLevelMethod(;, null)
        listener: handleNoType(;)
        ensureIdentifier(;, topLevelFunctionDeclaration)
          reportRecoverableErrorWithToken(return, Instance of 'Template<(Token) => Message>')
            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'return'., null, {token: return}], return, return)
          listener: handleIdentifier(return, topLevelFunctionDeclaration)
        parseMethodTypeVar(return)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(return, return, false, MemberKind.TopLevelMethod)
          parseFormalParameters(return, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, x, null, null, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        inPlainSync()
                        reportRecoverableErrorWithToken(return, Instance of 'Template<(Token) => Message>')
                          listener: handleRecoverableError(Message[UnexpectedToken, Unexpected token 'return'., null, {token: return}], return, return)
                        parsePrimary(return, expression)
                          parseParenthesizedExpressionOrFunctionLiteral(return)
                            parseParenthesizedExpression(return)
                              parseExpressionInParenthesis(return)
                                parseExpressionInParenthesisRest(()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true)
                                      parseUnaryExpression((, true)
                                        parsePrimary((, expression)
                                          parseSendOrFunctionLiteral((, expression)
                                            parseSend((, expression)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, -)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true)
                                        parseUnaryExpression(-, true)
                                          parsePrimary(-, expression)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-)
                                  ensureCloseParen(1, ()
                              listener: handleParenthesizedExpression(()
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true)
                      parseUnaryExpression(+, true)
                        parsePrimary(+, expression)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(return, null, })
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType(})
        ensureIdentifier(}, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(super)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(super)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(super)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(super)
      parseTopLevelMethod(;, null, ;, Instance of 'NoType', null, super)
        listener: beginTopLevelMethod(;, null)
        listener: handleNoType(;)
        ensureIdentifier(;, topLevelFunctionDeclaration)
          reportRecoverableErrorWithToken(super, Instance of 'Template<(Token) => Message>')
            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'super'., null, {token: super}], super, super)
          listener: handleIdentifier(super, topLevelFunctionDeclaration)
        parseMethodTypeVar(super)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(super, super, false, MemberKind.TopLevelMethod)
          parseFormalParameters(super, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, x, null, null, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        parseSuperExpression(return, expression)
                          listener: handleSuperExpression(super, expression)
                          listener: handleNoTypeArguments(()
                          parseArguments(super)
                            parseArgumentsRest(()
                              listener: beginArguments(()
                              parseExpression(()
                                parsePrecedenceExpression((, 1, true)
                                  parseUnaryExpression((, true)
                                    parsePrimary((, expression)
                                      parseSendOrFunctionLiteral((, expression)
                                        parseSend((, expression)
                                          ensureIdentifier((, expression)
                                            listener: handleIdentifier(x, expression)
                                          listener: handleNoTypeArguments(-)
                                          parseArgumentsOpt(x)
                                            listener: handleNoArguments(-)
                                          listener: handleSend(x, -)
                                  listener: beginBinaryExpression(-)
                                  parsePrecedenceExpression(-, 14, true)
                                    parseUnaryExpression(-, true)
                                      parsePrimary(-, expression)
                                        parseLiteralInt(-)
                                          listener: handleLiteralInt(1)
                                  listener: endBinaryExpression(-)
                              listener: endArguments(1, (, ))
                          listener: handleSend(super, +)
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true)
                      parseUnaryExpression(+, true)
                        parsePrimary(+, expression)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(super, null, })
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType(})
        ensureIdentifier(}, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(switch)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(switch)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(switch)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(switch)
      parseTopLevelMethod(;, null, ;, Instance of 'NoType', null, switch)
        listener: beginTopLevelMethod(;, null)
        listener: handleNoType(;)
        ensureIdentifier(;, topLevelFunctionDeclaration)
          reportRecoverableErrorWithToken(switch, Instance of 'Template<(Token) => Message>')
            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'switch'., null, {token: switch}], switch, switch)
          listener: handleIdentifier(switch, topLevelFunctionDeclaration)
        parseMethodTypeVar(switch)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(switch, switch, false, MemberKind.TopLevelMethod)
          parseFormalParameters(switch, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, x, null, null, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        inPlainSync()
                        parseSend(return, expression)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(switch, Instance of 'Template<(Token) => Message>')
                              listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'switch'., null, {token: switch}], switch, switch)
                            rewriter()
                            listener: handleIdentifier(, expression)
                          listener: handleNoTypeArguments(switch)
                          parseArgumentsOpt()
                            listener: handleNoArguments(switch)
                          listener: handleSend(, switch)
                ensureSemicolon()
                  reportRecoverableError(, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], switch, switch)
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, switch)
          parseStatement(;)
            parseStatementX(;)
              parseSwitchStatement(;)
                listener: beginSwitchStatement(switch)
                ensureParenthesizedCondition(switch)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(-)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(-)
                                listener: handleSend(x, -)
                        listener: beginBinaryExpression(-)
                        parsePrecedenceExpression(-, 14, true)
                          parseUnaryExpression(-, true)
                            parsePrimary(-, expression)
                              parseLiteralInt(-)
                                listener: handleLiteralInt(1)
                        listener: endBinaryExpression(-)
                    ensureCloseParen(1, ()
                  listener: handleParenthesizedCondition(()
                parseSwitchBlock())
                  ensureBlock(), null, switch statement)
                    reportRecoverableError(), Message[ExpectedClassOrMixinBody, A switch statement must have a body, even if it is empty., Try adding an empty body., {string: switch statement}])
                      listener: handleRecoverableError(Message[ExpectedClassOrMixinBody, A switch statement must have a body, even if it is empty., Try adding an empty body., {string: switch statement}], ), ))
                    insertBlock())
                      rewriter()
                      rewriter()
                  listener: beginSwitchBlock({)
                  notEofOrValue(}, })
                  listener: endSwitchBlock(0, {, })
                listener: endSwitchStatement(switch, })
          notEofOrValue(}, +)
          parseStatement(})
            parseStatementX(})
              parseExpressionStatementOrDeclaration(}, false)
                parseExpressionStatementOrDeclarationAfterModifiers(}, }, null, null, null, false)
                  looksLikeLocalFunction(+)
                  parseExpressionStatement(})
                    parseExpression(})
                      parsePrecedenceExpression(}, 1, true)
                        parseUnaryExpression(}, true)
                          rewriteAndRecover(}, UnsupportedPrefixPlus, )
                            reportRecoverableError(+, UnsupportedPrefixPlus)
                              listener: handleRecoverableError(UnsupportedPrefixPlus, +, +)
                            rewriter()
                          parsePrimary(}, expression)
                            parseSendOrFunctionLiteral(}, expression)
                              parseSend(}, expression)
                                ensureIdentifier(}, expression)
                                  listener: handleIdentifier(, expression)
                                listener: handleNoTypeArguments(+)
                                parseArgumentsOpt()
                                  listener: handleNoArguments(+)
                                listener: handleSend(, +)
                        listener: beginBinaryExpression(+)
                        parsePrecedenceExpression(+, 14, true)
                          parseUnaryExpression(+, true)
                            parsePrimary(+, expression)
                              parseLiteralInt(+)
                                listener: handleLiteralInt(1)
                        listener: endBinaryExpression(+)
                    ensureSemicolon(1)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(4, {, })
        listener: endTopLevelMethod(switch, null, })
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, }, Instance of 'SimpleType', null, this)
        listener: beginTopLevelMethod(}, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(this)
        listener: handleType(int, null)
        ensureIdentifier(int, topLevelFunctionDeclaration)
          reportRecoverableErrorWithToken(this, Instance of 'Template<(Token) => Message>')
            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'this'., null, {token: this}], this, this)
          listener: handleIdentifier(this, topLevelFunctionDeclaration)
        parseMethodTypeVar(this)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(this, this, false, MemberKind.TopLevelMethod)
          parseFormalParameters(this, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, x, null, null, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        parseThisExpression(return, expression)
                          listener: handleThisExpression(this, expression)
                          listener: handleNoTypeArguments(()
                          parseArguments(this)
                            parseArgumentsRest(()
                              listener: beginArguments(()
                              parseExpression(()
                                parsePrecedenceExpression((, 1, true)
                                  parseUnaryExpression((, true)
                                    parsePrimary((, expression)
                                      parseSendOrFunctionLiteral((, expression)
                                        parseSend((, expression)
                                          ensureIdentifier((, expression)
                                            listener: handleIdentifier(x, expression)
                                          listener: handleNoTypeArguments(-)
                                          parseArgumentsOpt(x)
                                            listener: handleNoArguments(-)
                                          listener: handleSend(x, -)
                                  listener: beginBinaryExpression(-)
                                  parsePrecedenceExpression(-, 14, true)
                                    parseUnaryExpression(-, true)
                                      parsePrimary(-, expression)
                                        parseLiteralInt(-)
                                          listener: handleLiteralInt(1)
                                  listener: endBinaryExpression(-)
                              listener: endArguments(1, (, ))
                          listener: handleSend(this, +)
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true)
                      parseUnaryExpression(+, true)
                        parsePrimary(+, expression)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType(})
        ensureIdentifier(}, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(throw)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(throw)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(throw)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(throw)
      parseTopLevelMethod(;, null, ;, Instance of 'NoType', null, throw)
        listener: beginTopLevelMethod(;, null)
        listener: handleNoType(;)
        ensureIdentifier(;, topLevelFunctionDeclaration)
          reportRecoverableErrorWithToken(throw, Instance of 'Template<(Token) => Message>')
            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'throw'., null, {token: throw}], throw, throw)
          listener: handleIdentifier(throw, topLevelFunctionDeclaration)
        parseMethodTypeVar(throw)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(throw, throw, false, MemberKind.TopLevelMethod)
          parseFormalParameters(throw, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, x, null, null, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parseThrowExpression(return, true)
                    parseExpression(throw)
                      parsePrecedenceExpression(throw, 1, true)
                        parseUnaryExpression(throw, true)
                          parsePrimary(throw, expression)
                            parseParenthesizedExpressionOrFunctionLiteral(throw)
                              parseParenthesizedExpression(throw)
                                parseExpressionInParenthesis(throw)
                                  parseExpressionInParenthesisRest(()
                                    parseExpression(()
                                      parsePrecedenceExpression((, 1, true)
                                        parseUnaryExpression((, true)
                                          parsePrimary((, expression)
                                            parseSendOrFunctionLiteral((, expression)
                                              parseSend((, expression)
                                                ensureIdentifier((, expression)
                                                  listener: handleIdentifier(x, expression)
                                                listener: handleNoTypeArguments(-)
                                                parseArgumentsOpt(x)
                                                  listener: handleNoArguments(-)
                                                listener: handleSend(x, -)
                                        listener: beginBinaryExpression(-)
                                        parsePrecedenceExpression(-, 14, true)
                                          parseUnaryExpression(-, true)
                                            parsePrimary(-, expression)
                                              parseLiteralInt(-)
                                                listener: handleLiteralInt(1)
                                        listener: endBinaryExpression(-)
                                    ensureCloseParen(1, ()
                                listener: handleParenthesizedExpression(()
                        listener: beginBinaryExpression(+)
                        parsePrecedenceExpression(+, 14, true)
                          parseUnaryExpression(+, true)
                            parsePrimary(+, expression)
                              parseLiteralInt(+)
                                listener: handleLiteralInt(1)
                        listener: endBinaryExpression(+)
                    listener: handleThrowExpression(throw, ;)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(throw, null, })
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType(})
        ensureIdentifier(}, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(true)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(true)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(true)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(true)
      parseTopLevelMethod(;, null, ;, Instance of 'NoType', null, true)
        listener: beginTopLevelMethod(;, null)
        listener: handleNoType(;)
        ensureIdentifier(;, topLevelFunctionDeclaration)
          reportRecoverableErrorWithToken(true, Instance of 'Template<(Token) => Message>')
            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'true'., null, {token: true}], true, true)
          listener: handleIdentifier(true, topLevelFunctionDeclaration)
        parseMethodTypeVar(true)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(true, true, false, MemberKind.TopLevelMethod)
          parseFormalParameters(true, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, x, null, null, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        parseLiteralBool(return)
                          listener: handleLiteralBool(true)
                    parseArgumentOrIndexStar(true, Instance of 'NoTypeParamOrArg', false)
                      listener: handleNoTypeArguments(()
                      parseArguments(true)
                        parseArgumentsRest(()
                          listener: beginArguments(()
                          parseExpression(()
                            parsePrecedenceExpression((, 1, true)
                              parseUnaryExpression((, true)
                                parsePrimary((, expression)
                                  parseSendOrFunctionLiteral((, expression)
                                    parseSend((, expression)
                                      ensureIdentifier((, expression)
                                        listener: handleIdentifier(x, expression)
                                      listener: handleNoTypeArguments(-)
                                      parseArgumentsOpt(x)
                                        listener: handleNoArguments(-)
                                      listener: handleSend(x, -)
                              listener: beginBinaryExpression(-)
                              parsePrecedenceExpression(-, 14, true)
                                parseUnaryExpression(-, true)
                                  parsePrimary(-, expression)
                                    parseLiteralInt(-)
                                      listener: handleLiteralInt(1)
                              listener: endBinaryExpression(-)
                          listener: endArguments(1, (, ))
                      listener: handleSend((, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true)
                      parseUnaryExpression(+, true)
                        parsePrimary(+, expression)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(true, null, })
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType(})
        ensureIdentifier(}, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(try)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(try)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(try)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(try)
      parseTopLevelMethod(;, null, ;, Instance of 'NoType', null, try)
        listener: beginTopLevelMethod(;, null)
        listener: handleNoType(;)
        ensureIdentifier(;, topLevelFunctionDeclaration)
          reportRecoverableErrorWithToken(try, Instance of 'Template<(Token) => Message>')
            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'try'., null, {token: try}], try, try)
          listener: handleIdentifier(try, topLevelFunctionDeclaration)
        parseMethodTypeVar(try)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(try, try, false, MemberKind.TopLevelMethod)
          parseFormalParameters(try, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, x, null, null, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        inPlainSync()
                        parseSend(return, expression)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(try, Instance of 'Template<(Token) => Message>')
                              listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'try'., null, {token: try}], try, try)
                            rewriter()
                            listener: handleIdentifier(, expression)
                          listener: handleNoTypeArguments(try)
                          parseArgumentsOpt()
                            listener: handleNoArguments(try)
                          listener: handleSend(, try)
                ensureSemicolon()
                  reportRecoverableError(, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], try, try)
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, try)
          parseStatement(;)
            parseStatementX(;)
              parseTryStatement(;)
                listener: beginTryStatement(try)
                parseBlock(try, BlockKind(try statement))
                  ensureBlock(try, null, try statement)
                    reportRecoverableError(try, Message[ExpectedClassOrMixinBody, A try statement must have a body, even if it is empty., Try adding an empty body., {string: try statement}])
                      listener: handleRecoverableError(Message[ExpectedClassOrMixinBody, A try statement must have a body, even if it is empty., Try adding an empty body., {string: try statement}], try, try)
                    insertBlock(try)
                      rewriter()
                      rewriter()
                  listener: beginBlock({, BlockKind(try statement))
                  notEofOrValue(}, })
                  listener: endBlock(0, {, }, BlockKind(try statement))
                reportRecoverableError(try, OnlyTry)
                  listener: handleRecoverableError(OnlyTry, try, try)
                listener: endTryStatement(0, try, null)
          notEofOrValue(}, ()
          parseStatement(})
            parseStatementX(})
              parseExpressionStatementOrDeclaration(}, false)
                parseExpressionStatementOrDeclarationAfterModifiers(}, }, null, null, null, false)
                  looksLikeLocalFunction(()
                  parseExpressionStatement(})
                    parseExpression(})
                      parsePrecedenceExpression(}, 1, true)
                        parseUnaryExpression(}, true)
                          parsePrimary(}, expression)
                            parseParenthesizedExpressionOrFunctionLiteral(})
                              parseParenthesizedExpression(})
                                parseExpressionInParenthesis(})
                                  parseExpressionInParenthesisRest(()
                                    parseExpression(()
                                      parsePrecedenceExpression((, 1, true)
                                        parseUnaryExpression((, true)
                                          parsePrimary((, expression)
                                            parseSendOrFunctionLiteral((, expression)
                                              parseSend((, expression)
                                                ensureIdentifier((, expression)
                                                  listener: handleIdentifier(x, expression)
                                                listener: handleNoTypeArguments(-)
                                                parseArgumentsOpt(x)
                                                  listener: handleNoArguments(-)
                                                listener: handleSend(x, -)
                                        listener: beginBinaryExpression(-)
                                        parsePrecedenceExpression(-, 14, true)
                                          parseUnaryExpression(-, true)
                                            parsePrimary(-, expression)
                                              parseLiteralInt(-)
                                                listener: handleLiteralInt(1)
                                        listener: endBinaryExpression(-)
                                    ensureCloseParen(1, ()
                                listener: handleParenthesizedExpression(()
                        listener: beginBinaryExpression(+)
                        parsePrecedenceExpression(+, 14, true)
                          parseUnaryExpression(+, true)
                            parsePrimary(+, expression)
                              parseLiteralInt(+)
                                listener: handleLiteralInt(1)
                        listener: endBinaryExpression(+)
                    ensureSemicolon(1)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(4, {, })
        listener: endTopLevelMethod(try, null, })
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType(})
        ensureIdentifier(}, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(var)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      insertSyntheticIdentifier(var, methodDeclaration, message: null, messageOnToken: null)
        reportRecoverableError((, Message[ExpectedIdentifier, Expected an identifier, but got '('., null, {token: (}])
          listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '('., null, {token: (}], (, ()
        rewriter()
      reportRecoverableError(var, VarReturnType)
        listener: handleRecoverableError(VarReturnType, var, var)
      parseTopLevelMethod(;, null, var, Instance of 'NoType', null, )
        listener: beginTopLevelMethod(;, null)
        listener: handleNoType(var)
        ensureIdentifier(var, topLevelFunctionDeclaration)
          listener: handleIdentifier(, topLevelFunctionDeclaration)
        parseMethodTypeVar()
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(, , false, MemberKind.TopLevelMethod)
          parseFormalParameters(, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, x, null, null, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        inPlainSync()
                        parseSend(return, expression)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(var, Instance of 'Template<(Token) => Message>')
                              listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'var'., null, {token: var}], var, var)
                            rewriter()
                            listener: handleIdentifier(, expression)
                          listener: handleNoTypeArguments(var)
                          parseArgumentsOpt()
                            listener: handleNoArguments(var)
                          listener: handleSend(, var)
                ensureSemicolon()
                  reportRecoverableError(, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], var, var)
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, var)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(var, ;, null, var, null, false)
                looksLikeLocalFunction(()
                listener: beginMetadataStar(var)
                listener: endMetadataStar(0)
                listener: handleNoType(var)
                listener: beginVariablesDeclaration((, null, var)
                parseVariablesDeclarationRest(var, true)
                  parseOptionallyInitializedIdentifier(var)
                    ensureIdentifier(var, localVariableDeclaration)
                      reportRecoverableErrorWithToken((, Instance of 'Template<(Token) => Message>')
                        listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '('., null, {token: (}], (, ()
                      rewriter()
                      listener: handleIdentifier(, localVariableDeclaration)
                    listener: beginInitializedIdentifier()
                    parseVariableInitializerOpt()
                      listener: handleNoVariableInitializer(x)
                    listener: endInitializedIdentifier()
                  ensureSemicolon()
                    reportRecoverableError(, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                      listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], x, x)
                    rewriter()
                  listener: endVariablesDeclaration(1, ;)
          notEofOrValue(}, x)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                looksLikeLocalFunction(x)
                parseExpressionStatement(;)
                  parseExpression(;)
                    parsePrecedenceExpression(;, 1, true)
                      parseUnaryExpression(;, true)
                        parsePrimary(;, expression)
                          parseSendOrFunctionLiteral(;, expression)
                            parseSend(;, expression)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(x, expression)
                              listener: handleNoTypeArguments(-)
                              parseArgumentsOpt(x)
                                listener: handleNoArguments(-)
                              listener: handleSend(x, -)
                      listener: beginBinaryExpression(-)
                      parsePrecedenceExpression(-, 14, true)
                        parseUnaryExpression(-, true)
                          parsePrimary(-, expression)
                            parseLiteralInt(-)
                              listener: handleLiteralInt(1)
                      listener: endBinaryExpression(-)
                  ensureSemicolon(1)
                    reportRecoverableError(1, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                      listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], 1, 1)
                    rewriter()
                  listener: handleExpressionStatement(;)
          notEofOrValue(}, ))
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction())
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseSend(;, expression)
                              ensureIdentifier(;, expression)
                                reportRecoverableErrorWithToken(), Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got ')'., null, {token: )}], ), ))
                                rewriter()
                                listener: handleIdentifier(, expression)
                              listener: handleNoTypeArguments())
                              parseArgumentsOpt()
                                listener: handleNoArguments())
                              listener: handleSend(, ))
                    ensureSemicolon()
                      reportRecoverableError(, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                        listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], ), ))
                      rewriter()
                    listener: handleExpressionStatement(;)
          reportRecoverableError(;, Message[UnexpectedToken, Unexpected token ';'., null, {token: ;}])
            listener: handleRecoverableError(Message[UnexpectedToken, Unexpected token ';'., null, {token: ;}], ), ))
          notEofOrValue(}, +)
          parseStatement())
            parseStatementX())
              parseExpressionStatementOrDeclaration(), false)
                parseExpressionStatementOrDeclarationAfterModifiers(), ), null, null, null, false)
                  looksLikeLocalFunction(+)
                  parseExpressionStatement())
                    parseExpression())
                      parsePrecedenceExpression(), 1, true)
                        parseUnaryExpression(), true)
                          rewriteAndRecover(), UnsupportedPrefixPlus, )
                            reportRecoverableError(+, UnsupportedPrefixPlus)
                              listener: handleRecoverableError(UnsupportedPrefixPlus, +, +)
                            rewriter()
                          parsePrimary(), expression)
                            parseSendOrFunctionLiteral(), expression)
                              parseSend(), expression)
                                ensureIdentifier(), expression)
                                  listener: handleIdentifier(, expression)
                                listener: handleNoTypeArguments(+)
                                parseArgumentsOpt()
                                  listener: handleNoArguments(+)
                                listener: handleSend(, +)
                        listener: beginBinaryExpression(+)
                        parsePrecedenceExpression(+, 14, true)
                          parseUnaryExpression(+, true)
                            parsePrimary(+, expression)
                              parseLiteralInt(+)
                                listener: handleLiteralInt(1)
                        listener: endBinaryExpression(+)
                    ensureSemicolon(1)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(6, {, })
        listener: endTopLevelMethod(var, null, })
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType(})
        ensureIdentifier(}, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(void)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(void)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(void)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(void)
      insertSyntheticIdentifier(void, methodDeclaration, message: null, messageOnToken: null)
        reportRecoverableError((, Message[ExpectedIdentifier, Expected an identifier, but got '('., null, {token: (}])
          listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '('., null, {token: (}], (, ()
        rewriter()
      parseTopLevelMethod(;, null, ;, Instance of 'VoidType', null, )
        listener: beginTopLevelMethod(;, null)
        listener: handleVoidKeyword(void)
        ensureIdentifier(void, topLevelFunctionDeclaration)
          listener: handleIdentifier(, topLevelFunctionDeclaration)
        parseMethodTypeVar()
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(, , false, MemberKind.TopLevelMethod)
          parseFormalParameters(, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, x, null, null, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        parseSendOrFunctionLiteral(return, expression)
                          parseSend(return, expression)
                            ensureIdentifier(return, expression)
                              reportRecoverableErrorWithToken(void, Instance of 'Template<(Token) => Message>')
                                listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'void'., null, {token: void}], void, void)
                              rewriter()
                              listener: handleIdentifier(, expression)
                            listener: handleNoTypeArguments(void)
                            parseArgumentsOpt()
                              listener: handleNoArguments(void)
                            listener: handleSend(, void)
                ensureSemicolon()
                  reportRecoverableError(, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], void, void)
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, void)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(()
                  listener: beginMetadataStar(void)
                  listener: endMetadataStar(0)
                  listener: handleVoidKeyword(void)
                  listener: beginVariablesDeclaration((, null, null)
                  parseVariablesDeclarationRest(void, true)
                    parseOptionallyInitializedIdentifier(void)
                      ensureIdentifier(void, localVariableDeclaration)
                        reportRecoverableErrorWithToken((, Instance of 'Template<(Token) => Message>')
                          listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '('., null, {token: (}], (, ()
                        rewriter()
                        listener: handleIdentifier(, localVariableDeclaration)
                      listener: beginInitializedIdentifier()
                      parseVariableInitializerOpt()
                        listener: handleNoVariableInitializer(x)
                      listener: endInitializedIdentifier()
                    ensureSemicolon()
                      reportRecoverableError(, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                        listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], x, x)
                      rewriter()
                    listener: endVariablesDeclaration(1, ;)
          notEofOrValue(}, x)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                looksLikeLocalFunction(x)
                parseExpressionStatement(;)
                  parseExpression(;)
                    parsePrecedenceExpression(;, 1, true)
                      parseUnaryExpression(;, true)
                        parsePrimary(;, expression)
                          parseSendOrFunctionLiteral(;, expression)
                            parseSend(;, expression)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(x, expression)
                              listener: handleNoTypeArguments(-)
                              parseArgumentsOpt(x)
                                listener: handleNoArguments(-)
                              listener: handleSend(x, -)
                      listener: beginBinaryExpression(-)
                      parsePrecedenceExpression(-, 14, true)
                        parseUnaryExpression(-, true)
                          parsePrimary(-, expression)
                            parseLiteralInt(-)
                              listener: handleLiteralInt(1)
                      listener: endBinaryExpression(-)
                  ensureSemicolon(1)
                    reportRecoverableError(1, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                      listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], 1, 1)
                    rewriter()
                  listener: handleExpressionStatement(;)
          notEofOrValue(}, ))
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction())
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseSend(;, expression)
                              ensureIdentifier(;, expression)
                                reportRecoverableErrorWithToken(), Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got ')'., null, {token: )}], ), ))
                                rewriter()
                                listener: handleIdentifier(, expression)
                              listener: handleNoTypeArguments())
                              parseArgumentsOpt()
                                listener: handleNoArguments())
                              listener: handleSend(, ))
                    ensureSemicolon()
                      reportRecoverableError(, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                        listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], ), ))
                      rewriter()
                    listener: handleExpressionStatement(;)
          reportRecoverableError(;, Message[UnexpectedToken, Unexpected token ';'., null, {token: ;}])
            listener: handleRecoverableError(Message[UnexpectedToken, Unexpected token ';'., null, {token: ;}], ), ))
          notEofOrValue(}, +)
          parseStatement())
            parseStatementX())
              parseExpressionStatementOrDeclaration(), false)
                parseExpressionStatementOrDeclarationAfterModifiers(), ), null, null, null, false)
                  looksLikeLocalFunction(+)
                  parseExpressionStatement())
                    parseExpression())
                      parsePrecedenceExpression(), 1, true)
                        parseUnaryExpression(), true)
                          rewriteAndRecover(), UnsupportedPrefixPlus, )
                            reportRecoverableError(+, UnsupportedPrefixPlus)
                              listener: handleRecoverableError(UnsupportedPrefixPlus, +, +)
                            rewriter()
                          parsePrimary(), expression)
                            parseSendOrFunctionLiteral(), expression)
                              parseSend(), expression)
                                ensureIdentifier(), expression)
                                  listener: handleIdentifier(, expression)
                                listener: handleNoTypeArguments(+)
                                parseArgumentsOpt()
                                  listener: handleNoArguments(+)
                                listener: handleSend(, +)
                        listener: beginBinaryExpression(+)
                        parsePrecedenceExpression(+, 14, true)
                          parseUnaryExpression(+, true)
                            parsePrimary(+, expression)
                              parseLiteralInt(+)
                                listener: handleLiteralInt(1)
                        listener: endBinaryExpression(+)
                    ensureSemicolon(1)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(6, {, })
        listener: endTopLevelMethod(void, null, })
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType(})
        ensureIdentifier(}, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(while)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(while)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(while)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(while)
      parseTopLevelMethod(;, null, ;, Instance of 'NoType', null, while)
        listener: beginTopLevelMethod(;, null)
        listener: handleNoType(;)
        ensureIdentifier(;, topLevelFunctionDeclaration)
          reportRecoverableErrorWithToken(while, Instance of 'Template<(Token) => Message>')
            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'while'., null, {token: while}], while, while)
          listener: handleIdentifier(while, topLevelFunctionDeclaration)
        parseMethodTypeVar(while)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(while, while, false, MemberKind.TopLevelMethod)
          parseFormalParameters(while, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, x, null, null, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        inPlainSync()
                        parseSend(return, expression)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(while, Instance of 'Template<(Token) => Message>')
                              listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'while'., null, {token: while}], while, while)
                            rewriter()
                            listener: handleIdentifier(, expression)
                          listener: handleNoTypeArguments(while)
                          parseArgumentsOpt()
                            listener: handleNoArguments(while)
                          listener: handleSend(, while)
                ensureSemicolon()
                  reportRecoverableError(, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], while, while)
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, while)
          parseStatement(;)
            parseStatementX(;)
              parseWhileStatement(;)
                listener: beginWhileStatement(while)
                ensureParenthesizedCondition(while)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(-)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(-)
                                listener: handleSend(x, -)
                        listener: beginBinaryExpression(-)
                        parsePrecedenceExpression(-, 14, true)
                          parseUnaryExpression(-, true)
                            parsePrimary(-, expression)
                              parseLiteralInt(-)
                                listener: handleLiteralInt(1)
                        listener: endBinaryExpression(-)
                    ensureCloseParen(1, ()
                  listener: handleParenthesizedCondition(()
                listener: beginWhileStatementBody(+)
                parseStatement())
                  parseStatementX())
                    parseExpressionStatementOrDeclaration(), false)
                      parseExpressionStatementOrDeclarationAfterModifiers(), ), null, null, null, false)
                        looksLikeLocalFunction(+)
                        parseExpressionStatement())
                          parseExpression())
                            parsePrecedenceExpression(), 1, true)
                              parseUnaryExpression(), true)
                                rewriteAndRecover(), UnsupportedPrefixPlus, )
                                  reportRecoverableError(+, UnsupportedPrefixPlus)
                                    listener: handleRecoverableError(UnsupportedPrefixPlus, +, +)
                                  rewriter()
                                parsePrimary(), expression)
                                  parseSendOrFunctionLiteral(), expression)
                                    parseSend(), expression)
                                      ensureIdentifier(), expression)
                                        listener: handleIdentifier(, expression)
                                      listener: handleNoTypeArguments(+)
                                      parseArgumentsOpt()
                                        listener: handleNoArguments(+)
                                      listener: handleSend(, +)
                              listener: beginBinaryExpression(+)
                              parsePrecedenceExpression(+, 14, true)
                                parseUnaryExpression(+, true)
                                  parsePrimary(+, expression)
                                    parseLiteralInt(+)
                                      listener: handleLiteralInt(1)
                              listener: endBinaryExpression(+)
                          ensureSemicolon(1)
                          listener: handleExpressionStatement(;)
                listener: endWhileStatementBody(})
                listener: endWhileStatement(while, })
          notEofOrValue(}, })
          listener: endBlockFunctionBody(3, {, })
        listener: endTopLevelMethod(while, null, })
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseFields(}, null, null, null, null, null, }, Instance of 'NoType', int, DeclarationKind.TopLevel, null)
        reportRecoverableError(int, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, int, int)
        listener: handleNoType(})
        ensureIdentifier(}, topLevelVariableDeclaration)
          listener: handleIdentifier(int, topLevelVariableDeclaration)
        parseFieldInitializerOpt(int, int, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(with)
        ensureSemicolon(int)
          reportRecoverableError(int, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], int, int)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, 1, int, ;)
  listener: endTopLevelDeclaration(with)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(with)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(with)
      parseTopLevelMethod(;, null, ;, Instance of 'NoType', null, with)
        listener: beginTopLevelMethod(;, null)
        listener: handleNoType(;)
        ensureIdentifier(;, topLevelFunctionDeclaration)
          reportRecoverableErrorWithToken(with, Instance of 'Template<(Token) => Message>')
            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'with'., null, {token: with}], with, with)
          listener: handleIdentifier(with, topLevelFunctionDeclaration)
        parseMethodTypeVar(with)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(with, with, false, MemberKind.TopLevelMethod)
          parseFormalParameters(with, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, x, null, null, FormalParameterKind.mandatory, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if)
                  parseExpressionInParenthesisRest(()
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, ==)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true)
                          parseUnaryExpression(==, true)
                            parsePrimary(==, expression)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==)
                    ensureCloseParen(0, ()
                  listener: handleParenthesizedCondition(()
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true)
                          parseUnaryExpression(return, true)
                            parsePrimary(return, expression)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true)
                    parseUnaryExpression(return, true)
                      parsePrimary(return, expression)
                        inPlainSync()
                        parseSend(return, expression)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(with, Instance of 'Template<(Token) => Message>')
                              listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'with'., null, {token: with}], with, with)
                            listener: handleIdentifier(with, expression)
                          listener: handleNoTypeArguments(()
                          parseArgumentsOpt(with)
                            parseArguments(with)
                              parseArgumentsRest(()
                                listener: beginArguments(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true)
                                    parseUnaryExpression((, true)
                                      parsePrimary((, expression)
                                        parseSendOrFunctionLiteral((, expression)
                                          parseSend((, expression)
                                            ensureIdentifier((, expression)
                                              listener: handleIdentifier(x, expression)
                                            listener: handleNoTypeArguments(-)
                                            parseArgumentsOpt(x)
                                              listener: handleNoArguments(-)
                                            listener: handleSend(x, -)
                                    listener: beginBinaryExpression(-)
                                    parsePrecedenceExpression(-, 14, true)
                                      parseUnaryExpression(-, true)
                                        parsePrimary(-, expression)
                                          parseLiteralInt(-)
                                            listener: handleLiteralInt(1)
                                    listener: endBinaryExpression(-)
                                listener: endArguments(1, (, ))
                          listener: handleSend(with, +)
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true)
                      parseUnaryExpression(+, true)
                        parsePrimary(+, expression)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrValue(}, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(with, null, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(int)
  listener: endCompilationUnit(71, )
